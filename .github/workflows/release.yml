name: release

on:
  push:
    tags:
     - invoke-release

jobs:
  release:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '14'
        java-package: jdk
        architecture: x64
        
    - name: avoid release loop
      run: scripts/avoid-release-loop.sh
      env:
       GIT_RELEASE_BOT_NAME: "nb-droid"
       
    - name: capture tty
      run: |
       echo "::set-env name=TTY::"$(tty)
       echo "::set-env name=GPG_TTY::"$(tty)

    - name: initialize gpg
#       env:
#         GPG_TTY: ${TTY}
      run: |
        set -x
        echo "${{ secrets.GITHUB_GPG_KEY }}" | base64 -d > private.key
        gpg --import --batch ./private.key
        rm ./private.key
        echo "gnupg files:"
        ls -l ~/.gnupg/
        
    - name: set git username
      run: git config --global user.email "${{ secrets.NBDROID_EMAIL }}"
    - name: set git email
      run: git config --global user.name "${{ secrets.NBDROID_NAME }}"

    - name: free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2   

    - name: read versions
      run: |
        set -x
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        RELEASE_VERSION=${CURRENT_VERSION%%-SNAPSHOT}
        BASE_VERSION=$(echo "$RELEASE_VERSION" | cut -d'.' -f1-2)
        MINOR_VERSION=$(echo "$RELEASE_VERSION" | cut -d'.' -f3)
        NEXT_MINOR_VERSION=$(( MINOR_VERSION+1))
        NEXT_SNAPSHOT="${BASE_VERSION}.${NEXT_MINOR_VERSION}-SNAPSHOT"
        RELEASE_TAGNAME="nosqlbench-${RELEASE_VERSION}"
        echo "::set-env name=NEXT_SNAPSHOT::${NEXT_SNAPSHOT}"
        echo "::set-env name=RELEASE_VERSION::${RELEASE_VERSION}"  
        echo "::set-env name=RELEASE_TAGNAME::${RELEASE_TAGNAME}"
        
    - name: prepare release
      run: scripts/release-prepare.sh
      env: 
       RELEASE_BRANCH_NAME: "master"
       GIT_RELEASE_BOT_NAME: "nb-droid"
       GIT_RELEASE_BOT_EMAIL: ${{ secrets.GIT_RELEASE_BOT_EMAIL }}
       ACCESS_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
       GPG_ENABLED: "true"
       GPG_KEY_ID: ${{ secrets.GITHUB_GPG_KEY_ID }}
       GPG_KEY: ${{ secrets.GITHUB_GPG_KEY }}
       GPG_SERVER_NAME: ${{ secrets.GPG_SERVER_NAME }}
       GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
       MAVEN_REPO_SERVER_ID: ${{ secrets.MAVEN_REPO_SERVER_ID }}
       MAVEN_REPO_SERVER_USERNAME: ${{ secrets.MVN_REPO_PRIVATE_REPO_USER }}
       MAVEN_REPO_SERVER_PASSWORD: ${{ secrets.MVN_REPO_PRIVATE_REPO_PASSWORD }}

    - name: perform release
      run: scripts/release-perform.sh
      continue-on-error: true
      env: 
       RELEASE_BRANCH_NAME: "master"
       GIT_RELEASE_BOT_NAME: "nb-droid"
       GIT_RELEASE_BOT_EMAIL: ${{ secrets.GIT_RELEASE_BOT_EMAIL }}
       ACCESS_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
       GPG_ENABLED: "true"
       GPG_KEY_ID: ${{ secrets.GITHUB_GPG_KEY_ID }}
       GPG_KEY: ${{ secrets.GITHUB_GPG_KEY }}
       GPG_SERVER_NAME: ${{ secrets.GPG_SERVER_NAME }}
       GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
       MAVEN_REPO_SERVER_ID: ${{ secrets.MAVEN_REPO_SERVER_ID }}
       MAVEN_REPO_SERVER_USERNAME: ${{ secrets.MVN_REPO_PRIVATE_REPO_USER }}
       MAVEN_REPO_SERVER_PASSWORD: ${{ secrets.MVN_REPO_PRIVATE_REPO_PASSWORD }}
      
       
    - name: upload artifacts
      run: |
        pwd
        ls -l
        mkdir staging && cp nb/target/nb.jar nb/target/nb staging
    - uses: actions/upload-artifact@v1
      with: 
       name: binaries
       path: staging
    
    - name: upload guidebook
      run: mkdir guidebook && cp -R nb/target/guidebook guidebook
    - uses: actions/upload-artifact@v1
      with:
        name: guidebook
        path: guidebook

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAGNAME }}
        release_name: Release ${{ env.RELEASE_TAGNAME }}
        draft: false
        prerelease: false
    - name: Upload nb.jar
      id: upload-nb-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: nb/target/nb.jar
        asset_name: nb.jar
        asset_content_type: application/octet-stream
    - name: Upload nb
      id: upload-nb-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: nb/target/nb
        asset_name: nb
        asset_content_type: application/octet-stream

#     - name: find latest release
#       run: |
#         LATEST_GH_RELEASE_ID=$(curl --silent "https://api.github.com/repos/nosqlbench/nosqlbench/releases/latest" | jq -r .id)
#         echo "::set-env name=LATEST_GH_RELEASE_ID::${LATEST_GH_RELEASE_ID}"
#     - name: upload jar
#       uses: actions/upload-release-asset@v1
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#           asset_path: nb/target/nb.jar
#           asset_name: nb.jar
#           asset_content_type: application/octet-stream
#           upload_url: https://uploads.github.com/repos/nosqlbench/nosqlbench/releases/${{ env.LATEST_GH_RELEASE_ID }}/assets{?name,label}
#     - name: upload binary
#       uses: actions/upload-release-asset@v1
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with: 
#           asset_path: nb/target/nb
#           asset_name: nb
#           asset_content_type: application/octet-stream
#           upload_url: https://uploads.github.com/repos/nosqlbench/nosqlbench/releases/${{ env.LATEST_GH_RELEASE_ID }}/assets{?name,label}

  docs:
    needs: release
    runs-on: ubuntu-18.04
    steps:
      - name: set git username
        run: git config --global user.email "${{ secrets.NBDROID_EMAIL }}"
      - name: set git email
        run: git config --global user.name "${{ secrets.NBDROID_NAME }}"
      - name: download guidebook
        uses: actions/download-artifact@v1
        with:
         name: guidebook
         path: guidebook
      - run: ls -la
      - name: clone nosqlbench-docs
        env:
          NBDROID_NAME: ${{ secrets.NBDROID_NAME }}
          NBDROID_TOKEN: ${{ secrets.NBDROID_TOKEN }}
        run: |
         git clone https://${{secrets.NBDROID_NAME}}:${{secrets.NBDROID_TOKEN}}@github.com/nosqlbench/nosqlbench-docs.git nosqlbench-docs
         cd nosqlbench-docs
         echo "files listing"
         find .
         git remote set-url origin https://${{secrets.NBDROID_NAME}}:${{secrets.NBDROID_TOKEN}}@github.com/nosqlbench/nosqlbench-docs.git
         git remote -v
      - name: push changes
        env:
          NBDROID_NAME: ${{ secrets.NBDROID_NAME }}
          NBDROID_TOKEN: ${{ secrets.NBDROID_TOKEN }}
        run: |
         rsync -av --delete guidebook/guidebook/ nosqlbench-docs/docs/
         echo "docs.nosqlbench.io" > nosqlbench-docs/docs/CNAME
         cd nosqlbench-docs
         git add docs
         git add -u
         CHANGES=$(git status --porcelain 2>/dev/null| wc -l)
         echo "found $CHANGES to push for doc updates"
         if (( $CHANGES > 0 ))
         then
           git commit -m"docs update for $GITHUB_REF"
           git push
         fi

      
        
        
