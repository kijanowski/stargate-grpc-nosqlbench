// Generated from CqlParser.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CqlParserListener = require('./CqlParserListener').CqlParserListener;
var CqlParserVisitor = require('./CqlParserVisitor').CqlParserVisitor;

var grammarFileName = "CqlParser.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u00b2\u0b5f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a",
    "\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f",
    "\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093",
    "\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098",
    "\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c",
    "\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1",
    "\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4\4\u00a5\t\u00a5",
    "\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa",
    "\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae",
    "\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2\4\u00b3",
    "\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7",
    "\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc",
    "\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0",
    "\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4\t\u00c4\4\u00c5",
    "\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9",
    "\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce",
    "\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2\t\u00d2",
    "\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7",
    "\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db",
    "\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0",
    "\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3\4\u00e4\t\u00e4",
    "\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9",
    "\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed",
    "\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1\4\u00f2",
    "\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6",
    "\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb",
    "\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff",
    "\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103\t\u0103\4\u0104",
    "\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108",
    "\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d",
    "\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111\t\u0111",
    "\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116",
    "\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a",
    "\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f",
    "\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122\4\u0123\t\u0123",
    "\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128",
    "\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c",
    "\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130\4\u0131",
    "\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135",
    "\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a",
    "\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d\4\u013e\t\u013e",
    "\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142\t\u0142\4\u0143",
    "\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147",
    "\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b\4\u014c",
    "\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f\4\u0150\t\u0150",
    "\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155",
    "\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159",
    "\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d\t\u015d\4\u015e",
    "\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\3\2\5\2\u02c2\n\2\3\2\5\2\u02c5",
    "\n\2\3\2\3\2\3\3\3\3\5\3\u02cb\n\3\3\3\3\3\3\3\7\3\u02d0\n\3\f\3\16",
    "\3\u02d3\13\3\3\3\3\3\5\3\u02d7\n\3\3\3\5\3\u02da\n\3\3\3\5\3\u02dd",
    "\n\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6",
    "\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6",
    "\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0309\n\6\3\7\3\7\3\7\3\7\3",
    "\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u0318\n\t\3\t\5\t\u031b\n\t\3",
    "\n\3\n\3\n\3\n\3\n\5\n\u0322\n\n\3\n\3\n\3\n\5\n\u0327\n\n\3\13\3\13",
    "\3\13\3\13\3\13\3\13\3\13\3\f\3\f\5\f\u0332\n\f\3\f\3\f\3\f\3\f\3\f",
    "\3\f\3\f\3\f\5\f\u033c\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5",
    "\r\u0348\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0351\n\r\3\r\3\r\3\r\3",
    "\r\3\r\5\r\u0358\n\r\3\16\3\16\3\16\5\16\u035d\n\16\3\16\3\16\3\16\3",
    "\16\3\16\3\16\5\16\u0365\n\16\3\17\3\17\3\17\5\17\u036a\n\17\3\17\3",
    "\17\5\17\u036e\n\17\3\20\3\20\3\20\5\20\u0373\n\20\3\20\3\20\3\20\3",
    "\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0380\n\21\f\21\16\21\u0383",
    "\13\21\3\22\3\22\3\22\5\22\u0388\n\22\3\22\3\22\3\22\3\22\3\23\3\23",
    "\3\23\5\23\u0391\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3",
    "\23\3\23\5\23\u039e\n\23\3\24\3\24\3\24\3\24\3\24\5\24\u03a5\n\24\3",
    "\25\3\25\3\25\3\25\7\25\u03ab\n\25\f\25\16\25\u03ae\13\25\3\26\3\26",
    "\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5",
    "\27\u03bf\n\27\3\30\3\30\3\30\5\30\u03c4\n\30\3\30\3\30\3\30\3\30\3",
    "\30\3\30\3\30\3\30\3\30\3\30\5\30\u03d0\n\30\3\31\3\31\5\31\u03d4\n",
    "\31\3\31\3\31\5\31\u03d8\n\31\3\31\3\31\3\31\5\31\u03dd\n\31\3\31\3",
    "\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33",
    "\7\33\u03ee\n\33\f\33\16\33\u03f1\13\33\3\34\3\34\3\34\3\34\5\34\u03f7",
    "\n\34\3\34\3\34\3\34\3\34\3\35\3\35\5\35\u03ff\n\35\3\35\3\35\5\35\u0403",
    "\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3",
    "\35\3\36\3\36\3\36\3\36\5\36\u0416\n\36\3\37\3\37\3\37\3\37\3\37\7\37",
    "\u041d\n\37\f\37\16\37\u0420\13\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3",
    "!\3!\3!\7!\u042e\n!\f!\16!\u0431\13!\3!\3!\3\"\3\"\3\"\3\"\3\"\7\"\u043a",
    "\n\"\f\"\16\"\u043d\13\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\5$\u044a",
    "\n$\3%\3%\3%\3&\3&\5&\u0451\n&\3\'\3\'\3\'\3\'\3\'\3(\5(\u0459\n(\3",
    "(\5(\u045c\n(\3(\5(\u045f\n(\3)\3)\3)\3*\3*\3*\3*\7*\u0468\n*\f*\16",
    "*\u046b\13*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\7,\u0478\n,\f,\16,\u047b",
    "\13,\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\3/\5/\u048e\n/",
    "\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3",
    "\63\3\63\3\64\3\64\3\64\3\64\7\64\u04a3\n\64\f\64\16\64\u04a6\13\64",
    "\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u04b1\n\66\f\66\16",
    "\66\u04b4\13\66\3\67\3\67\3\67\3\67\5\67\u04ba\n\67\38\38\38\38\38\7",
    "8\u04c1\n8\f8\168\u04c4\138\39\39\39\39\39\39\39\39\39\39\39\39\39\3",
    "9\39\39\59\u04d6\n9\3:\3:\3:\3:\3:\3:\5:\u04de\n:\3;\3;\3;\5;\u04e3",
    "\n;\3;\3;\3<\3<\3<\5<\u04ea\n<\3<\3<\3=\3=\3=\5=\u04f1\n=\3=\3=\3>\3",
    ">\3>\5>\u04f8\n>\3>\3>\3?\3?\3?\5?\u04ff\n?\3?\3?\3@\3@\3@\5@\u0506",
    "\n@\3@\3@\3@\3@\3A\3A\3A\5A\u050f\nA\3A\3A\3B\3B\3B\5B\u0516\nB\3B\3",
    "B\3C\3C\3C\5C\u051d\nC\3C\3C\3D\3D\3D\5D\u0524\nD\3D\3D\3E\3E\3E\5E",
    "\u052b\nE\3E\3E\3E\5E\u0530\nE\3F\3F\3F\3F\3F\5F\u0537\nF\3G\3G\3G\3",
    "G\3G\5G\u053e\nG\3G\3G\5G\u0542\nG\3G\3G\3G\5G\u0547\nG\5G\u0549\nG",
    "\3H\3H\3H\3H\3H\3H\3H\3H\7H\u0553\nH\fH\16H\u0556\13H\3H\3H\3I\3I\5",
    "I\u055c\nI\3J\3J\3J\3J\7J\u0562\nJ\fJ\16J\u0565\13J\3K\3K\3K\3K\3K\3",
    "K\3K\3K\5K\u056f\nK\3L\3L\3M\3M\5M\u0575\nM\3N\3N\3N\3N\3N\7N\u057c",
    "\nN\fN\16N\u057f\13N\3N\3N\3O\3O\3O\3O\3P\3P\3Q\3Q\5Q\u058b\nQ\3R\3",
    "R\3R\3R\7R\u0591\nR\fR\16R\u0594\13R\3R\3R\3R\5R\u0599\nR\3S\3S\3S\3",
    "S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u05a7\nS\3T\3T\3T\3T\3T\3T\5T\u05af\nT",
    "\3U\3U\3U\3U\3U\3U\3V\3V\3V\5V\u05ba\nV\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\3",
    "Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u05cc\nY\3Z\3Z\3Z\3Z\7Z\u05d2\nZ\fZ\16Z\u05d5",
    "\13Z\3[\3[\3[\3[\7[\u05db\n[\f[\16[\u05de\13[\3\\\3\\\3\\\3]\3]\3]\3",
    "]\3]\3]\3]\3]\3]\5]\u05ec\n]\3^\3^\5^\u05f0\n^\3^\3^\5^\u05f4\n^\3_",
    "\3_\5_\u05f8\n_\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0606\n`\3a\3",
    "a\3a\3a\7a\u060c\na\fa\16a\u060f\13a\3b\3b\3b\3b\3b\3b\5b\u0617\nb\3",
    "c\3c\3c\3c\3d\3d\3d\3e\3e\5e\u0622\ne\3e\3e\3f\3f\3f\5f\u0629\nf\3f",
    "\5f\u062c\nf\3f\3f\3f\3g\3g\3g\3g\5g\u0635\ng\3h\3h\5h\u0639\nh\3i\3",
    "i\3i\3i\3i\5i\u0640\ni\3j\3j\3j\3j\3j\5j\u0647\nj\3k\3k\3k\3k\5k\u064d",
    "\nk\3k\3k\3l\3l\3l\3l\5l\u0655\nl\3l\3l\3m\3m\3m\3m\5m\u065d\nm\3m\3",
    "m\3n\3n\5n\u0663\nn\3n\3n\5n\u0667\nn\3n\3n\5n\u066b\nn\3n\3n\5n\u066f",
    "\nn\3o\3o\3o\3o\7o\u0675\no\fo\16o\u0678\13o\3p\3p\3p\3p\3p\5p\u067f",
    "\np\3p\3p\5p\u0683\np\3q\3q\3q\5q\u0688\nq\3q\3q\3q\5q\u068d\nq\3q\3",
    "q\5q\u0691\nq\3r\3r\3r\3s\3s\3s\3s\7s\u069a\ns\fs\16s\u069d\13s\3t\3",
    "t\3t\3t\3u\3u\3u\3u\3u\7u\u06a8\nu\fu\16u\u06ab\13u\3u\5u\u06ae\nu\3",
    "v\3v\3v\3v\5v\u06b4\nv\3v\3v\3v\3v\3v\5v\u06bb\nv\3v\3v\3v\3v\3v\3v",
    "\3v\5v\u06c4\nv\3v\3v\3v\3v\3v\3v\3v\5v\u06cd\nv\3v\3v\3v\3v\3v\3v\3",
    "v\5v\u06d6\nv\3v\3v\3v\3v\3v\3v\3v\5v\u06df\nv\3v\3v\3v\3v\3v\3v\3v",
    "\5v\u06e8\nv\3v\3v\3v\3v\3v\3v\3v\5v\u06f1\nv\3v\3v\3v\3v\3v\3v\3v\3",
    "v\3v\3v\5v\u06fd\nv\3w\3w\3w\3w\3w\7w\u0704\nw\fw\16w\u0707\13w\3w\3",
    "w\3x\3x\3x\3x\3x\3x\3x\3x\3x\7x\u0714\nx\fx\16x\u0717\13x\3x\3x\3y\3",
    "y\3y\3y\3y\7y\u0720\ny\fy\16y\u0723\13y\3y\3y\3z\3z\3z\3z\3z\3z\5z\u072d",
    "\nz\3z\5z\u0730\nz\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5",
    "{\u0742\n{\3|\3|\3|\3}\3}\3}\3~\3~\3~\3\177\3\177\3\177\3\177\3\u0080",
    "\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0759",
    "\n\u0081\3\u0081\5\u0081\u075c\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082",
    "\3\u0082\5\u0082\u0763\n\u0082\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083",
    "\u0769\n\u0083\7\u0083\u076b\n\u0083\f\u0083\16\u0083\u076e\13\u0083",
    "\3\u0083\5\u0083\u0771\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084",
    "\u0777\n\u0084\7\u0084\u0779\n\u0084\f\u0084\16\u0084\u077c\13\u0084",
    "\3\u0084\5\u0084\u077f\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\7\u0085",
    "\u0785\n\u0085\f\u0085\16\u0085\u0788\13\u0085\3\u0086\3\u0086\5\u0086",
    "\u078c\n\u0086\3\u0086\5\u0086\u078f\n\u0086\3\u0087\3\u0087\5\u0087",
    "\u0793\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0798\n\u0087\3\u0087",
    "\5\u0087\u079b\n\u0087\3\u0087\5\u0087\u079e\n\u0087\3\u0087\5\u0087",
    "\u07a1\n\u0087\3\u0088\3\u0088\3\u0088\5\u0088\u07a6\n\u0088\3\u0089",
    "\3\u0089\3\u0089\3\u0089\5\u0089\u07ac\n\u0089\3\u008a\3\u008a\3\u008a",
    "\3\u008b\3\u008b\3\u008b\5\u008b\u07b4\n\u008b\3\u008b\5\u008b\u07b7",
    "\n\u008b\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d",
    "\7\u008d\u07c1\n\u008d\f\u008d\16\u008d\u07c4\13\u008d\3\u008d\5\u008d",
    "\u07c7\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u07ce",
    "\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u07d4\n\u008e\3\u008e",
    "\5\u008e\u07d7\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u07dd",
    "\n\u008f\f\u008f\16\u008f\u07e0\13\u008f\3\u0090\3\u0090\3\u0090\3\u0090",
    "\3\u0090\3\u0090\5\u0090\u07e8\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091",
    "\5\u0091\u07ee\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u07f4",
    "\n\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\5\u0093\u07fb\n\u0093",
    "\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u0802\n\u0094\3\u0094",
    "\3\u0094\5\u0094\u0806\n\u0094\3\u0094\3\u0094\5\u0094\u080a\n\u0094",
    "\3\u0094\5\u0094\u080d\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095",
    "\3\u0095\3\u0095\3\u0095\5\u0095\u0817\n\u0095\3\u0096\3\u0096\3\u0096",
    "\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0820\n\u0096\3\u0096\5\u0096",
    "\u0823\n\u0096\3\u0097\3\u0097\3\u0097\5\u0097\u0828\n\u0097\3\u0097",
    "\3\u0097\3\u0097\3\u0097\5\u0097\u082e\n\u0097\7\u0097\u0830\n\u0097",
    "\f\u0097\16\u0097\u0833\13\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098",
    "\3\u0098\3\u0098\5\u0098\u083c\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099",
    "\3\u0099\5\u0099\u0843\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009b",
    "\3\u009b\3\u009b\3\u009b\5\u009b\u084d\n\u009b\3\u009c\3\u009c\3\u009c",
    "\3\u009c\3\u009c\7\u009c\u0854\n\u009c\f\u009c\16\u009c\u0857\13\u009c",
    "\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u0860",
    "\n\u009d\f\u009d\16\u009d\u0863\13\u009d\3\u009d\3\u009d\3\u009e\3\u009e",
    "\3\u009e\3\u009e\3\u009e\7\u009e\u086c\n\u009e\f\u009e\16\u009e\u086f",
    "\13\u009e\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\7",
    "\u009f\u0878\n\u009f\f\u009f\16\u009f\u087b\13\u009f\3\u009f\3\u009f",
    "\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a4",
    "\3\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8",
    "\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa",
    "\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa",
    "\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u08a7\n\u00aa\3\u00ab\3\u00ab",
    "\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab",
    "\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab",
    "\5\u00ab\u08bd\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac",
    "\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac",
    "\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u08d4\n\u00ac",
    "\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad",
    "\3\u00ad\5\u00ad\u08e0\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae",
    "\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u08ec\n\u00ae\3\u00af",
    "\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af",
    "\5\u00af\u08f8\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0",
    "\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0904\n\u00b0\3\u00b0\3\u00b0",
    "\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u090e\n\u00b0",
    "\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0",
    "\3\u00b0\5\u00b0\u091a\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0",
    "\u0920\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1",
    "\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u092c\n\u00b1\3\u00b1\3\u00b1\3\u00b1",
    "\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0936\n\u00b1\3\u00b1",
    "\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1",
    "\5\u00b1\u0942\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0948",
    "\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2",
    "\3\u00b2\3\u00b2\5\u00b2\u0954\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3",
    "\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0960\n\u00b3",
    "\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0965\n\u00b4\3\u00b5\3\u00b5\3\u00b5",
    "\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0971",
    "\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5",
    "\5\u00b5\u097b\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5",
    "\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0987\n\u00b5\3\u00b5\3\u00b5",
    "\3\u00b5\3\u00b5\5\u00b5\u098d\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6",
    "\3\u00b6\5\u00b6\u0994\n\u00b6\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8",
    "\3\u00b8\3\u00b8\5\u00b8\u099d\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9",
    "\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9",
    "\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9",
    "\5\u00b9\u09b5\n\u00b9\3\u00ba\3\u00ba\5\u00ba\u09b9\n\u00ba\3\u00bb",
    "\3\u00bb\3\u00bb\5\u00bb\u09be\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb",
    "\u09c3\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u09c8\n\u00bb\3\u00bb",
    "\3\u00bb\3\u00bb\5\u00bb\u09cd\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb",
    "\u09d2\n\u00bb\5\u00bb\u09d4\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc",
    "\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc",
    "\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc",
    "\u09eb\n\u00bc\3\u00bd\3\u00bd\5\u00bd\u09ef\n\u00bd\3\u00be\3\u00be",
    "\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2",
    "\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2",
    "\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2",
    "\5\u00c2\u0a0e\n\u00c2\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c5\3\u00c5",
    "\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9",
    "\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00ce",
    "\3\u00ce\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d2",
    "\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d6",
    "\3\u00d6\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00da\3\u00da",
    "\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00df",
    "\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e3",
    "\3\u00e3\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e7\3\u00e7",
    "\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00ec",
    "\3\u00ec\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00f0\3\u00f0",
    "\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f5",
    "\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f9",
    "\3\u00f9\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd",
    "\3\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0101",
    "\3\u0101\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0104\3\u0104\3\u0105",
    "\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109",
    "\3\u010a\3\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d",
    "\3\u010e\3\u010e\3\u010f\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0112",
    "\3\u0112\3\u0113\3\u0113\3\u0114\3\u0114\3\u0115\3\u0115\3\u0116\3\u0116",
    "\3\u0117\3\u0117\3\u0118\3\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011b",
    "\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d\3\u011e\3\u011e\3\u011f\3\u011f",
    "\3\u0120\3\u0120\3\u0121\3\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0124",
    "\3\u0124\3\u0125\3\u0125\3\u0126\3\u0126\3\u0127\3\u0127\3\u0128\3\u0128",
    "\3\u0129\3\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012c\3\u012c\3\u012d",
    "\3\u012d\3\u012e\3\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0131\3\u0131",
    "\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0135\3\u0135\3\u0136",
    "\3\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0139\3\u0139\3\u013a\3\u013a",
    "\3\u013b\3\u013b\3\u013c\3\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f",
    "\3\u013f\3\u0140\3\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0143\3\u0143",
    "\3\u0144\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146\3\u0147\3\u0147\3\u0148",
    "\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\7\u014a",
    "\u0b2c\n\u014a\f\u014a\16\u014a\u0b2f\13\u014a\3\u014a\3\u014a\3\u014b",
    "\3\u014b\3\u014c\3\u014c\3\u014d\3\u014d\3\u014e\3\u014e\3\u014f\3\u014f",
    "\3\u0150\3\u0150\3\u0151\3\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154",
    "\3\u0154\3\u0155\3\u0155\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3\u0158",
    "\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015c\3\u015c\3\u015d",
    "\3\u015d\3\u015e\3\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\2\2",
    "\u0161\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668",
    ":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
    "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
    "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
    "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
    "\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa",
    "\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2",
    "\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da",
    "\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2",
    "\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a",
    "\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222",
    "\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a",
    "\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252",
    "\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a",
    "\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282",
    "\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a",
    "\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2",
    "\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\2\6\3\2\u00a8\u00a9\4\2<<}}\17",
    "\2\67\67GGLLOP``ccggll\177\177\u0081\u0081\u0098\u0099\u00a4\u00a5\u00ac",
    "\u00ac\17\2\67\67GHLLOP``ccggll\177\177\u0081\u0081\u0098\u0099\u00a4",
    "\u00a5\u00ac\u00ac\u0bc2\2\u02c1\3\2\2\2\4\u02d1\3\2\2\2\6\u02de\3\2",
    "\2\2\b\u02e0\3\2\2\2\n\u0308\3\2\2\2\f\u030a\3\2\2\2\16\u0311\3\2\2",
    "\2\20\u0313\3\2\2\2\22\u031c\3\2\2\2\24\u0328\3\2\2\2\26\u033b\3\2\2",
    "\2\30\u0357\3\2\2\2\32\u0359\3\2\2\2\34\u0366\3\2\2\2\36\u036f\3\2\2",
    "\2 \u0379\3\2\2\2\"\u0384\3\2\2\2$\u038d\3\2\2\2&\u039f\3\2\2\2(\u03a6",
    "\3\2\2\2*\u03af\3\2\2\2,\u03be\3\2\2\2.\u03c0\3\2\2\2\60\u03d1\3\2\2",
    "\2\62\u03e7\3\2\2\2\64\u03e9\3\2\2\2\66\u03f6\3\2\2\28\u03fc\3\2\2\2",
    ":\u0415\3\2\2\2<\u0417\3\2\2\2>\u0423\3\2\2\2@\u0427\3\2\2\2B\u0434",
    "\3\2\2\2D\u0440\3\2\2\2F\u0443\3\2\2\2H\u044b\3\2\2\2J\u0450\3\2\2\2",
    "L\u0452\3\2\2\2N\u0458\3\2\2\2P\u0460\3\2\2\2R\u0463\3\2\2\2T\u046c",
    "\3\2\2\2V\u0470\3\2\2\2X\u047c\3\2\2\2Z\u0481\3\2\2\2\\\u048d\3\2\2",
    "\2^\u048f\3\2\2\2`\u0492\3\2\2\2b\u0497\3\2\2\2d\u049b\3\2\2\2f\u049e",
    "\3\2\2\2h\u04a7\3\2\2\2j\u04aa\3\2\2\2l\u04b5\3\2\2\2n\u04bb\3\2\2\2",
    "p\u04d5\3\2\2\2r\u04d7\3\2\2\2t\u04df\3\2\2\2v\u04e6\3\2\2\2x\u04ed",
    "\3\2\2\2z\u04f4\3\2\2\2|\u04fb\3\2\2\2~\u0502\3\2\2\2\u0080\u050b\3",
    "\2\2\2\u0082\u0512\3\2\2\2\u0084\u0519\3\2\2\2\u0086\u0520\3\2\2\2\u0088",
    "\u0527\3\2\2\2\u008a\u0536\3\2\2\2\u008c\u0548\3\2\2\2\u008e\u054a\3",
    "\2\2\2\u0090\u0559\3\2\2\2\u0092\u055d\3\2\2\2\u0094\u056e\3\2\2\2\u0096",
    "\u0570\3\2\2\2\u0098\u0574\3\2\2\2\u009a\u0576\3\2\2\2\u009c\u0582\3",
    "\2\2\2\u009e\u0586\3\2\2\2\u00a0\u058a\3\2\2\2\u00a2\u058c\3\2\2\2\u00a4",
    "\u05a6\3\2\2\2\u00a6\u05ae\3\2\2\2\u00a8\u05b0\3\2\2\2\u00aa\u05b9\3",
    "\2\2\2\u00ac\u05bb\3\2\2\2\u00ae\u05bd\3\2\2\2\u00b0\u05cb\3\2\2\2\u00b2",
    "\u05cd\3\2\2\2\u00b4\u05d6\3\2\2\2\u00b6\u05df\3\2\2\2\u00b8\u05eb\3",
    "\2\2\2\u00ba\u05ed\3\2\2\2\u00bc\u05f7\3\2\2\2\u00be\u05f9\3\2\2\2\u00c0",
    "\u0607\3\2\2\2\u00c2\u0616\3\2\2\2\u00c4\u0618\3\2\2\2\u00c6\u061c\3",
    "\2\2\2\u00c8\u061f\3\2\2\2\u00ca\u0625\3\2\2\2\u00cc\u0634\3\2\2\2\u00ce",
    "\u0638\3\2\2\2\u00d0\u063f\3\2\2\2\u00d2\u0646\3\2\2\2\u00d4\u0648\3",
    "\2\2\2\u00d6\u0650\3\2\2\2\u00d8\u0658\3\2\2\2\u00da\u0660\3\2\2\2\u00dc",
    "\u0670\3\2\2\2\u00de\u0682\3\2\2\2\u00e0\u0684\3\2\2\2\u00e2\u0692\3",
    "\2\2\2\u00e4\u0695\3\2\2\2\u00e6\u069e\3\2\2\2\u00e8\u06ad\3\2\2\2\u00ea",
    "\u06fc\3\2\2\2\u00ec\u06fe\3\2\2\2\u00ee\u070a\3\2\2\2\u00f0\u071a\3",
    "\2\2\2\u00f2\u0726\3\2\2\2\u00f4\u0741\3\2\2\2\u00f6\u0743\3\2\2\2\u00f8",
    "\u0746\3\2\2\2\u00fa\u0749\3\2\2\2\u00fc\u074c\3\2\2\2\u00fe\u0750\3",
    "\2\2\2\u0100\u075b\3\2\2\2\u0102\u0762\3\2\2\2\u0104\u0770\3\2\2\2\u0106",
    "\u077e\3\2\2\2\u0108\u0780\3\2\2\2\u010a\u078e\3\2\2\2\u010c\u0790\3",
    "\2\2\2\u010e\u07a2\3\2\2\2\u0110\u07ab\3\2\2\2\u0112\u07ad\3\2\2\2\u0114",
    "\u07b6\3\2\2\2\u0116\u07b8\3\2\2\2\u0118\u07c6\3\2\2\2\u011a\u07d6\3",
    "\2\2\2\u011c\u07d8\3\2\2\2\u011e\u07e7\3\2\2\2\u0120\u07e9\3\2\2\2\u0122",
    "\u07ef\3\2\2\2\u0124\u07f7\3\2\2\2\u0126\u080c\3\2\2\2\u0128\u0816\3",
    "\2\2\2\u012a\u0822\3\2\2\2\u012c\u0827\3\2\2\2\u012e\u083b\3\2\2\2\u0130",
    "\u0842\3\2\2\2\u0132\u0844\3\2\2\2\u0134\u084c\3\2\2\2\u0136\u084e\3",
    "\2\2\2\u0138\u085a\3\2\2\2\u013a\u0866\3\2\2\2\u013c\u0872\3\2\2\2\u013e",
    "\u087e\3\2\2\2\u0140\u0880\3\2\2\2\u0142\u0882\3\2\2\2\u0144\u0884\3",
    "\2\2\2\u0146\u0886\3\2\2\2\u0148\u0888\3\2\2\2\u014a\u088a\3\2\2\2\u014c",
    "\u088c\3\2\2\2\u014e\u088e\3\2\2\2\u0150\u0890\3\2\2\2\u0152\u08a6\3",
    "\2\2\2\u0154\u08bc\3\2\2\2\u0156\u08d3\3\2\2\2\u0158\u08df\3\2\2\2\u015a",
    "\u08eb\3\2\2\2\u015c\u08f7\3\2\2\2\u015e\u091f\3\2\2\2\u0160\u0947\3",
    "\2\2\2\u0162\u0953\3\2\2\2\u0164\u095f\3\2\2\2\u0166\u0964\3\2\2\2\u0168",
    "\u098c\3\2\2\2\u016a\u0993\3\2\2\2\u016c\u0995\3\2\2\2\u016e\u099c\3",
    "\2\2\2\u0170\u09b4\3\2\2\2\u0172\u09b8\3\2\2\2\u0174\u09d3\3\2\2\2\u0176",
    "\u09ea\3\2\2\2\u0178\u09ee\3\2\2\2\u017a\u09f0\3\2\2\2\u017c\u09f2\3",
    "\2\2\2\u017e\u09f4\3\2\2\2\u0180\u09f6\3\2\2\2\u0182\u0a0d\3\2\2\2\u0184",
    "\u0a0f\3\2\2\2\u0186\u0a11\3\2\2\2\u0188\u0a13\3\2\2\2\u018a\u0a15\3",
    "\2\2\2\u018c\u0a17\3\2\2\2\u018e\u0a19\3\2\2\2\u0190\u0a1c\3\2\2\2\u0192",
    "\u0a1e\3\2\2\2\u0194\u0a20\3\2\2\2\u0196\u0a22\3\2\2\2\u0198\u0a24\3",
    "\2\2\2\u019a\u0a26\3\2\2\2\u019c\u0a28\3\2\2\2\u019e\u0a2a\3\2\2\2\u01a0",
    "\u0a2d\3\2\2\2\u01a2\u0a2f\3\2\2\2\u01a4\u0a32\3\2\2\2\u01a6\u0a34\3",
    "\2\2\2\u01a8\u0a36\3\2\2\2\u01aa\u0a38\3\2\2\2\u01ac\u0a3a\3\2\2\2\u01ae",
    "\u0a3c\3\2\2\2\u01b0\u0a3e\3\2\2\2\u01b2\u0a40\3\2\2\2\u01b4\u0a42\3",
    "\2\2\2\u01b6\u0a44\3\2\2\2\u01b8\u0a46\3\2\2\2\u01ba\u0a48\3\2\2\2\u01bc",
    "\u0a4a\3\2\2\2\u01be\u0a4c\3\2\2\2\u01c0\u0a4f\3\2\2\2\u01c2\u0a51\3",
    "\2\2\2\u01c4\u0a53\3\2\2\2\u01c6\u0a55\3\2\2\2\u01c8\u0a57\3\2\2\2\u01ca",
    "\u0a59\3\2\2\2\u01cc\u0a5b\3\2\2\2\u01ce\u0a5d\3\2\2\2\u01d0\u0a5f\3",
    "\2\2\2\u01d2\u0a61\3\2\2\2\u01d4\u0a63\3\2\2\2\u01d6\u0a65\3\2\2\2\u01d8",
    "\u0a67\3\2\2\2\u01da\u0a69\3\2\2\2\u01dc\u0a6b\3\2\2\2\u01de\u0a6d\3",
    "\2\2\2\u01e0\u0a6f\3\2\2\2\u01e2\u0a71\3\2\2\2\u01e4\u0a73\3\2\2\2\u01e6",
    "\u0a75\3\2\2\2\u01e8\u0a77\3\2\2\2\u01ea\u0a79\3\2\2\2\u01ec\u0a7c\3",
    "\2\2\2\u01ee\u0a7e\3\2\2\2\u01f0\u0a80\3\2\2\2\u01f2\u0a82\3\2\2\2\u01f4",
    "\u0a84\3\2\2\2\u01f6\u0a86\3\2\2\2\u01f8\u0a88\3\2\2\2\u01fa\u0a8a\3",
    "\2\2\2\u01fc\u0a8d\3\2\2\2\u01fe\u0a90\3\2\2\2\u0200\u0a92\3\2\2\2\u0202",
    "\u0a94\3\2\2\2\u0204\u0a97\3\2\2\2\u0206\u0a99\3\2\2\2\u0208\u0a9b\3",
    "\2\2\2\u020a\u0a9d\3\2\2\2\u020c\u0a9f\3\2\2\2\u020e\u0aa1\3\2\2\2\u0210",
    "\u0aa3\3\2\2\2\u0212\u0aa5\3\2\2\2\u0214\u0aa7\3\2\2\2\u0216\u0aa9\3",
    "\2\2\2\u0218\u0aab\3\2\2\2\u021a\u0aae\3\2\2\2\u021c\u0ab0\3\2\2\2\u021e",
    "\u0ab2\3\2\2\2\u0220\u0ab4\3\2\2\2\u0222\u0ab6\3\2\2\2\u0224\u0ab8\3",
    "\2\2\2\u0226\u0aba\3\2\2\2\u0228\u0abc\3\2\2\2\u022a\u0abe\3\2\2\2\u022c",
    "\u0ac0\3\2\2\2\u022e\u0ac2\3\2\2\2\u0230\u0ac4\3\2\2\2\u0232\u0ac6\3",
    "\2\2\2\u0234\u0ac8\3\2\2\2\u0236\u0aca\3\2\2\2\u0238\u0acc\3\2\2\2\u023a",
    "\u0ace\3\2\2\2\u023c\u0ad0\3\2\2\2\u023e\u0ad2\3\2\2\2\u0240\u0ad4\3",
    "\2\2\2\u0242\u0ad6\3\2\2\2\u0244\u0ad8\3\2\2\2\u0246\u0ada\3\2\2\2\u0248",
    "\u0adc\3\2\2\2\u024a\u0ade\3\2\2\2\u024c\u0ae0\3\2\2\2\u024e\u0ae2\3",
    "\2\2\2\u0250\u0ae4\3\2\2\2\u0252\u0ae6\3\2\2\2\u0254\u0ae8\3\2\2\2\u0256",
    "\u0aea\3\2\2\2\u0258\u0aec\3\2\2\2\u025a\u0aee\3\2\2\2\u025c\u0af0\3",
    "\2\2\2\u025e\u0af2\3\2\2\2\u0260\u0af4\3\2\2\2\u0262\u0af6\3\2\2\2\u0264",
    "\u0af8\3\2\2\2\u0266\u0afa\3\2\2\2\u0268\u0afc\3\2\2\2\u026a\u0afe\3",
    "\2\2\2\u026c\u0b00\3\2\2\2\u026e\u0b02\3\2\2\2\u0270\u0b04\3\2\2\2\u0272",
    "\u0b06\3\2\2\2\u0274\u0b08\3\2\2\2\u0276\u0b0a\3\2\2\2\u0278\u0b0c\3",
    "\2\2\2\u027a\u0b0e\3\2\2\2\u027c\u0b10\3\2\2\2\u027e\u0b12\3\2\2\2\u0280",
    "\u0b14\3\2\2\2\u0282\u0b16\3\2\2\2\u0284\u0b18\3\2\2\2\u0286\u0b1a\3",
    "\2\2\2\u0288\u0b1c\3\2\2\2\u028a\u0b1e\3\2\2\2\u028c\u0b20\3\2\2\2\u028e",
    "\u0b22\3\2\2\2\u0290\u0b24\3\2\2\2\u0292\u0b26\3\2\2\2\u0294\u0b32\3",
    "\2\2\2\u0296\u0b34\3\2\2\2\u0298\u0b36\3\2\2\2\u029a\u0b38\3\2\2\2\u029c",
    "\u0b3a\3\2\2\2\u029e\u0b3c\3\2\2\2\u02a0\u0b3e\3\2\2\2\u02a2\u0b40\3",
    "\2\2\2\u02a4\u0b42\3\2\2\2\u02a6\u0b44\3\2\2\2\u02a8\u0b46\3\2\2\2\u02aa",
    "\u0b48\3\2\2\2\u02ac\u0b4a\3\2\2\2\u02ae\u0b4c\3\2\2\2\u02b0\u0b4e\3",
    "\2\2\2\u02b2\u0b50\3\2\2\2\u02b4\u0b52\3\2\2\2\u02b6\u0b54\3\2\2\2\u02b8",
    "\u0b56\3\2\2\2\u02ba\u0b58\3\2\2\2\u02bc\u0b5a\3\2\2\2\u02be\u0b5c\3",
    "\2\2\2\u02c0\u02c2\5\4\3\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2",
    "\u02c4\3\2\2\2\u02c3\u02c5\7\27\2\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5",
    "\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\5\u0298\u014d\2\u02c7\3\3\2",
    "\2\2\u02c8\u02ca\5\n\6\2\u02c9\u02cb\7\27\2\2\u02ca\u02c9\3\2\2\2\u02ca",
    "\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\5\6\4\2\u02cd\u02d0\3",
    "\2\2\2\u02ce\u02d0\5\b\5\2\u02cf\u02c8\3\2\2\2\u02cf\u02ce\3\2\2\2\u02d0",
    "\u02d3\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02dc\3",
    "\2\2\2\u02d3\u02d1\3\2\2\2\u02d4\u02d9\5\n\6\2\u02d5\u02d7\7\27\2\2",
    "\u02d6\u02d5\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02da",
    "\5\6\4\2\u02d9\u02d6\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02dd\3\2\2\2",
    "\u02db\u02dd\5\b\5\2\u02dc\u02d4\3\2\2\2\u02dc\u02db\3\2\2\2\u02dd\5",
    "\3\2\2\2\u02de\u02df\7\n\2\2\u02df\7\3\2\2\2\u02e0\u02e1\5\6\4\2\u02e1",
    "\t\3\2\2\2\u02e2\u0309\5\u00b8]\2\u02e3\u0309\5\u00be`\2\u02e4\u0309",
    "\5r:\2\u02e5\u0309\5l\67\2\u02e6\u0309\5Z.\2\u02e7\u0309\5L\'\2\u02e8",
    "\u0309\5F$\2\u02e9\u0309\5\u00b6\\\2\u02ea\u0309\58\35\2\u02eb\u0309",
    "\5\60\31\2\u02ec\u0309\5\u00caf\2\u02ed\u0309\5.\30\2\u02ee\u0309\5",
    "$\23\2\u02ef\u0309\5\34\17\2\u02f0\u0309\5\u0088E\2\u02f1\u0309\5\"",
    "\22\2\u02f2\u0309\5\36\20\2\u02f3\u0309\5\32\16\2\u02f4\u0309\5\u00da",
    "n\2\u02f5\u0309\5z>\2\u02f6\u0309\5|?\2\u02f7\u0309\5\u0086D\2\u02f8",
    "\u0309\5\u0084C\2\u02f9\u0309\5x=\2\u02fa\u0309\5\u0080A\2\u02fb\u0309",
    "\5\u0082B\2\u02fc\u0309\5~@\2\u02fd\u0309\5v<\2\u02fe\u0309\5t;\2\u02ff",
    "\u0309\5\24\13\2\u0300\u0309\5\u00f2z\2\u0301\u0309\5\22\n\2\u0302\u0309",
    "\5\20\t\2\u0303\u0309\5\f\7\2\u0304\u0309\5\u010c\u0087\2\u0305\u0309",
    "\5\u00c8e\2\u0306\u0309\5\u00e0q\2\u0307\u0309\5\u00c6d\2\u0308\u02e2",
    "\3\2\2\2\u0308\u02e3\3\2\2\2\u0308\u02e4\3\2\2\2\u0308\u02e5\3\2\2\2",
    "\u0308\u02e6\3\2\2\2\u0308\u02e7\3\2\2\2\u0308\u02e8\3\2\2\2\u0308\u02e9",
    "\3\2\2\2\u0308\u02ea\3\2\2\2\u0308\u02eb\3\2\2\2\u0308\u02ec\3\2\2\2",
    "\u0308\u02ed\3\2\2\2\u0308\u02ee\3\2\2\2\u0308\u02ef\3\2\2\2\u0308\u02f0",
    "\3\2\2\2\u0308\u02f1\3\2\2\2\u0308\u02f2\3\2\2\2\u0308\u02f3\3\2\2\2",
    "\u0308\u02f4\3\2\2\2\u0308\u02f5\3\2\2\2\u0308\u02f6\3\2\2\2\u0308\u02f7",
    "\3\2\2\2\u0308\u02f8\3\2\2\2\u0308\u02f9\3\2\2\2\u0308\u02fa\3\2\2\2",
    "\u0308\u02fb\3\2\2\2\u0308\u02fc\3\2\2\2\u0308\u02fd\3\2\2\2\u0308\u02fe",
    "\3\2\2\2\u0308\u02ff\3\2\2\2\u0308\u0300\3\2\2\2\u0308\u0301\3\2\2\2",
    "\u0308\u0302\3\2\2\2\u0308\u0303\3\2\2\2\u0308\u0304\3\2\2\2\u0308\u0305",
    "\3\2\2\2\u0308\u0306\3\2\2\2\u0308\u0307\3\2\2\2\u0309\13\3\2\2\2\u030a",
    "\u030b\5\u025c\u012f\2\u030b\u030c\5\26\f\2\u030c\u030d\5\u0210\u0109",
    "\2\u030d\u030e\5\30\r\2\u030e\u030f\5\u01d8\u00ed\2\u030f\u0310\5\u017a",
    "\u00be\2\u0310\r\3\2\2\2\u0311\u0312\5\u01fc\u00ff\2\u0312\17\3\2\2",
    "\2\u0313\u0317\5\u01fa\u00fe\2\u0314\u0315\5\u020e\u0108\2\u0315\u0316",
    "\5\u017a\u00be\2\u0316\u0318\3\2\2\2\u0317\u0314\3\2\2\2\u0317\u0318",
    "\3\2\2\2\u0318\u031a\3\2\2\2\u0319\u031b\5\u0208\u0105\2\u031a\u0319",
    "\3\2\2\2\u031a\u031b\3\2\2\2\u031b\21\3\2\2\2\u031c\u031d\5\u01f8\u00fd",
    "\2\u031d\u0321\5\26\f\2\u031e\u031f\5\u0210\u0109\2\u031f\u0320\5\30",
    "\r\2\u0320\u0322\3\2\2\2\u0321\u031e\3\2\2\2\u0321\u0322\3\2\2\2\u0322",
    "\u0326\3\2\2\2\u0323\u0324\5\u020e\u0108\2\u0324\u0325\5\u017a\u00be",
    "\2\u0325\u0327\3\2\2\2\u0326\u0323\3\2\2\2\u0326\u0327\3\2\2\2\u0327",
    "\23\3\2\2\2\u0328\u0329\5\u01de\u00f0\2\u0329\u032a\5\26\f\2\u032a\u032b",
    "\5\u0210\u0109\2\u032b\u032c\5\30\r\2\u032c\u032d\5\u023e\u0120\2\u032d",
    "\u032e\5\u017a\u00be\2\u032e\25\3\2\2\2\u032f\u0332\5\u0196\u00cc\2",
    "\u0330\u0332\5\u019e\u00d0\2\u0331\u032f\3\2\2\2\u0331\u0330\3\2\2\2",
    "\u0332\u033c\3\2\2\2\u0333\u033c\5\u01a4\u00d3\2\u0334\u033c\5\u01ae",
    "\u00d8\2\u0335\u033c\5\u01c6\u00e4\2\u0336\u033c\5\u01d0\u00e9\2\u0337",
    "\u033c\5\u01c0\u00e1\2\u0338\u033c\5\u01ca\u00e6\2\u0339\u033c\5\u0204",
    "\u0103\2\u033a\u033c\5\u022c\u0117\2\u033b\u0331\3\2\2\2\u033b\u0333",
    "\3\2\2\2\u033b\u0334\3\2\2\2\u033b\u0335\3\2\2\2\u033b\u0336\3\2\2\2",
    "\u033b\u0337\3\2\2\2\u033b\u0338\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033a",
    "\3\2\2\2\u033c\27\3\2\2\2\u033d\u0358\5\u0198\u00cd\2\u033e\u033f\5",
    "\u0198\u00cd\2\u033f\u0340\5\u01e2\u00f2\2\u0340\u0341\5\u01f2\u00fa",
    "\2\u0341\u0342\5\u014a\u00a6\2\u0342\u0358\3\2\2\2\u0343\u0347\5\u01dc",
    "\u00ef\2\u0344\u0345\5\u014a\u00a6\2\u0345\u0346\7\22\2\2\u0346\u0348",
    "\3\2\2\2\u0347\u0344\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2",
    "\u0349\u034a\5\u0184\u00c3\2\u034a\u0358\3\2\2\2\u034b\u0358\5\u019a",
    "\u00ce\2\u034c\u034d\5\u01f2\u00fa\2\u034d\u034e\5\u014a\u00a6\2\u034e",
    "\u0358\3\2\2\2\u034f\u0351\5\u023a\u011e\2\u0350\u034f\3\2\2\2\u0350",
    "\u0351\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0358\5\u015e\u00b0\2\u0353",
    "\u0358\5\u019c\u00cf\2\u0354\u0355\5\u022a\u0116\2\u0355\u0356\5\u017a",
    "\u00be\2\u0356\u0358\3\2\2\2\u0357\u033d\3\2\2\2\u0357\u033e\3\2\2\2",
    "\u0357\u0343\3\2\2\2\u0357\u034b\3\2\2\2\u0357\u034c\3\2\2\2\u0357\u0350",
    "\3\2\2\2\u0357\u0353\3\2\2\2\u0357\u0354\3\2\2\2\u0358\31\3\2\2\2\u0359",
    "\u035a\5\u01c0\u00e1\2\u035a\u035c\5\u0250\u0129\2\u035b\u035d\5\u00fc",
    "\177\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\3\2\2\2\u035e",
    "\u035f\5\u0188\u00c5\2\u035f\u0360\5\u025a\u012e\2\u0360\u0361\5\u021c",
    "\u010f\2\u0361\u0364\5\u0144\u00a3\2\u0362\u0365\5\u0238\u011d\2\u0363",
    "\u0365\5\u0206\u0104\2\u0364\u0362\3\2\2\2\u0364\u0363\3\2\2\2\u0364",
    "\u0365\3\2\2\2\u0365\33\3\2\2\2\u0366\u0367\5\u01c0\u00e1\2\u0367\u0369",
    "\5\u022a\u0116\2\u0368\u036a\5\u00fc\177\2\u0369\u0368\3\2\2\2\u0369",
    "\u036a\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\5\u017a\u00be\2\u036c",
    "\u036e\5n8\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e\35\3\2\2",
    "\2\u036f\u0370\5\u01c0\u00e1\2\u0370\u0372\5\u0248\u0125\2\u0371\u0373",
    "\5\u00fc\177\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0374\3",
    "\2\2\2\u0374\u0375\5\u0168\u00b5\2\u0375\u0376\5\u029a\u014e\2\u0376",
    "\u0377\5 \21\2\u0377\u0378\5\u029c\u014f\2\u0378\37\3\2\2\2\u0379\u037a",
    "\5\u016a\u00b6\2\u037a\u0381\5\u0172\u00ba\2\u037b\u037c\5\u02aa\u0156",
    "\2\u037c\u037d\5\u016a\u00b6\2\u037d\u037e\5\u0172\u00ba\2\u037e\u0380",
    "\3\2\2\2\u037f\u037b\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3\2\2\2",
    "\u0381\u0382\3\2\2\2\u0382!\3\2\2\2\u0383\u0381\3\2\2\2\u0384\u0385",
    "\5\u01c0\u00e1\2\u0385\u0387\5\u0242\u0122\2\u0386\u0388\5\u00fc\177",
    "\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389",
    "\u038a\5\u0168\u00b5\2\u038a\u038b\5\u0254\u012b\2\u038b\u038c\5\u017e",
    "\u00c0\2\u038c#\3\2\2\2\u038d\u038e\5\u01c0\u00e1\2\u038e\u0390\5\u0202",
    "\u0102\2\u038f\u0391\5\u00fc\177\2\u0390\u038f\3\2\2\2\u0390\u0391\3",
    "\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\5\u0168\u00b5\2\u0393\u0394\5",
    "\u01aa\u00d6\2\u0394\u0395\5\u022c\u0117\2\u0395\u0396\5\u0106\u0084",
    "\2\u0396\u0397\5\u01d8\u00ed\2\u0397\u0398\5\u0160\u00b1\2\u0398\u0399",
    "\5&\24\2\u0399\u039d\5\u00a8U\2\u039a\u039b\5\u025a\u012e\2\u039b\u039c",
    "\5,\27\2\u039c\u039e\3\2\2\2\u039d\u039a\3\2\2\2\u039d\u039e\3\2\2\2",
    "\u039e%\3\2\2\2\u039f\u03a0\5\u0258\u012d\2\u03a0\u03a4\5(\25\2\u03a1",
    "\u03a2\5\u01a6\u00d4\2\u03a2\u03a3\5\u011c\u008f\2\u03a3\u03a5\3\2\2",
    "\2\u03a4\u03a1\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\'\3\2\2\2\u03a6\u03ac",
    "\5*\26\2\u03a7\u03a8\5\u01a6\u00d4\2\u03a8\u03a9\5*\26\2\u03a9\u03ab",
    "\3\2\2\2\u03aa\u03a7\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2",
    "\u03ac\u03ad\3\2\2\2\u03ad)\3\2\2\2\u03ae\u03ac\3\2\2\2\u03af\u03b0",
    "\5\u016a\u00b6\2\u03b0\u03b1\5\u01ec\u00f7\2\u03b1\u03b2\5\u020a\u0106",
    "\2\u03b2\u03b3\5\u020c\u0107\2\u03b3+\3\2\2\2\u03b4\u03bf\5\u0092J\2",
    "\u03b5\u03b6\5\u0092J\2\u03b6\u03b7\5\u01a6\u00d4\2\u03b7\u03b8\5\u008e",
    "H\2\u03b8\u03bf\3\2\2\2\u03b9\u03bf\5\u008eH\2\u03ba\u03bb\5\u008eH",
    "\2\u03bb\u03bc\5\u01a6\u00d4\2\u03bc\u03bd\5\u0092J\2\u03bd\u03bf\3",
    "\2\2\2\u03be\u03b4\3\2\2\2\u03be\u03b5\3\2\2\2\u03be\u03b9\3\2\2\2\u03be",
    "\u03ba\3\2\2\2\u03bf-\3\2\2\2\u03c0\u03c1\5\u01c0\u00e1\2\u03c1\u03c3",
    "\5\u01f2\u00fa\2\u03c2\u03c4\5\u00fc\177\2\u03c3\u03c2\3\2\2\2\u03c3",
    "\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6\5\u0156\u00ac\2\u03c6",
    "\u03c7\5\u025a\u012e\2\u03c7\u03c8\5\u0226\u0114\2\u03c8\u03c9\7\u00ae",
    "\2\2\u03c9\u03ca\5\u029e\u0150\2\u03ca\u03cb\5\u00c0a\2\u03cb\u03cf",
    "\5\u02a0\u0151\2\u03cc\u03cd\5\u01a6\u00d4\2\u03cd\u03ce\5\u00c4c\2",
    "\u03ce\u03d0\3\2\2\2\u03cf\u03cc\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0/",
    "\3\2\2\2\u03d1\u03d3\5\u01c0\u00e1\2\u03d2\u03d4\5D#\2\u03d3\u03d2\3",
    "\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d7\5\u01dc\u00ef",
    "\2\u03d6\u03d8\5\u00fc\177\2\u03d7\u03d6\3\2\2\2\u03d7\u03d8\3\2\2\2",
    "\u03d8\u03d9\3\2\2\2\u03d9\u03da\5\u0168\u00b5\2\u03da\u03dc\5\u029a",
    "\u014e\2\u03db\u03dd\5\64\33\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2",
    "\2\u03dd\u03de\3\2\2\2\u03de\u03df\5\u029c\u014f\2\u03df\u03e0\5\66",
    "\34\2\u03e0\u03e1\5\u0228\u0115\2\u03e1\u03e2\5\u0172\u00ba\2\u03e2",
    "\u03e3\5\u01f4\u00fb\2\u03e3\u03e4\5\u0186\u00c4\2\u03e4\u03e5\5\u01aa",
    "\u00d6\2\u03e5\u03e6\5\62\32\2\u03e6\61\3\2\2\2\u03e7\u03e8\7\u00a6",
    "\2\2\u03e8\63\3\2\2\2\u03e9\u03ef\5\u018e\u00c8\2\u03ea\u03eb\5\u02aa",
    "\u0156\2\u03eb\u03ec\5\u018e\u00c8\2\u03ec\u03ee\3\2\2\2\u03ed\u03ea",
    "\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef\u03f0\3\2\2\2",
    "\u03f0\65\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f2\u03f7\5\u01b6\u00dc\2\u03f3",
    "\u03f4\5\u0228\u0115\2\u03f4\u03f5\5\u020c\u0107\2\u03f5\u03f7\3\2\2",
    "\2\u03f6\u03f2\3\2\2\2\u03f6\u03f3\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8",
    "\u03f9\5\u0210\u0109\2\u03f9\u03fa\5\u020c\u0107\2\u03fa\u03fb\5\u01e8",
    "\u00f5\2\u03fb\67\3\2\2\2\u03fc\u03fe\5\u01c0\u00e1\2\u03fd\u03ff\5",
    "D#\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400",
    "\u0402\5\u0194\u00cb\2\u0401\u0403\5\u00fc\177\2\u0402\u0401\3\2\2\2",
    "\u0402\u0403\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0405\5\u0168\u00b5\2",
    "\u0405\u0406\5\u029a\u014e\2\u0406\u0407\5\u0172\u00ba\2\u0407\u0408",
    "\5\u029c\u014f\2\u0408\u0409\5\u0230\u0119\2\u0409\u040a\5\u0184\u00c3",
    "\2\u040a\u040b\5\u0236\u011c\2\u040b\u040c\5\u0172\u00ba\2\u040c\u040d",
    "\5\u01d6\u00ec\2\u040d\u040e\5\u0184\u00c3\2\u040e\u040f\5\u01e6\u00f4",
    "\2\u040f\u0410\5:\36\2\u04109\3\2\2\2\u0411\u0416\5\u012e\u0098\2\u0412",
    "\u0416\5B\"\2\u0413\u0416\5@!\2\u0414\u0416\5<\37\2\u0415\u0411\3\2",
    "\2\2\u0415\u0412\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0414\3\2\2\2\u0416",
    ";\3\2\2\2\u0417\u0418\5\u029e\u0150\2\u0418\u041e\5> \2\u0419\u041a",
    "\5\u02aa\u0156\2\u041a\u041b\5> \2\u041b\u041d\3\2\2\2\u041c\u0419\3",
    "\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f",
    "\u0421\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422\5\u02a0\u0151\2\u0422",
    "=\3\2\2\2\u0423\u0424\5\u018c\u00c7\2\u0424\u0425\7\13\2\2\u0425\u0426",
    "\5:\36\2\u0426?\3\2\2\2\u0427\u0428\5\u029a\u014e\2\u0428\u042f\5B\"",
    "\2\u0429\u042a\5\u02aa\u0156\2\u042a\u042b\5\u012e\u0098\2\u042b\u042e",
    "\3\2\2\2\u042c\u042e\5B\"\2\u042d\u0429\3\2\2\2\u042d\u042c\3\2\2\2",
    "\u042e\u0431\3\2\2\2\u042f\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0432",
    "\3\2\2\2\u0431\u042f\3\2\2\2\u0432\u0433\5\u029c\u014f\2\u0433A\3\2",
    "\2\2\u0434\u0435\5\u029a\u014e\2\u0435\u043b\5\u012e\u0098\2\u0436\u0437",
    "\5\u02aa\u0156\2\u0437\u0438\5\u012e\u0098\2\u0438\u043a\3\2\2\2\u0439",
    "\u0436\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043b\u043c\3",
    "\2\2\2\u043c\u043e\3\2\2\2\u043d\u043b\3\2\2\2\u043e\u043f\5\u029c\u014f",
    "\2\u043fC\3\2\2\2\u0440\u0441\5\u0214\u010b\2\u0441\u0442\5\u0224\u0113",
    "\2\u0442E\3\2\2\2\u0443\u0444\5\u01a4\u00d3\2\u0444\u0445\5\u0250\u0129",
    "\2\u0445\u0446\5\u0188\u00c5\2\u0446\u0447\5\u025a\u012e\2\u0447\u0449",
    "\5H%\2\u0448\u044a\5J&\2\u0449\u0448\3\2\2\2\u0449\u044a\3\2\2\2\u044a",
    "G\3\2\2\2\u044b\u044c\5\u021c\u010f\2\u044c\u044d\5\u0144\u00a3\2\u044d",
    "I\3\2\2\2\u044e\u0451\5\u0238\u011d\2\u044f\u0451\5\u0206\u0104\2\u0450",
    "\u044e\3\2\2\2\u0450\u044f\3\2\2\2\u0451K\3\2\2\2\u0452\u0453\5\u01a4",
    "\u00d3\2\u0453\u0454\5\u0248\u0125\2\u0454\u0455\5\u015a\u00ae\2\u0455",
    "\u0456\5N(\2\u0456M\3\2\2\2\u0457\u0459\5X-\2\u0458\u0457\3\2\2\2\u0458",
    "\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u045c\5V,\2\u045b\u045a\3\2",
    "\2\2\u045b\u045c\3\2\2\2\u045c\u045e\3\2\2\2\u045d\u045f\5P)\2\u045e",
    "\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045fO\3\2\2\2\u0460\u0461\5\u0222",
    "\u0112\2\u0461\u0462\5R*\2\u0462Q\3\2\2\2\u0463\u0469\5T+\2\u0464\u0465",
    "\5\u01a6\u00d4\2\u0465\u0466\5T+\2\u0466\u0468\3\2\2\2\u0467\u0464\3",
    "\2\2\2\u0468\u046b\3\2\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a",
    "S\3\2\2\2\u046b\u0469\3\2\2\2\u046c\u046d\5\u016a\u00b6\2\u046d\u046e",
    "\5\u023e\u0120\2\u046e\u046f\5\u016e\u00b8\2\u046fU\3\2\2\2\u0470\u0471",
    "\5\u0192\u00ca\2\u0471\u0472\5\u016e\u00b8\2\u0472\u0479\5\u0172\u00ba",
    "\2\u0473\u0474\5\u02aa\u0156\2\u0474\u0475\5\u016e\u00b8\2\u0475\u0476",
    "\5\u0172\u00ba\2\u0476\u0478\3\2\2\2\u0477\u0473\3\2\2\2\u0478\u047b",
    "\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2\2\2\u047aW\3\2\2\2\u047b",
    "\u0479\3\2\2\2\u047c\u047d\5\u01a4\u00d3\2\u047d\u047e\5\u016a\u00b6",
    "\2\u047e\u047f\5\u0248\u0125\2\u047f\u0480\5\u0172\u00ba\2\u0480Y\3",
    "\2\2\2\u0481\u0482\5\u01a4\u00d3\2\u0482\u0483\5\u023a\u011e\2\u0483",
    "\u0484\5\u015e\u00b0\2\u0484\u0485\5\\/\2\u0485[\3\2\2\2\u0486\u048e",
    "\5h\65\2\u0487\u048e\5d\63\2\u0488\u048e\5d\63\2\u0489\u048e\5b\62\2",
    "\u048a\u048e\5`\61\2\u048b\u048e\5^\60\2\u048c\u048e\b/\1\2\u048d\u0486",
    "\3\2\2\2\u048d\u0487\3\2\2\2\u048d\u0488\3\2\2\2\u048d\u0489\3\2\2\2",
    "\u048d\u048a\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048c\3\2\2\2\u048e]",
    "\3\2\2\2\u048f\u0490\5\u025a\u012e\2\u0490\u0491\5\u0092J\2\u0491_\3",
    "\2\2\2\u0492\u0493\5\u0222\u0112\2\u0493\u0494\5\u016a\u00b6\2\u0494",
    "\u0495\5\u023e\u0120\2\u0495\u0496\5\u016e\u00b8\2\u0496a\3\2\2\2\u0497",
    "\u0498\5\u01ca\u00e6\2\u0498\u0499\5\u01ba\u00de\2\u0499\u049a\5\u0234",
    "\u011b\2\u049ac\3\2\2\2\u049b\u049c\5\u01ca\u00e6\2\u049c\u049d\5f\64",
    "\2\u049de\3\2\2\2\u049e\u04a4\5\u016a\u00b6\2\u049f\u04a0\5\u02aa\u0156",
    "\2\u04a0\u04a1\5\u016a\u00b6\2\u04a1\u04a3\3\2\2\2\u04a2\u049f\3\2\2",
    "\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5",
    "g\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a7\u04a8\5\u0192\u00ca\2\u04a8\u04a9",
    "\5j\66\2\u04a9i\3\2\2\2\u04aa\u04ab\5\u016e\u00b8\2\u04ab\u04b2\5\u0172",
    "\u00ba\2\u04ac\u04ad\5\u02aa\u0156\2\u04ad\u04ae\5\u016e\u00b8\2\u04ae",
    "\u04af\5\u0172\u00ba\2\u04af\u04b1\3\2\2\2\u04b0\u04ac\3\2\2\2\u04b1",
    "\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3k\3\2\2",
    "\2\u04b4\u04b2\3\2\2\2\u04b5\u04b6\5\u01a4\u00d3\2\u04b6\u04b7\5\u022a",
    "\u0116\2\u04b7\u04b9\5\u017a\u00be\2\u04b8\u04ba\5n8\2\u04b9\u04b8\3",
    "\2\2\2\u04b9\u04ba\3\2\2\2\u04bam\3\2\2\2\u04bb\u04bc\5\u025a\u012e",
    "\2\u04bc\u04c2\5p9\2\u04bd\u04be\5\u01a6\u00d4\2\u04be\u04bf\5p9\2\u04bf",
    "\u04c1\3\2\2\2\u04c0\u04bd\3\2\2\2\u04c1\u04c4\3\2\2\2\u04c2\u04c0\3",
    "\2\2\2\u04c2\u04c3\3\2\2\2\u04c3o\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5",
    "\u04c6\5\u021c\u010f\2\u04c6\u04c7\7\u00ae\2\2\u04c7\u04c8\5\u0144\u00a3",
    "\2\u04c8\u04d6\3\2\2\2\u04c9\u04ca\5\u0200\u0101\2\u04ca\u04cb\7\u00ae",
    "\2\2\u04cb\u04cc\5\u0146\u00a4\2\u04cc\u04d6\3\2\2\2\u04cd\u04ce\5\u0238",
    "\u011d\2\u04ce\u04cf\7\u00ae\2\2\u04cf\u04d0\5\u0146\u00a4\2\u04d0\u04d6",
    "\3\2\2\2\u04d1\u04d2\5\u0212\u010a\2\u04d2\u04d3\7\u00ae\2\2\u04d3\u04d4",
    "\5\u009aN\2\u04d4\u04d6\3\2\2\2\u04d5\u04c5\3\2\2\2\u04d5\u04c9\3\2",
    "\2\2\u04d5\u04cd\3\2\2\2\u04d5\u04d1\3\2\2\2\u04d6q\3\2\2\2\u04d7\u04d8",
    "\5\u01a4\u00d3\2\u04d8\u04d9\5\u0202\u0102\2\u04d9\u04dd\5\u0164\u00b3",
    "\2\u04da\u04db\5\u025a\u012e\2\u04db\u04dc\5\u0092J\2\u04dc\u04de\3",
    "\2\2\2\u04dd\u04da\3\2\2\2\u04dd\u04de\3\2\2\2\u04des\3\2\2\2\u04df",
    "\u04e0\5\u01ca\u00e6\2\u04e0\u04e2\5\u0250\u0129\2\u04e1\u04e3\5\u00fe",
    "\u0080\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4\3\2\2\2",
    "\u04e4\u04e5\5\u0188\u00c5\2\u04e5u\3\2\2\2\u04e6\u04e7\5\u01ca\u00e6",
    "\2\u04e7\u04e9\5\u0248\u0125\2\u04e8\u04ea\5\u00fe\u0080\2\u04e9\u04e8",
    "\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\5\u015a",
    "\u00ae\2\u04ecw\3\2\2\2\u04ed\u04ee\5\u01ca\u00e6\2\u04ee\u04f0\5\u0202",
    "\u0102\2\u04ef\u04f1\5\u00fe\u0080\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1",
    "\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\5\u0164\u00b3\2\u04f3y\3\2",
    "\2\2\u04f4\u04f5\5\u01ca\u00e6\2\u04f5\u04f7\5\u0194\u00cb\2\u04f6\u04f8",
    "\5\u00fe\u0080\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04f9",
    "\3\2\2\2\u04f9\u04fa\5\u0158\u00ad\2\u04fa{\3\2\2\2\u04fb\u04fc\5\u01ca",
    "\u00e6\2\u04fc\u04fe\5\u01dc\u00ef\2\u04fd\u04ff\5\u00fe\u0080\2\u04fe",
    "\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0501\5",
    "\u015c\u00af\2\u0501}\3\2\2\2\u0502\u0503\5\u01ca\u00e6\2\u0503\u0505",
    "\5\u0242\u0122\2\u0504\u0506\5\u00fe\u0080\2\u0505\u0504\3\2\2\2\u0505",
    "\u0506\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508\5\u017c\u00bf\2\u0508",
    "\u0509\5\u0210\u0109\2\u0509\u050a\5\u015e\u00b0\2\u050a\177\3\2\2\2",
    "\u050b\u050c\5\u01ca\u00e6\2\u050c\u050e\5\u022a\u0116\2\u050d\u050f",
    "\5\u00fe\u0080\2\u050e\u050d\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510",
    "\3\2\2\2\u0510\u0511\5\u017a\u00be\2\u0511\u0081\3\2\2\2\u0512\u0513",
    "\5\u01ca\u00e6\2\u0513\u0515\5\u023a\u011e\2\u0514\u0516\5\u00fe\u0080",
    "\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0517\3\2\2\2\u0517",
    "\u0518\5\u015e\u00b0\2\u0518\u0083\3\2\2\2\u0519\u051a\5\u01ca\u00e6",
    "\2\u051a\u051c\5\u01f2\u00fa\2\u051b\u051d\5\u00fe\u0080\2\u051c\u051b",
    "\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u051f\5\u014a",
    "\u00a6\2\u051f\u0085\3\2\2\2\u0520\u0521\5\u01ca\u00e6\2\u0521\u0523",
    "\5\u01e4\u00f3\2\u0522\u0524\5\u00fe\u0080\2\u0523\u0522\3\2\2\2\u0523",
    "\u0524\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526\5\u0162\u00b2\2\u0526",
    "\u0087\3\2\2\2\u0527\u0528\5\u01c0\u00e1\2\u0528\u052a\5\u023a\u011e",
    "\2\u0529\u052b\5\u00fc\177\2\u052a\u0529\3\2\2\2\u052a\u052b\3\2\2\2",
    "\u052b\u052c\3\2\2\2\u052c\u052d\5\u0168\u00b5\2\u052d\u052f\5\u008a",
    "F\2\u052e\u0530\5\u008cG\2\u052f\u052e\3\2\2\2\u052f\u0530\3\2\2\2\u0530",
    "\u0089\3\2\2\2\u0531\u0532\5\u029a\u014e\2\u0532\u0533\5\u00a2R\2\u0533",
    "\u0534\5\u029c\u014f\2\u0534\u0537\3\2\2\2\u0535\u0537\bF\1\2\u0536",
    "\u0531\3\2\2\2\u0536\u0535\3\2\2\2\u0537\u008b\3\2\2\2\u0538\u0539\5",
    "\u025a\u012e\2\u0539\u053d\5\u0092J\2\u053a\u053b\5\u01a6\u00d4\2\u053b",
    "\u053c\5\u008eH\2\u053c\u053e\3\2\2\2\u053d\u053a\3\2\2\2\u053d\u053e",
    "\3\2\2\2\u053e\u0549\3\2\2\2\u053f\u0541\5\u025a\u012e\2\u0540\u0542",
    "\5\u008eH\2\u0541\u0540\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0546\3\2",
    "\2\2\u0543\u0544\5\u01a6\u00d4\2\u0544\u0545\5\u0092J\2\u0545\u0547",
    "\3\2\2\2\u0546\u0543\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0549\3\2\2\2",
    "\u0548\u0538\3\2\2\2\u0548\u053f\3\2\2\2\u0549\u008d\3\2\2\2\u054a\u054b",
    "\5\u01b8\u00dd\2\u054b\u054c\5\u0216\u010c\2\u054c\u054d\5\u01b4\u00db",
    "\2\u054d\u054e\5\u029a\u014e\2\u054e\u0554\5\u0090I\2\u054f\u0550\5",
    "\u02aa\u0156\2\u0550\u0551\5\u0090I\2\u0551\u0553\3\2\2\2\u0552\u054f",
    "\3\2\2\2\u0553\u0556\3\2\2\2\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2",
    "\u0555\u0557\3\2\2\2\u0556\u0554\3\2\2\2\u0557\u0558\5\u029c\u014f\2",
    "\u0558\u008f\3\2\2\2\u0559\u055b\5\u016a\u00b6\2\u055a\u055c\5\u0178",
    "\u00bd\2\u055b\u055a\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u0091\3\2\2\2",
    "\u055d\u0563\5\u0094K\2\u055e\u055f\5\u01a6\u00d4\2\u055f\u0560\5\u0094",
    "K\2\u0560\u0562\3\2\2\2\u0561\u055e\3\2\2\2\u0562\u0565\3\2\2\2\u0563",
    "\u0561\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0093\3\2\2\2\u0565\u0563\3",
    "\2\2\2\u0566\u0567\5\u0096L\2\u0567\u0568\7\u00ae\2\2\u0568\u0569\5",
    "\u0098M\2\u0569\u056f\3\2\2\2\u056a\u056b\5\u0096L\2\u056b\u056c\7\u00ae",
    "\2\2\u056c\u056d\5\u009aN\2\u056d\u056f\3\2\2\2\u056e\u0566\3\2\2\2",
    "\u056e\u056a\3\2\2\2\u056f\u0095\3\2\2\2\u0570\u0571\7\u00ac\2\2\u0571",
    "\u0097\3\2\2\2\u0572\u0575\5\u0144\u00a3\2\u0573\u0575\5\u0142\u00a2",
    "\2\u0574\u0572\3\2\2\2\u0574\u0573\3\2\2\2\u0575\u0099\3\2\2\2\u0576",
    "\u0577\5\u029e\u0150\2\u0577\u057d\5\u009cO\2\u0578\u0579\5\u02aa\u0156",
    "\2\u0579\u057a\5\u009cO\2\u057a\u057c\3\2\2\2\u057b\u0578\3\2\2\2\u057c",
    "\u057f\3\2\2\2\u057d\u057b\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0580\3",
    "\2\2\2\u057f\u057d\3\2\2\2\u0580\u0581\5\u02a0\u0151\2\u0581\u009b\3",
    "\2\2\2\u0582\u0583\5\u009eP\2\u0583\u0584\7\13\2\2\u0584\u0585\5\u00a0",
    "Q\2\u0585\u009d\3\2\2\2\u0586\u0587\5\u0144\u00a3\2\u0587\u009f\3\2",
    "\2\2\u0588\u058b\5\u0144\u00a3\2\u0589\u058b\5\u0142\u00a2\2\u058a\u0588",
    "\3\2\2\2\u058a\u0589\3\2\2\2\u058b\u00a1\3\2\2\2\u058c\u0592\5\u00a4",
    "S\2\u058d\u058e\5\u02aa\u0156\2\u058e\u058f\5\u00a4S\2\u058f\u0591\3",
    "\2\2\2\u0590\u058d\3\2\2\2\u0591\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0592",
    "\u0593\3\2\2\2\u0593\u0598\3\2\2\2\u0594\u0592\3\2\2\2\u0595\u0596\5",
    "\u02aa\u0156\2\u0596\u0597\5\u00a8U\2\u0597\u0599\3\2\2\2\u0598\u0595",
    "\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u00a3\3\2\2\2\u059a\u059b\5\u0170",
    "\u00b9\2\u059b\u059c\5\u0172\u00ba\2\u059c\u059d\5\u00a6T\2\u059d\u05a7",
    "\3\2\2\2\u059e\u059f\5\u0170\u00b9\2\u059f\u05a0\5\u0172\u00ba\2\u05a0",
    "\u05a1\5\u0232\u011a\2\u05a1\u05a7\3\2\2\2\u05a2\u05a3\5\u0170\u00b9",
    "\2\u05a3\u05a4\5\u0172\u00ba\2\u05a4\u05a7\3\2\2\2\u05a5\u05a7\bS\1",
    "\2\u05a6\u059a\3\2\2\2\u05a6\u059e\3\2\2\2\u05a6\u05a2\3\2\2\2\u05a6",
    "\u05a5\3\2\2\2\u05a7\u00a5\3\2\2\2\u05a8\u05a9\5\u0220\u0111\2\u05a9",
    "\u05aa\5\u01ee\u00f8\2\u05aa\u05af\3\2\2\2\u05ab\u05ac\5\u0220\u0111",
    "\2\u05ac\u05ad\bT\1\2\u05ad\u05af\3\2\2\2\u05ae\u05a8\3\2\2\2\u05ae",
    "\u05ab\3\2\2\2\u05af\u00a7\3\2\2\2\u05b0\u05b1\5\u0220\u0111\2\u05b1",
    "\u05b2\5\u01ee\u00f8\2\u05b2\u05b3\5\u029a\u014e\2\u05b3\u05b4\5\u00aa",
    "V\2\u05b4\u05b5\5\u029c\u014f\2\u05b5\u00a9\3\2\2\2\u05b6\u05ba\5\u00ac",
    "W\2\u05b7\u05ba\5\u00aeX\2\u05b8\u05ba\5\u00b0Y\2\u05b9\u05b6\3\2\2",
    "\2\u05b9\u05b7\3\2\2\2\u05b9\u05b8\3\2\2\2\u05ba\u00ab\3\2\2\2\u05bb",
    "\u05bc\5\u016a\u00b6\2\u05bc\u00ad\3\2\2\2\u05bd\u05be\5\u029a\u014e",
    "\2\u05be\u05bf\5\u00b2Z\2\u05bf\u05c0\5\u029c\u014f\2\u05c0\u00af\3",
    "\2\2\2\u05c1\u05c2\5\u016a\u00b6\2\u05c2\u05c3\5\u02aa\u0156\2\u05c3",
    "\u05c4\5\u00b4[\2\u05c4\u05cc\3\2\2\2\u05c5\u05c6\5\u029a\u014e\2\u05c6",
    "\u05c7\5\u00b2Z\2\u05c7\u05c8\5\u029c\u014f\2\u05c8\u05c9\5\u02aa\u0156",
    "\2\u05c9\u05ca\5\u00b4[\2\u05ca\u05cc\3\2\2\2\u05cb\u05c1\3\2\2\2\u05cb",
    "\u05c5\3\2\2\2\u05cc\u00b1\3\2\2\2\u05cd\u05d3\5\u016a\u00b6\2\u05ce",
    "\u05cf\5\u02aa\u0156\2\u05cf\u05d0\5\u016a\u00b6\2\u05d0\u05d2\3\2\2",
    "\2\u05d1\u05ce\3\2\2\2\u05d2\u05d5\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d3",
    "\u05d4\3\2\2\2\u05d4\u00b3\3\2\2\2\u05d5\u05d3\3\2\2\2\u05d6\u05dc\5",
    "\u016a\u00b6\2\u05d7\u05d8\5\u02aa\u0156\2\u05d8\u05d9\5\u016a\u00b6",
    "\2\u05d9\u05db\3\2\2\2\u05da\u05d7\3\2\2\2\u05db\u05de\3\2\2\2\u05dc",
    "\u05da\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u00b5\3\2\2\2\u05de\u05dc\3",
    "\2\2\2\u05df\u05e0\5\u01a8\u00d5\2\u05e0\u05e1\5\u01b0\u00d9\2\u05e1",
    "\u00b7\3\2\2\2\u05e2\u05e3\5\u00ba^\2\u05e3\u05e4\5\u00dan\2\u05e4\u05ec",
    "\3\2\2\2\u05e5\u05e6\5\u00ba^\2\u05e6\u05e7\5\u00f2z\2\u05e7\u05ec\3",
    "\2\2\2\u05e8\u05e9\5\u00ba^\2\u05e9\u05ea\5\u00e0q\2\u05ea\u05ec\3\2",
    "\2\2\u05eb\u05e2\3\2\2\2\u05eb\u05e5\3\2\2\2\u05eb\u05e8\3\2\2\2\u05ec",
    "\u00b9\3\2\2\2\u05ed\u05ef\5\u01b2\u00da\2\u05ee\u05f0\5\u00bc_\2\u05ef",
    "\u05ee\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f3\5",
    "\u01b0\u00d9\2\u05f2\u05f4\5\u00fa~\2\u05f3\u05f2\3\2\2\2\u05f3\u05f4",
    "\3\2\2\2\u05f4\u00bb\3\2\2\2\u05f5\u05f8\5\u01fe\u0100\2\u05f6\u05f8",
    "\5\u024a\u0126\2\u05f7\u05f5\3\2\2\2\u05f7\u05f6\3\2\2\2\u05f8\u00bd",
    "\3\2\2\2\u05f9\u05fa\5\u01a4\u00d3\2\u05fa\u05fb\5\u01f2\u00fa\2\u05fb",
    "\u05fc\5\u014a\u00a6\2\u05fc\u05fd\5\u025a\u012e\2\u05fd\u05fe\5\u0226",
    "\u0114\2\u05fe\u05ff\7\u00ae\2\2\u05ff\u0600\5\u029e\u0150\2\u0600\u0601",
    "\5\u00c0a\2\u0601\u0605\5\u02a0\u0151\2\u0602\u0603\5\u01a6\u00d4\2",
    "\u0603\u0604\5\u00c4c\2\u0604\u0606\3\2\2\2\u0605\u0602\3\2\2\2\u0605",
    "\u0606\3\2\2\2\u0606\u00bf\3\2\2\2\u0607\u060d\5\u00c2b\2\u0608\u0609",
    "\5\u02aa\u0156\2\u0609\u060a\5\u00c2b\2\u060a\u060c\3\2\2\2\u060b\u0608",
    "\3\2\2\2\u060c\u060f\3\2\2\2\u060d\u060b\3\2\2\2\u060d\u060e\3\2\2\2",
    "\u060e\u00c1\3\2\2\2\u060f\u060d\3\2\2\2\u0610\u0611\7\u00a7\2\2\u0611",
    "\u0612\7\13\2\2\u0612\u0617\7\u00a7\2\2\u0613\u0614\7\u00a7\2\2\u0614",
    "\u0615\7\13\2\2\u0615\u0617\7\u00a8\2\2\u0616\u0610\3\2\2\2\u0616\u0613",
    "\3\2\2\2\u0617\u00c3\3\2\2\2\u0618\u0619\5\u01cc\u00e7\2\u0619\u061a",
    "\7\u00ae\2\2\u061a\u061b\5\u0146\u00a4\2\u061b\u00c5\3\2\2\2\u061c\u061d",
    "\5\u024e\u0128\2\u061d\u061e\5\u014a\u00a6\2\u061e\u00c7\3\2\2\2\u061f",
    "\u0621\5\u0244\u0123\2\u0620\u0622\5\u023a\u011e\2\u0621\u0620\3\2\2",
    "\2\u0621\u0622\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0624\5\u015e\u00b0",
    "\2\u0624\u00c9\3\2\2\2\u0625\u0626\5\u01c0\u00e1\2\u0626\u0628\5\u01e4",
    "\u00f3\2\u0627\u0629\5\u00fc\177\2\u0628\u0627\3\2\2\2\u0628\u0629\3",
    "\2\2\2\u0629\u062b\3\2\2\2\u062a\u062c\5\u0156\u00ac\2\u062b\u062a\3",
    "\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\5\u00ccg",
    "\2\u062e\u062f\5\u00d0i\2\u062f\u00cb\3\2\2\2\u0630\u0631\5\u0210\u0109",
    "\2\u0631\u0632\5\u015e\u00b0\2\u0632\u0635\3\2\2\2\u0633\u0635\bg\1",
    "\2\u0634\u0630\3\2\2\2\u0634\u0633\3\2\2\2\u0635\u00cd\3\2\2\2\u0636",
    "\u0639\7\u00ac\2\2\u0637\u0639\5\u0144\u00a3\2\u0638\u0636\3\2\2\2\u0638",
    "\u0637\3\2\2\2\u0639\u00cf\3\2\2\2\u063a\u063b\5\u029a\u014e\2\u063b",
    "\u063c\5\u00d2j\2\u063c\u063d\5\u029c\u014f\2\u063d\u0640\3\2\2\2\u063e",
    "\u0640\bi\1\2\u063f\u063a\3\2\2\2\u063f\u063e\3\2\2\2\u0640\u00d1\3",
    "\2\2\2\u0641\u0647\5\u016a\u00b6\2\u0642\u0647\5\u00d4k\2\u0643\u0647",
    "\5\u00d6l\2\u0644\u0647\5\u00d8m\2\u0645\u0647\bj\1\2\u0646\u0641\3",
    "\2\2\2\u0646\u0642\3\2\2\2\u0646\u0643\3\2\2\2\u0646\u0644\3\2\2\2\u0646",
    "\u0645\3\2\2\2\u0647\u00d3\3\2\2\2\u0648\u0649\5\u01f0\u00f9\2\u0649",
    "\u064c\5\u029a\u014e\2\u064a\u064d\5\u016a\u00b6\2\u064b\u064d\bk\1",
    "\2\u064c\u064a\3\2\2\2\u064c\u064b\3\2\2\2\u064d\u064e\3\2\2\2\u064e",
    "\u064f\5\u029c\u014f\2\u064f\u00d5\3\2\2\2\u0650\u0651\5\u01ce\u00e8",
    "\2\u0651\u0654\5\u029a\u014e\2\u0652\u0655\5\u016a\u00b6\2\u0653\u0655",
    "\bl\1\2\u0654\u0652\3\2\2\2\u0654\u0653\3\2\2\2\u0655\u0656\3\2\2\2",
    "\u0656\u0657\5\u029c\u014f\2\u0657\u00d7\3\2\2\2\u0658\u0659\5\u01da",
    "\u00ee\2\u0659\u065c\5\u029a\u014e\2\u065a\u065d\5\u016a\u00b6\2\u065b",
    "\u065d\bm\1\2\u065c\u065a\3\2\2\2\u065c\u065b\3\2\2\2\u065d\u065e\3",
    "\2\2\2\u065e\u065f\5\u029c\u014f\2\u065f\u00d9\3\2\2\2\u0660\u0662\5",
    "\u01c2\u00e2\2\u0661\u0663\5\u00dco\2\u0662\u0661\3\2\2\2\u0662\u0663",
    "\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0666\5\u0110\u0089\2\u0665\u0667",
    "\5\u00fa~\2\u0666\u0665\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u066a\3\2",
    "\2\2\u0668\u066b\5\u0116\u008c\2\u0669\u066b\bn\1\2\u066a\u0668\3\2",
    "\2\2\u066a\u0669\3\2\2\2\u066b\u066e\3\2\2\2\u066c\u066f\5\u00fe\u0080",
    "\2\u066d\u066f\5\u00e2r\2\u066e\u066c\3\2\2\2\u066e\u066d\3\2\2\2\u066e",
    "\u066f\3\2\2\2\u066f\u00db\3\2\2\2\u0670\u0676\5\u00dep\2\u0671\u0672",
    "\5\u02aa\u0156\2\u0672\u0673\5\u00dep\2\u0673\u0675\3\2\2\2\u0674\u0671",
    "\3\2\2\2\u0675\u0678\3\2\2\2\u0676\u0674\3\2\2\2\u0676\u0677\3\2\2\2",
    "\u0677\u00dd\3\2\2\2\u0678\u0676\3\2\2\2\u0679\u0683\5\u016a\u00b6\2",
    "\u067a\u067b\5\u016a\u00b6\2\u067b\u067e\5\u02a6\u0154\2\u067c\u067f",
    "\5\u0144\u00a3\2\u067d\u067f\5\u0140\u00a1\2\u067e\u067c\3\2\2\2\u067e",
    "\u067d\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681\5\u02a8\u0155\2\u0681",
    "\u0683\3\2\2\2\u0682\u0679\3\2\2\2\u0682\u067a\3\2\2\2\u0683\u00df\3",
    "\2\2\2\u0684\u0685\5\u024c\u0127\2\u0685\u0687\5\u0166\u00b4\2\u0686",
    "\u0688\5\u00f4{\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0689",
    "\3\2\2\2\u0689\u068c\5\u00e8u\2\u068a\u068d\5\u0116\u008c\2\u068b\u068d",
    "\bq\1\2\u068c\u068a\3\2\2\2\u068c\u068b\3\2\2\2\u068d\u0690\3\2\2\2",
    "\u068e\u0691\5\u00fe\u0080\2\u068f\u0691\5\u00e2r\2\u0690\u068e\3\2",
    "\2\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u00e1\3\2\2\2\u0692",
    "\u0693\5\u01e0\u00f1\2\u0693\u0694\5\u00e4s\2\u0694\u00e3\3\2\2\2\u0695",
    "\u069b\5\u00e6t\2\u0696\u0697\5\u01a6\u00d4\2\u0697\u0698\5\u00e6t\2",
    "\u0698\u069a\3\2\2\2\u0699\u0696\3\2\2\2\u069a\u069d\3\2\2\2\u069b\u0699",
    "\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u00e5\3\2\2\2\u069d\u069b\3\2\2\2",
    "\u069e\u069f\7\u00ac\2\2\u069f\u06a0\7\u00ae\2\2\u06a0\u06a1\5\u012e",
    "\u0098\2\u06a1\u00e7\3\2\2\2\u06a2\u06a3\5\u022e\u0118\2\u06a3\u06a9",
    "\5\u00eav\2\u06a4\u06a5\5\u02aa\u0156\2\u06a5\u06a6\5\u00eav\2\u06a6",
    "\u06a8\3\2\2\2\u06a7\u06a4\3\2\2\2\u06a8\u06ab\3\2\2\2\u06a9\u06a7\3",
    "\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ae\3\2\2\2\u06ab\u06a9\3\2\2\2\u06ac",
    "\u06ae\bu\1\2\u06ad\u06a2\3\2\2\2\u06ad\u06ac\3\2\2\2\u06ae\u00e9\3",
    "\2\2\2\u06af\u06b0\5\u016a\u00b6\2\u06b0\u06b3\5\u02b6\u015c\2\u06b1",
    "\u06b4\5\u012e\u0098\2\u06b2\u06b4\5\u0134\u009b\2\u06b3\u06b1\3\2\2",
    "\2\u06b3\u06b2\3\2\2\2\u06b4\u06fd\3\2\2\2\u06b5\u06b6\5\u016a\u00b6",
    "\2\u06b6\u06b7\5\u02b6\u015c\2\u06b7\u06ba\5\u016a\u00b6\2\u06b8\u06bb",
    "\5\u02ae\u0158\2\u06b9\u06bb\5\u02b0\u0159\2\u06ba\u06b8\3\2\2\2\u06ba",
    "\u06b9\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\5\u0140\u00a1\2\u06bd",
    "\u06fd\3\2\2\2\u06be\u06bf\5\u016a\u00b6\2\u06bf\u06c0\5\u02b6\u015c",
    "\2\u06c0\u06c3\5\u016a\u00b6\2\u06c1\u06c4\5\u02ae\u0158\2\u06c2\u06c4",
    "\5\u02b0\u0159\2\u06c3\u06c1\3\2\2\2\u06c3\u06c2\3\2\2\2\u06c4\u06c5",
    "\3\2\2\2\u06c5\u06c6\5\u00eex\2\u06c6\u06fd\3\2\2\2\u06c7\u06c8\5\u016a",
    "\u00b6\2\u06c8\u06c9\5\u02b6\u015c\2\u06c9\u06cc\5\u016a\u00b6\2\u06ca",
    "\u06cd\5\u02ae\u0158\2\u06cb\u06cd\5\u02b0\u0159\2\u06cc\u06ca\3\2\2",
    "\2\u06cc\u06cb\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\5\u00ecw\2\u06cf",
    "\u06fd\3\2\2\2\u06d0\u06d1\5\u016a\u00b6\2\u06d1\u06d2\5\u02b6\u015c",
    "\2\u06d2\u06d5\5\u016a\u00b6\2\u06d3\u06d6\5\u02ae\u0158\2\u06d4\u06d6",
    "\5\u02b0\u0159\2\u06d5\u06d3\3\2\2\2\u06d5\u06d4\3\2\2\2\u06d6\u06d7",
    "\3\2\2\2\u06d7\u06d8\5\u00f0y\2\u06d8\u06fd\3\2\2\2\u06d9\u06da\5\u016a",
    "\u00b6\2\u06da\u06db\5\u02b6\u015c\2\u06db\u06de\5\u00ecw\2\u06dc\u06df",
    "\5\u02ae\u0158\2\u06dd\u06df\5\u02b0\u0159\2\u06de\u06dc\3\2\2\2\u06de",
    "\u06dd\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\7\u00ac\2\2\u06e1\u06fd",
    "\3\2\2\2\u06e2\u06e3\5\u016a\u00b6\2\u06e3\u06e4\5\u02b6\u015c\2\u06e4",
    "\u06e7\5\u00eex\2\u06e5\u06e8\5\u02ae\u0158\2\u06e6\u06e8\5\u02b0\u0159",
    "\2\u06e7\u06e5\3\2\2\2\u06e7\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9",
    "\u06ea\7\u00ac\2\2\u06ea\u06fd\3\2\2\2\u06eb\u06ec\5\u016a\u00b6\2\u06ec",
    "\u06ed\5\u02b6\u015c\2\u06ed\u06f0\5\u00f0y\2\u06ee\u06f1\5\u02ae\u0158",
    "\2\u06ef\u06f1\5\u02b0\u0159\2\u06f0\u06ee\3\2\2\2\u06f0\u06ef\3\2\2",
    "\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\7\u00ac\2\2\u06f3\u06fd\3\2\2\2\u06f4",
    "\u06f5\5\u016a\u00b6\2\u06f5\u06f6\5\u02a6\u0154\2\u06f6\u06f7\5\u0140",
    "\u00a1\2\u06f7\u06f8\5\u02a8\u0155\2\u06f8\u06f9\5\u02b6\u015c\2\u06f9",
    "\u06fa\5\u012e\u0098\2\u06fa\u06fd\3\2\2\2\u06fb\u06fd\bv\1\2\u06fc",
    "\u06af\3\2\2\2\u06fc\u06b5\3\2\2\2\u06fc\u06be\3\2\2\2\u06fc\u06c7\3",
    "\2\2\2\u06fc\u06d0\3\2\2\2\u06fc\u06d9\3\2\2\2\u06fc\u06e2\3\2\2\2\u06fc",
    "\u06eb\3\2\2\2\u06fc\u06f4\3\2\2\2\u06fc\u06fb\3\2\2\2\u06fd\u00eb\3",
    "\2\2\2\u06fe\u06ff\5\u029e\u0150\2\u06ff\u0705\5\u012e\u0098\2\u0700",
    "\u0701\5\u02aa\u0156\2\u0701\u0702\5\u012e\u0098\2\u0702\u0704\3\2\2",
    "\2\u0703\u0700\3\2\2\2\u0704\u0707\3\2\2\2\u0705\u0703\3\2\2\2\u0705",
    "\u0706\3\2\2\2\u0706\u0708\3\2\2\2\u0707\u0705\3\2\2\2\u0708\u0709\5",
    "\u02a0\u0151\2\u0709\u00ed\3\2\2\2\u070a\u070b\5\u029e\u0150\2\u070b",
    "\u070c\5\u012e\u0098\2\u070c\u070d\5\u02ac\u0157\2\u070d\u070e\5\u012e",
    "\u0098\2\u070e\u0715\3\2\2\2\u070f\u0710\5\u012e\u0098\2\u0710\u0711",
    "\5\u02ac\u0157\2\u0711\u0712\5\u012e\u0098\2\u0712\u0714\3\2\2\2\u0713",
    "\u070f\3\2\2\2\u0714\u0717\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716\3",
    "\2\2\2\u0716\u0718\3\2\2\2\u0717\u0715\3\2\2\2\u0718\u0719\5\u02a0\u0151",
    "\2\u0719\u00ef\3\2\2\2\u071a\u071b\5\u02a6\u0154\2\u071b\u0721\5\u012e",
    "\u0098\2\u071c\u071d\5\u02ac\u0157\2\u071d\u071e\5\u012e\u0098\2\u071e",
    "\u0720\3\2\2\2\u071f\u071c\3\2\2\2\u0720\u0723\3\2\2\2\u0721\u071f\3",
    "\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\3\2\2\2\u0723\u0721\3\2\2\2\u0724",
    "\u0725\5\u02a8\u0155\2\u0725\u00f1\3\2\2\2\u0726\u0727\5\u01ea\u00f6",
    "\2\u0727\u0728\5\u0166\u00b4\2\u0728\u0729\5\u0102\u0082\2\u0729\u072c",
    "\5\u0100\u0081\2\u072a\u072d\5\u00fc\177\2\u072b\u072d\3\2\2\2\u072c",
    "\u072a\3\2\2\2\u072c\u072b\3\2\2\2\u072d\u072f\3\2\2\2\u072e\u0730\5",
    "\u00f4{\2\u072f\u072e\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u00f3\3\2\2",
    "\2\u0731\u0732\5\u0254\u012b\2\u0732\u0733\5\u00f8}\2\u0733\u0742\3",
    "\2\2\2\u0734\u0735\5\u0254\u012b\2\u0735\u0736\5\u00f8}\2\u0736\u0737",
    "\5\u01a6\u00d4\2\u0737\u0738\5\u00f6|\2\u0738\u0742\3\2\2\2\u0739\u073a",
    "\5\u0254\u012b\2\u073a\u073b\5\u00f6|\2\u073b\u0742\3\2\2\2\u073c\u073d",
    "\5\u0254\u012b\2\u073d\u073e\5\u00f6|\2\u073e\u073f\5\u01a6\u00d4\2",
    "\u073f\u0740\5\u00f8}\2\u0740\u0742\3\2\2\2\u0741\u0731\3\2\2\2\u0741",
    "\u0734\3\2\2\2\u0741\u0739\3\2\2\2\u0741\u073c\3\2\2\2\u0742\u00f5\3",
    "\2\2\2\u0743\u0744\5\u023c\u011f\2\u0744\u0745\5\u0140\u00a1\2\u0745",
    "\u00f7\3\2\2\2\u0746\u0747\5\u0246\u0124\2\u0747\u0748\5\u0140\u00a1",
    "\2\u0748\u00f9\3\2\2\2\u0749\u074a\5\u0254\u012b\2\u074a\u074b\5\u00f6",
    "|\2\u074b\u00fb\3\2\2\2\u074c\u074d\5\u01e0\u00f1\2\u074d\u074e\5\u020a",
    "\u0106\2\u074e\u074f\5\u01d2\u00ea\2\u074f\u00fd\3\2\2\2\u0750\u0751",
    "\5\u01e0\u00f1\2\u0751\u0752\5\u01d2\u00ea\2\u0752\u00ff\3\2\2\2\u0753",
    "\u0754\5\u0256\u012c\2\u0754\u0755\5\u029a\u014e\2\u0755\u0758\5\u0108",
    "\u0085\2\u0756\u0759\5\u029c\u014f\2\u0757\u0759\b\u0081\1\2\u0758\u0756",
    "\3\2\2\2\u0758\u0757\3\2\2\2\u0759\u075c\3\2\2\2\u075a\u075c\b\u0081",
    "\1\2\u075b\u0753\3\2\2\2\u075b\u075a\3\2\2\2\u075c\u0101\3\2\2\2\u075d",
    "\u075e\5\u029a\u014e\2\u075e\u075f\5\u0104\u0083\2\u075f\u0760\5\u029c",
    "\u014f\2\u0760\u0763\3\2\2\2\u0761\u0763\b\u0082\1\2\u0762\u075d\3\2",
    "\2\2\u0762\u0761\3\2\2\2\u0763\u0103\3\2\2\2\u0764\u076c\5\u016a\u00b6",
    "\2\u0765\u0768\5\u02aa\u0156\2\u0766\u0769\5\u016a\u00b6\2\u0767\u0769",
    "\b\u0083\1\2\u0768\u0766\3\2\2\2\u0768\u0767\3\2\2\2\u0769\u076b\3\2",
    "\2\2\u076a\u0765\3\2\2\2\u076b\u076e\3\2\2\2\u076c\u076a\3\2\2\2\u076c",
    "\u076d\3\2\2\2\u076d\u0771\3\2\2\2\u076e\u076c\3\2\2\2\u076f\u0771\b",
    "\u0083\1\2\u0770\u0764\3\2\2\2\u0770\u076f\3\2\2\2\u0771\u0105\3\2\2",
    "\2\u0772\u077a\5\u016a\u00b6\2\u0773\u0776\5\u02aa\u0156\2\u0774\u0777",
    "\5\u016a\u00b6\2\u0775\u0777\b\u0084\1\2\u0776\u0774\3\2\2\2\u0776\u0775",
    "\3\2\2\2\u0777\u0779\3\2\2\2\u0778\u0773\3\2\2\2\u0779\u077c\3\2\2\2",
    "\u077a\u0778\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077f\3\2\2\2\u077c\u077a",
    "\3\2\2\2\u077d\u077f\b\u0084\1\2\u077e\u0772\3\2\2\2\u077e\u077d\3\2",
    "\2\2\u077f\u0107\3\2\2\2\u0780\u0786\5\u010a\u0086\2\u0781\u0782\5\u02aa",
    "\u0156\2\u0782\u0783\5\u010a\u0086\2\u0783\u0785\3\2\2\2\u0784\u0781",
    "\3\2\2\2\u0785\u0788\3\2\2\2\u0786\u0784\3\2\2\2\u0786\u0787\3\2\2\2",
    "\u0787\u0109\3\2\2\2\u0788\u0786\3\2\2\2\u0789\u078c\5\u012e\u0098\2",
    "\u078a\u078c\5\u0134\u009b\2\u078b\u0789\3\2\2\2\u078b\u078a\3\2\2\2",
    "\u078c\u078f\3\2\2\2\u078d\u078f\b\u0086\1\2\u078e\u078b\3\2\2\2\u078e",
    "\u078d\3\2\2\2\u078f\u010b\3\2\2\2\u0790\u0792\5\u022c\u0117\2\u0791",
    "\u0793\5\u01c8\u00e5\2\u0792\u0791\3\2\2\2\u0792\u0793\3\2\2\2\u0793",
    "\u0794\3\2\2\2\u0794\u0795\5\u0118\u008d\2\u0795\u0797\5\u0110\u0089",
    "\2\u0796\u0798\5\u0116\u008c\2\u0797\u0796\3\2\2\2\u0797\u0798\3\2\2",
    "\2\u0798\u079a\3\2\2\2\u0799\u079b\5\u0112\u008a\2\u079a\u0799\3\2\2",
    "\2\u079a\u079b\3\2\2\2\u079b\u079d\3\2\2\2\u079c\u079e\5\u010e\u0088",
    "\2\u079d\u079c\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u07a0\3\2\2\2\u079f",
    "\u07a1\5\u01a2\u00d2\2\u07a0\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1",
    "\u010d\3\2\2\2\u07a2\u07a5\5\u01f6\u00fc\2\u07a3\u07a6\5\u0140\u00a1",
    "\2\u07a4\u07a6\b\u0088\1\2\u07a5\u07a3\3\2\2\2\u07a5\u07a4\3\2\2\2\u07a6",
    "\u010f\3\2\2\2\u07a7\u07a8\5\u01d8\u00ed\2\u07a8\u07a9\5\u0166\u00b4",
    "\2\u07a9\u07ac\3\2\2\2\u07aa\u07ac\b\u0089\1\2\u07ab\u07a7\3\2\2\2\u07ab",
    "\u07aa\3\2\2\2\u07ac\u0111\3\2\2\2\u07ad\u07ae\5\u0218\u010d\2\u07ae",
    "\u07af\5\u0114\u008b\2\u07af\u0113\3\2\2\2\u07b0\u07b3\5\u016a\u00b6",
    "\2\u07b1\u07b4\5\u01ac\u00d7\2\u07b2\u07b4\5\u01c4\u00e3\2\u07b3\u07b1",
    "\3\2\2\2\u07b3\u07b2\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b7\3\2\2\2",
    "\u07b5\u07b7\b\u008b\1\2\u07b6\u07b0\3\2\2\2\u07b6\u07b5\3\2\2\2\u07b7",
    "\u0115\3\2\2\2\u07b8\u07b9\5\u0258\u012d\2\u07b9\u07ba\5\u011c\u008f",
    "\2\u07ba\u0117\3\2\2\2\u07bb\u07c7\5\u0294\u014b\2\u07bc\u07c2\5\u011a",
    "\u008e\2\u07bd\u07be\5\u02aa\u0156\2\u07be\u07bf\5\u011a\u008e\2\u07bf",
    "\u07c1\3\2\2\2\u07c0\u07bd\3\2\2\2\u07c1\u07c4\3\2\2\2\u07c2\u07c0\3",
    "\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c7\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c5",
    "\u07c7\b\u008d\1\2\u07c6\u07bb\3\2\2\2\u07c6\u07bc\3\2\2\2\u07c6\u07c5",
    "\3\2\2\2\u07c7\u0119\3\2\2\2\u07c8\u07d7\5\u016a\u00b6\2\u07c9\u07cd",
    "\5\u016a\u00b6\2\u07ca\u07cb\5\u01aa\u00d6\2\u07cb\u07cc\7\u00ac\2\2",
    "\u07cc\u07ce\3\2\2\2\u07cd\u07ca\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d7",
    "\3\2\2\2\u07cf\u07d3\5\u012a\u0096\2\u07d0\u07d1\5\u01aa\u00d6\2\u07d1",
    "\u07d2\7\u00ac\2\2\u07d2\u07d4\3\2\2\2\u07d3\u07d0\3\2\2\2\u07d3\u07d4",
    "\3\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d7\b\u008e\1\2\u07d6\u07c8\3\2",
    "\2\2\u07d6\u07c9\3\2\2\2\u07d6\u07cf\3\2\2\2\u07d6\u07d5\3\2\2\2\u07d7",
    "\u011b\3\2\2\2\u07d8\u07de\5\u011e\u0090\2\u07d9\u07da\5\u01a6\u00d4",
    "\2\u07da\u07db\5\u011e\u0090\2\u07db\u07dd\3\2\2\2\u07dc\u07d9\3\2\2",
    "\2\u07dd\u07e0\3\2\2\2\u07de\u07dc\3\2\2\2\u07de\u07df\3\2\2\2\u07df",
    "\u011d\3\2\2\2\u07e0\u07de\3\2\2\2\u07e1\u07e8\5\u0120\u0091\2\u07e2",
    "\u07e8\5\u0122\u0092\2\u07e3\u07e8\5\u0124\u0093\2\u07e4\u07e5\7\u00ac",
    "\2\2\u07e5\u07e8\b\u0090\1\2\u07e6\u07e8\b\u0090\1\2\u07e7\u07e1\3\2",
    "\2\2\u07e7\u07e2\3\2\2\2\u07e7\u07e3\3\2\2\2\u07e7\u07e4\3\2\2\2\u07e7",
    "\u07e6\3\2\2\2\u07e8\u011f\3\2\2\2\u07e9\u07ea\5\u016a\u00b6\2\u07ea",
    "\u07ed\5\u0128\u0095\2\u07eb\u07ee\5\u012e\u0098\2\u07ec\u07ee\b\u0091",
    "\1\2\u07ed\u07eb\3\2\2\2\u07ed\u07ec\3\2\2\2\u07ee\u0121\3\2\2\2\u07ef",
    "\u07f0\5\u016a\u00b6\2\u07f0\u07f1\5\u01e2\u00f2\2\u07f1\u07f3\5\u029a",
    "\u014e\2\u07f2\u07f4\5\u012c\u0097\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4",
    "\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6\5\u029c\u014f\2\u07f6\u0123",
    "\3\2\2\2\u07f7\u07fa\5\u0126\u0094\2\u07f8\u07fb\5\u0128\u0095\2\u07f9",
    "\u07fb\b\u0093\1\2\u07fa\u07f8\3\2\2\2\u07fa\u07f9\3\2\2\2\u07fb\u07fc",
    "\3\2\2\2\u07fc\u07fd\5\u0126\u0094\2\u07fd\u0125\3\2\2\2\u07fe\u0801",
    "\5\u0240\u0121\2\u07ff\u0802\5\u029a\u014e\2\u0800\u0802\b\u0094\1\2",
    "\u0801\u07ff\3\2\2\2\u0801\u0800\3\2\2\2\u0802\u0805\3\2\2\2\u0803\u0806",
    "\5\u016a\u00b6\2\u0804\u0806\b\u0094\1\2\u0805\u0803\3\2\2\2\u0805\u0804",
    "\3\2\2\2\u0806\u0809\3\2\2\2\u0807\u080a\5\u029c\u014f\2\u0808\u080a",
    "\b\u0094\1\2\u0809\u0807\3\2\2\2\u0809\u0808\3\2\2\2\u080a\u080d\3\2",
    "\2\2\u080b\u080d\b\u0094\1\2\u080c\u07fe\3\2\2\2\u080c\u080b\3\2\2\2",
    "\u080d\u0127\3\2\2\2\u080e\u0817\5\u02b6\u015c\2\u080f\u0817\5\u02b8",
    "\u015d\2\u0810\u0817\5\u02ba\u015e\2\u0811\u0817\5\u02bc\u015f\2\u0812",
    "\u0817\5\u02be\u0160\2\u0813\u0817\5\u01bc\u00df\2\u0814\u0817\5\u01be",
    "\u00e0\2\u0815\u0817\b\u0095\1\2\u0816\u080e\3\2\2\2\u0816\u080f\3\2",
    "\2\2\u0816\u0810\3\2\2\2\u0816\u0811\3\2\2\2\u0816\u0812\3\2\2\2\u0816",
    "\u0813\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0815\3\2\2\2\u0817\u0129\3",
    "\2\2\2\u0818\u0819\7\u00ac\2\2\u0819\u081a\7\3\2\2\u081a\u081b\7\23",
    "\2\2\u081b\u0823\7\4\2\2\u081c\u081d\7\u00ac\2\2\u081d\u081f\7\3\2\2",
    "\u081e\u0820\5\u012c\u0097\2\u081f\u081e\3\2\2\2\u081f\u0820\3\2\2\2",
    "\u0820\u0821\3\2\2\2\u0821\u0823\7\4\2\2\u0822\u0818\3\2\2\2\u0822\u081c",
    "\3\2\2\2\u0823\u012b\3\2\2\2\u0824\u0828\5\u012e\u0098\2\u0825\u0828",
    "\7\u00ac\2\2\u0826\u0828\5\u012a\u0096\2\u0827\u0824\3\2\2\2\u0827\u0825",
    "\3\2\2\2\u0827\u0826\3\2\2\2\u0828\u0831\3\2\2\2\u0829\u082d\5\u02aa",
    "\u0156\2\u082a\u082e\5\u012e\u0098\2\u082b\u082e\7\u00ac\2\2\u082c\u082e",
    "\5\u012a\u0096\2\u082d\u082a\3\2\2\2\u082d\u082b\3\2\2\2\u082d\u082c",
    "\3\2\2\2\u082e\u0830\3\2\2\2\u082f\u0829\3\2\2\2\u0830\u0833\3\2\2\2",
    "\u0831\u082f\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u012d\3\2\2\2\u0833\u0831",
    "\3\2\2\2\u0834\u083c\5\u013e\u00a0\2\u0835\u083c\5\u0144\u00a3\2\u0836",
    "\u083c\5\u0140\u00a1\2\u0837\u083c\5\u0142\u00a2\2\u0838\u083c\5\u0148",
    "\u00a5\2\u0839\u083c\5\u0146\u00a4\2\u083a\u083c\5\u020c\u0107\2\u083b",
    "\u0834\3\2\2\2\u083b\u0835\3\2\2\2\u083b\u0836\3\2\2\2\u083b\u0837\3",
    "\2\2\2\u083b\u0838\3\2\2\2\u083b\u0839\3\2\2\2\u083b\u083a\3\2\2\2\u083c",
    "\u012f\3\2\2\2\u083d\u0843\5\u012e\u0098\2\u083e\u0843\5\u0136\u009c",
    "\2\u083f\u0843\5\u0138\u009d\2\u0840\u0843\5\u013a\u009e\2\u0841\u0843",
    "\5\u013c\u009f\2\u0842\u083d\3\2\2\2\u0842\u083e\3\2\2\2\u0842\u083f",
    "\3\2\2\2\u0842\u0840\3\2\2\2\u0842\u0841\3\2\2\2\u0843\u0131\3\2\2\2",
    "\u0844\u0845\5\u0130\u0099\2\u0845\u0846\5\u02ac\u0157\2\u0846\u0847",
    "\5\u0130\u0099\2\u0847\u0133\3\2\2\2\u0848\u084d\5\u0136\u009c\2\u0849",
    "\u084d\5\u013c\u009f\2\u084a\u084d\5\u013a\u009e\2\u084b\u084d\5\u0138",
    "\u009d\2\u084c\u0848\3\2\2\2\u084c\u0849\3\2\2\2\u084c\u084a\3\2\2\2",
    "\u084c\u084b\3\2\2\2\u084d\u0135\3\2\2\2\u084e\u084f\5\u029e\u0150\2",
    "\u084f\u0855\5\u0132\u009a\2\u0850\u0851\5\u02aa\u0156\2\u0851\u0852",
    "\5\u0132\u009a\2\u0852\u0854\3\2\2\2\u0853\u0850\3\2\2\2\u0854\u0857",
    "\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0858\3\2\2\2",
    "\u0857\u0855\3\2\2\2\u0858\u0859\5\u02a0\u0151\2\u0859\u0137\3\2\2\2",
    "\u085a\u085b\5\u029e\u0150\2\u085b\u0861\5\u0130\u0099\2\u085c\u085d",
    "\5\u02aa\u0156\2\u085d\u085e\5\u0130\u0099\2\u085e\u0860\3\2\2\2\u085f",
    "\u085c\3\2\2\2\u0860\u0863\3\2\2\2\u0861\u085f\3\2\2\2\u0861\u0862\3",
    "\2\2\2\u0862\u0864\3\2\2\2\u0863\u0861\3\2\2\2\u0864\u0865\5\u02a0\u0151",
    "\2\u0865\u0139\3\2\2\2\u0866\u0867\5\u02a6\u0154\2\u0867\u086d\5\u0130",
    "\u0099\2\u0868\u0869\5\u02aa\u0156\2\u0869\u086a\5\u0130\u0099\2\u086a",
    "\u086c\3\2\2\2\u086b\u0868\3\2\2\2\u086c\u086f\3\2\2\2\u086d\u086b\3",
    "\2\2\2\u086d\u086e\3\2\2\2\u086e\u0870\3\2\2\2\u086f\u086d\3\2\2\2\u0870",
    "\u0871\5\u02a8\u0155\2\u0871\u013b\3\2\2\2\u0872\u0873\5\u029a\u014e",
    "\2\u0873\u0879\5\u0130\u0099\2\u0874\u0875\5\u02aa\u0156\2\u0875\u0876",
    "\5\u0130\u0099\2\u0876\u0878\3\2\2\2\u0877\u0874\3\2\2\2\u0878\u087b",
    "\3\2\2\2\u0879\u0877\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u087c\3\2\2\2",
    "\u087b\u0879\3\2\2\2\u087c\u087d\5\u029c\u014f\2\u087d\u013d\3\2\2\2",
    "\u087e\u087f\7\u00ad\2\2\u087f\u013f\3\2\2\2\u0880\u0881\7\u00a8\2\2",
    "\u0881\u0141\3\2\2\2\u0882\u0883\t\2\2\2\u0883\u0143\3\2\2\2\u0884\u0885",
    "\7\u00a7\2\2\u0885\u0145\3\2\2\2\u0886\u0887\t\3\2\2\u0887\u0147\3\2",
    "\2\2\u0888\u0889\7\u00aa\2\2\u0889\u0149\3\2\2\2\u088a\u088b\t\4\2\2",
    "\u088b\u014b\3\2\2\2\u088c\u088d\t\4\2\2\u088d\u014d\3\2\2\2\u088e\u088f",
    "\t\4\2\2\u088f\u014f\3\2\2\2\u0890\u0891\t\4\2\2\u0891\u0151\3\2\2\2",
    "\u0892\u08a7\7\u00ac\2\2\u0893\u0894\7\f\2\2\u0894\u0895\7\u00ac\2\2",
    "\u0895\u08a7\7\f\2\2\u0896\u08a7\7\u0099\2\2\u0897\u08a7\7g\2\2\u0898",
    "\u08a7\7`\2\2\u0899\u08a7\7\67\2\2\u089a\u08a7\7O\2\2\u089b\u08a7\7",
    "\u0081\2\2\u089c\u08a7\7G\2\2\u089d\u08a7\7l\2\2\u089e\u08a7\7\177\2",
    "\2\u089f\u08a7\7c\2\2\u08a0\u08a7\7L\2\2\u08a1\u08a7\7P\2\2\u08a2\u08a7",
    "\7\u00a4\2\2\u08a3\u08a7\7\u00a5\2\2\u08a4\u08a7\7\u0099\2\2\u08a5\u08a7",
    "\7\u0098\2\2\u08a6\u0892\3\2\2\2\u08a6\u0893\3\2\2\2\u08a6\u0896\3\2",
    "\2\2\u08a6\u0897\3\2\2\2\u08a6\u0898\3\2\2\2\u08a6\u0899\3\2\2\2\u08a6",
    "\u089a\3\2\2\2\u08a6\u089b\3\2\2\2\u08a6\u089c\3\2\2\2\u08a6\u089d\3",
    "\2\2\2\u08a6\u089e\3\2\2\2\u08a6\u089f\3\2\2\2\u08a6\u08a0\3\2\2\2\u08a6",
    "\u08a1\3\2\2\2\u08a6\u08a2\3\2\2\2\u08a6\u08a3\3\2\2\2\u08a6\u08a4\3",
    "\2\2\2\u08a6\u08a5\3\2\2\2\u08a7\u0153\3\2\2\2\u08a8\u08bd\7\u00ac\2",
    "\2\u08a9\u08aa\7\f\2\2\u08aa\u08ab\7\u00ac\2\2\u08ab\u08bd\7\f\2\2\u08ac",
    "\u08bd\7\u0099\2\2\u08ad\u08bd\7g\2\2\u08ae\u08bd\7`\2\2\u08af\u08bd",
    "\7\67\2\2\u08b0\u08bd\7O\2\2\u08b1\u08bd\7\u0081\2\2\u08b2\u08bd\7G",
    "\2\2\u08b3\u08bd\7l\2\2\u08b4\u08bd\7\177\2\2\u08b5\u08bd\7c\2\2\u08b6",
    "\u08bd\7L\2\2\u08b7\u08bd\7P\2\2\u08b8\u08bd\7\u00a4\2\2\u08b9\u08bd",
    "\7\u00a5\2\2\u08ba\u08bd\7\u0099\2\2\u08bb\u08bd\7\u0098\2\2\u08bc\u08a8",
    "\3\2\2\2\u08bc\u08a9\3\2\2\2\u08bc\u08ac\3\2\2\2\u08bc\u08ad\3\2\2\2",
    "\u08bc\u08ae\3\2\2\2\u08bc\u08af\3\2\2\2\u08bc\u08b0\3\2\2\2\u08bc\u08b1",
    "\3\2\2\2\u08bc\u08b2\3\2\2\2\u08bc\u08b3\3\2\2\2\u08bc\u08b4\3\2\2\2",
    "\u08bc\u08b5\3\2\2\2\u08bc\u08b6\3\2\2\2\u08bc\u08b7\3\2\2\2\u08bc\u08b8",
    "\3\2\2\2\u08bc\u08b9\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bc\u08bb\3\2\2\2",
    "\u08bd\u0155\3\2\2\2\u08be\u08d4\7\u00ac\2\2\u08bf\u08c0\7\f\2\2\u08c0",
    "\u08c1\7\u00ac\2\2\u08c1\u08d4\7\f\2\2\u08c2\u08d4\7\u0099\2\2\u08c3",
    "\u08d4\7g\2\2\u08c4\u08d4\7`\2\2\u08c5\u08d4\7\67\2\2\u08c6\u08d4\7",
    "O\2\2\u08c7\u08d4\7\u0081\2\2\u08c8\u08d4\7G\2\2\u08c9\u08d4\7l\2\2",
    "\u08ca\u08d4\7\177\2\2\u08cb\u08d4\7c\2\2\u08cc\u08d4\7L\2\2\u08cd\u08d4",
    "\7P\2\2\u08ce\u08d4\7\u00a4\2\2\u08cf\u08d4\7\u00a5\2\2\u08d0\u08d4",
    "\7\u0099\2\2\u08d1\u08d4\7\u0098\2\2\u08d2\u08d4\7H\2\2\u08d3\u08be",
    "\3\2\2\2\u08d3\u08bf\3\2\2\2\u08d3\u08c2\3\2\2\2\u08d3\u08c3\3\2\2\2",
    "\u08d3\u08c4\3\2\2\2\u08d3\u08c5\3\2\2\2\u08d3\u08c6\3\2\2\2\u08d3\u08c7",
    "\3\2\2\2\u08d3\u08c8\3\2\2\2\u08d3\u08c9\3\2\2\2\u08d3\u08ca\3\2\2\2",
    "\u08d3\u08cb\3\2\2\2\u08d3\u08cc\3\2\2\2\u08d3\u08cd\3\2\2\2\u08d3\u08ce",
    "\3\2\2\2\u08d3\u08cf\3\2\2\2\u08d3\u08d0\3\2\2\2\u08d3\u08d1\3\2\2\2",
    "\u08d3\u08d2\3\2\2\2\u08d4\u0157\3\2\2\2\u08d5\u08e0\5\u0182\u00c2\2",
    "\u08d6\u08d7\5\u014a\u00a6\2\u08d7\u08d8\5\u0296\u014c\2\u08d8\u08d9",
    "\5\u0182\u00c2\2\u08d9\u08e0\3\2\2\2\u08da\u08db\5\u014a\u00a6\2\u08db",
    "\u08dc\5\u0296\u014c\2\u08dc\u08dd\b\u00ad\1\2\u08dd\u08e0\3\2\2\2\u08de",
    "\u08e0\b\u00ad\1\2\u08df\u08d5\3\2\2\2\u08df\u08d6\3\2\2\2\u08df\u08da",
    "\3\2\2\2\u08df\u08de\3\2\2\2\u08e0\u0159\3\2\2\2\u08e1\u08ec\5\u0180",
    "\u00c1\2\u08e2\u08e3\5\u014a\u00a6\2\u08e3\u08e4\5\u0296\u014c\2\u08e4",
    "\u08e5\5\u0180\u00c1\2\u08e5\u08ec\3\2\2\2\u08e6\u08e7\5\u014a\u00a6",
    "\2\u08e7\u08e8\5\u0296\u014c\2\u08e8\u08e9\b\u00ae\1\2\u08e9\u08ec\3",
    "\2\2\2\u08ea\u08ec\b\u00ae\1\2\u08eb\u08e1\3\2\2\2\u08eb\u08e2\3\2\2",
    "\2\u08eb\u08e6\3\2\2\2\u08eb\u08ea\3\2\2\2\u08ec\u015b\3\2\2\2\u08ed",
    "\u08f8\5\u0184\u00c3\2\u08ee\u08ef\5\u014a\u00a6\2\u08ef\u08f0\5\u0296",
    "\u014c\2\u08f0\u08f1\5\u0184\u00c3\2\u08f1\u08f8\3\2\2\2\u08f2\u08f3",
    "\5\u014a\u00a6\2\u08f3\u08f4\5\u0296\u014c\2\u08f4\u08f5\b\u00af\1\2",
    "\u08f5\u08f8\3\2\2\2\u08f6\u08f8\b\u00af\1\2\u08f7\u08ed\3\2\2\2\u08f7",
    "\u08ee\3\2\2\2\u08f7\u08f2\3\2\2\2\u08f7\u08f6\3\2\2\2\u08f8\u015d\3",
    "\2\2\2\u08f9\u0920\5\u014e\u00a8\2\u08fa\u08fb\5\u02b4\u015b\2\u08fb",
    "\u08fc\5\u014e\u00a8\2\u08fc\u08fd\5\u02b4\u015b\2\u08fd\u0920\3\2\2",
    "\2\u08fe\u08ff\5\u02b4\u015b\2\u08ff\u0900\5\u014a\u00a6\2\u0900\u0901",
    "\5\u02b4\u015b\2\u0901\u0904\3\2\2\2\u0902\u0904\5\u014a\u00a6\2\u0903",
    "\u08fe\3\2\2\2\u0903\u0902\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\5",
    "\u0296\u014c\2\u0906\u0907\5\u014e\u00a8\2\u0907\u0920\3\2\2\2\u0908",
    "\u0909\5\u02b4\u015b\2\u0909\u090a\5\u014a\u00a6\2\u090a\u090b\5\u02b4",
    "\u015b\2\u090b\u090e\3\2\2\2\u090c\u090e\5\u014a\u00a6\2\u090d\u0908",
    "\3\2\2\2\u090d\u090c\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0910\5\u0296",
    "\u014c\2\u0910\u0911\5\u02b4\u015b\2\u0911\u0912\5\u014e\u00a8\2\u0912",
    "\u0913\5\u02b4\u015b\2\u0913\u0920\3\2\2\2\u0914\u0915\5\u02b4\u015b",
    "\2\u0915\u0916\5\u014a\u00a6\2\u0916\u0917\5\u02b4\u015b\2\u0917\u091a",
    "\3\2\2\2\u0918\u091a\5\u014a\u00a6\2\u0919\u0914\3\2\2\2\u0919\u0918",
    "\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091c\5\u0296\u014c\2\u091c\u091d",
    "\b\u00b0\1\2\u091d\u0920\3\2\2\2\u091e\u0920\b\u00b0\1\2\u091f\u08f9",
    "\3\2\2\2\u091f\u08fa\3\2\2\2\u091f\u0903\3\2\2\2\u091f\u090d\3\2\2\2",
    "\u091f\u0919\3\2\2\2\u091f\u091e\3\2\2\2\u0920\u015f\3\2\2\2\u0921\u0948",
    "\5\u0150\u00a9\2\u0922\u0923\5\u02b4\u015b\2\u0923\u0924\5\u0150\u00a9",
    "\2\u0924\u0925\5\u02b4\u015b\2\u0925\u0948\3\2\2\2\u0926\u0927\5\u02b4",
    "\u015b\2\u0927\u0928\5\u014c\u00a7\2\u0928\u0929\5\u02b4\u015b\2\u0929",
    "\u092c\3\2\2\2\u092a\u092c\5\u014c\u00a7\2\u092b\u0926\3\2\2\2\u092b",
    "\u092a\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u092e\5\u0296\u014c\2\u092e",
    "\u092f\5\u0150\u00a9\2\u092f\u0948\3\2\2\2\u0930\u0931\5\u02b4\u015b",
    "\2\u0931\u0932\5\u014c\u00a7\2\u0932\u0933\5\u02b4\u015b\2\u0933\u0936",
    "\3\2\2\2\u0934\u0936\5\u014c\u00a7\2\u0935\u0930\3\2\2\2\u0935\u0934",
    "\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0938\5\u0296\u014c\2\u0938\u0939",
    "\5\u02b4\u015b\2\u0939\u093a\5\u0150\u00a9\2\u093a\u093b\5\u02b4\u015b",
    "\2\u093b\u0948\3\2\2\2\u093c\u093d\5\u02b4\u015b\2\u093d\u093e\5\u014c",
    "\u00a7\2\u093e\u093f\5\u02b4\u015b\2\u093f\u0942\3\2\2\2\u0940\u0942",
    "\5\u014c\u00a7\2\u0941\u093c\3\2\2\2\u0941\u0940\3\2\2\2\u0942\u0943",
    "\3\2\2\2\u0943\u0944\5\u0296\u014c\2\u0944\u0945\b\u00b1\1\2\u0945\u0948",
    "\3\2\2\2\u0946\u0948\b\u00b1\1\2\u0947\u0921\3\2\2\2\u0947\u0922\3\2",
    "\2\2\u0947\u092b\3\2\2\2\u0947\u0935\3\2\2\2\u0947\u0941\3\2\2\2\u0947",
    "\u0946\3\2\2\2\u0948\u0161\3\2\2\2\u0949\u0954\5\u00ceh\2\u094a\u094b",
    "\5\u014a\u00a6\2\u094b\u094c\5\u0296\u014c\2\u094c\u094d\5\u00ceh\2",
    "\u094d\u0954\3\2\2\2\u094e\u094f\5\u014a\u00a6\2\u094f\u0950\5\u0296",
    "\u014c\2\u0950\u0951\b\u00b2\1\2\u0951\u0954\3\2\2\2\u0952\u0954\b\u00b2",
    "\1\2\u0953\u0949\3\2\2\2\u0953\u094a\3\2\2\2\u0953\u094e\3\2\2\2\u0953",
    "\u0952\3\2\2\2\u0954\u0163\3\2\2\2\u0955\u0960\5\u0152\u00aa\2\u0956",
    "\u0957\5\u014a\u00a6\2\u0957\u0958\5\u0296\u014c\2\u0958\u0959\5\u0152",
    "\u00aa\2\u0959\u0960\3\2\2\2\u095a\u095b\5\u014a\u00a6\2\u095b\u095c",
    "\5\u0296\u014c\2\u095c\u095d\b\u00b3\1\2\u095d\u0960\3\2\2\2\u095e\u0960",
    "\b\u00b3\1\2\u095f\u0955\3\2\2\2\u095f\u0956\3\2\2\2\u095f\u095a\3\2",
    "\2\2\u095f\u095e\3\2\2\2\u0960\u0165\3\2\2\2\u0961\u0965\5\u015e\u00b0",
    "\2\u0962\u0965\5\u0164\u00b3\2\u0963\u0965\b\u00b4\1\2\u0964\u0961\3",
    "\2\2\2\u0964\u0962\3\2\2\2\u0964\u0963\3\2\2\2\u0965\u0167\3\2\2\2\u0966",
    "\u098d\5\u0156\u00ac\2\u0967\u0968\5\u02b4\u015b\2\u0968\u0969\5\u0156",
    "\u00ac\2\u0969\u096a\5\u02b4\u015b\2\u096a\u098d\3\2\2\2\u096b\u096c",
    "\5\u02b4\u015b\2\u096c\u096d\5\u014a\u00a6\2\u096d\u096e\5\u02b4\u015b",
    "\2\u096e\u0971\3\2\2\2\u096f\u0971\5\u014a\u00a6\2\u0970\u096b\3\2\2",
    "\2\u0970\u096f\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0973\5\u0296\u014c",
    "\2\u0973\u0974\5\u0156\u00ac\2\u0974\u098d\3\2\2\2\u0975\u0976\5\u02b4",
    "\u015b\2\u0976\u0977\5\u014a\u00a6\2\u0977\u0978\5\u02b4\u015b\2\u0978",
    "\u097b\3\2\2\2\u0979\u097b\5\u014a\u00a6\2\u097a\u0975\3\2\2\2\u097a",
    "\u0979\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u097d\5\u0296\u014c\2\u097d",
    "\u097e\5\u02b4\u015b\2\u097e\u097f\5\u0156\u00ac\2\u097f\u0980\5\u02b4",
    "\u015b\2\u0980\u098d\3\2\2\2\u0981\u0982\5\u02b4\u015b\2\u0982\u0983",
    "\5\u014a\u00a6\2\u0983\u0984\5\u02b4\u015b\2\u0984\u0987\3\2\2\2\u0985",
    "\u0987\5\u014a\u00a6\2\u0986\u0981\3\2\2\2\u0986\u0985\3\2\2\2\u0987",
    "\u0988\3\2\2\2\u0988\u0989\5\u0296\u014c\2\u0989\u098a\b\u00b5\1\2\u098a",
    "\u098d\3\2\2\2\u098b\u098d\b\u00b5\1\2\u098c\u0966\3\2\2\2\u098c\u0967",
    "\3\2\2\2\u098c\u0970\3\2\2\2\u098c\u097a\3\2\2\2\u098c\u0986\3\2\2\2",
    "\u098c\u098b\3\2\2\2\u098d\u0169\3\2\2\2\u098e\u0994\5\u016c\u00b7\2",
    "\u098f\u0990\5\u02b4\u015b\2\u0990\u0991\5\u016c\u00b7\2\u0991\u0992",
    "\5\u02b4\u015b\2\u0992\u0994\3\2\2\2\u0993\u098e\3\2\2\2\u0993\u098f",
    "\3\2\2\2\u0994\u016b\3\2\2\2\u0995\u0996\t\5\2\2\u0996\u016d\3\2\2\2",
    "\u0997\u099d\5\u0170\u00b9\2\u0998\u0999\5\u02b4\u015b\2\u0999\u099a",
    "\5\u0170\u00b9\2\u099a\u099b\5\u02b4\u015b\2\u099b\u099d\3\2\2\2\u099c",
    "\u0997\3\2\2\2\u099c\u0998\3\2\2\2\u099d\u016f\3\2\2\2\u099e\u09b5\7",
    "\u00ac\2\2\u099f\u09b5\7\u0099\2\2\u09a0\u09b5\7g\2\2\u09a1\u09b5\7",
    "`\2\2\u09a2\u09b5\7\67\2\2\u09a3\u09b5\7O\2\2\u09a4\u09b5\7\u0081\2",
    "\2\u09a5\u09b5\7G\2\2\u09a6\u09b5\7l\2\2\u09a7\u09b5\7\177\2\2\u09a8",
    "\u09b5\7c\2\2\u09a9\u09b5\7L\2\2\u09aa\u09b5\7P\2\2\u09ab\u09b5\7\u00a4",
    "\2\2\u09ac\u09b5\7\u00a5\2\2\u09ad\u09b5\7\u0099\2\2\u09ae\u09b5\7\u0098",
    "\2\2\u09af\u09b5\7H\2\2\u09b0\u09b1\5\u02b4\u015b\2\u09b1\u09b2\t\5",
    "\2\2\u09b2\u09b3\5\u02b4\u015b\2\u09b3\u09b5\3\2\2\2\u09b4\u099e\3\2",
    "\2\2\u09b4\u099f\3\2\2\2\u09b4\u09a0\3\2\2\2\u09b4\u09a1\3\2\2\2\u09b4",
    "\u09a2\3\2\2\2\u09b4\u09a3\3\2\2\2\u09b4\u09a4\3\2\2\2\u09b4\u09a5\3",
    "\2\2\2\u09b4\u09a6\3\2\2\2\u09b4\u09a7\3\2\2\2\u09b4\u09a8\3\2\2\2\u09b4",
    "\u09a9\3\2\2\2\u09b4\u09aa\3\2\2\2\u09b4\u09ab\3\2\2\2\u09b4\u09ac\3",
    "\2\2\2\u09b4\u09ad\3\2\2\2\u09b4\u09ae\3\2\2\2\u09b4\u09af\3\2\2\2\u09b4",
    "\u09b0\3\2\2\2\u09b5\u0171\3\2\2\2\u09b6\u09b9\5\u0176\u00bc\2\u09b7",
    "\u09b9\5\u0174\u00bb\2\u09b8\u09b6\3\2\2\2\u09b8\u09b7\3\2\2\2\u09b9",
    "\u0173\3\2\2\2\u09ba\u09bd\5\u0270\u0139\2\u09bb\u09be\5\u0292\u014a",
    "\2\u09bc\u09be\b\u00bb\1\2\u09bd\u09bb\3\2\2\2\u09bd\u09bc\3\2\2\2\u09be",
    "\u09d4\3\2\2\2\u09bf\u09c2\5\u027c\u013f\2\u09c0\u09c3\5\u0292\u014a",
    "\2\u09c1\u09c3\b\u00bb\1\2\u09c2\u09c0\3\2\2\2\u09c2\u09c1\3\2\2\2\u09c3",
    "\u09d4\3\2\2\2\u09c4\u09c7\5\u0276\u013c\2\u09c5\u09c8\5\u0292\u014a",
    "\2\u09c6\u09c8\b\u00bb\1\2\u09c7\u09c5\3\2\2\2\u09c7\u09c6\3\2\2\2\u09c8",
    "\u09d4\3\2\2\2\u09c9\u09cc\5\u0278\u013d\2\u09ca\u09cd\5\u0292\u014a",
    "\2\u09cb\u09cd\b\u00bb\1\2\u09cc\u09ca\3\2\2\2\u09cc\u09cb\3\2\2\2\u09cd",
    "\u09d4\3\2\2\2\u09ce\u09d1\5\u0288\u0145\2\u09cf\u09d2\5\u0292\u014a",
    "\2\u09d0\u09d2\b\u00bb\1\2\u09d1\u09cf\3\2\2\2\u09d1\u09d0\3\2\2\2\u09d2",
    "\u09d4\3\2\2\2\u09d3\u09ba\3\2\2\2\u09d3\u09bf\3\2\2\2\u09d3\u09c4\3",
    "\2\2\2\u09d3\u09c9\3\2\2\2\u09d3\u09ce\3\2\2\2\u09d4\u0175\3\2\2\2\u09d5",
    "\u09eb\5\u025e\u0130\2\u09d6\u09eb\5\u0260\u0131\2\u09d7\u09eb\5\u0262",
    "\u0132\2\u09d8\u09eb\5\u0264\u0133\2\u09d9\u09eb\5\u0266\u0134\2\u09da",
    "\u09eb\5\u0268\u0135\2\u09db\u09eb\5\u026a\u0136\2\u09dc\u09eb\5\u026c",
    "\u0137\2\u09dd\u09eb\5\u026e\u0138\2\u09de\u09eb\5\u0272\u013a\2\u09df",
    "\u09eb\5\u0274\u013b\2\u09e0\u09eb\5\u027a\u013e\2\u09e1\u09eb\5\u027e",
    "\u0140\2\u09e2\u09eb\5\u0280\u0141\2\u09e3\u09eb\5\u0282\u0142\2\u09e4",
    "\u09eb\5\u0284\u0143\2\u09e5\u09eb\5\u0286\u0144\2\u09e6\u09eb\5\u028c",
    "\u0147\2\u09e7\u09eb\5\u028e\u0148\2\u09e8\u09eb\5\u0290\u0149\2\u09e9",
    "\u09eb\5\u028a\u0146\2\u09ea\u09d5\3\2\2\2\u09ea\u09d6\3\2\2\2\u09ea",
    "\u09d7\3\2\2\2\u09ea\u09d8\3\2\2\2\u09ea\u09d9\3\2\2\2\u09ea\u09da\3",
    "\2\2\2\u09ea\u09db\3\2\2\2\u09ea\u09dc\3\2\2\2\u09ea\u09dd\3\2\2\2\u09ea",
    "\u09de\3\2\2\2\u09ea\u09df\3\2\2\2\u09ea\u09e0\3\2\2\2\u09ea\u09e1\3",
    "\2\2\2\u09ea\u09e2\3\2\2\2\u09ea\u09e3\3\2\2\2\u09ea\u09e4\3\2\2\2\u09ea",
    "\u09e5\3\2\2\2\u09ea\u09e6\3\2\2\2\u09ea\u09e7\3\2\2\2\u09ea\u09e8\3",
    "\2\2\2\u09ea\u09e9\3\2\2\2\u09eb\u0177\3\2\2\2\u09ec\u09ef\5\u01ac\u00d7",
    "\2\u09ed\u09ef\5\u01c4\u00e3\2\u09ee\u09ec\3\2\2\2\u09ee\u09ed\3\2\2",
    "\2\u09ef\u0179\3\2\2\2\u09f0\u09f1\7\u00ac\2\2\u09f1\u017b\3\2\2\2\u09f2",
    "\u09f3\7\u00ac\2\2\u09f3\u017d\3\2\2\2\u09f4\u09f5\5\u0144\u00a3\2\u09f5",
    "\u017f\3\2\2\2\u09f6\u09f7\7\u00ac\2\2\u09f7\u0181\3\2\2\2\u09f8\u0a0e",
    "\7\u00ac\2\2\u09f9\u09fa\7\f\2\2\u09fa\u09fb\7\u00ac\2\2\u09fb\u0a0e",
    "\7\f\2\2\u09fc\u0a0e\7\u0099\2\2\u09fd\u0a0e\7g\2\2\u09fe\u0a0e\7`\2",
    "\2\u09ff\u0a0e\7\67\2\2\u0a00\u0a0e\7O\2\2\u0a01\u0a0e\7\u0081\2\2\u0a02",
    "\u0a0e\7G\2\2\u0a03\u0a0e\7l\2\2\u0a04\u0a0e\7\177\2\2\u0a05\u0a0e\7",
    "c\2\2\u0a06\u0a0e\7L\2\2\u0a07\u0a0e\7P\2\2\u0a08\u0a0e\7\u00a4\2\2",
    "\u0a09\u0a0e\7\u00a5\2\2\u0a0a\u0a0e\7\u0099\2\2\u0a0b\u0a0e\7\u0098",
    "\2\2\u0a0c\u0a0e\7H\2\2\u0a0d\u09f8\3\2\2\2\u0a0d\u09f9\3\2\2\2\u0a0d",
    "\u09fc\3\2\2\2\u0a0d\u09fd\3\2\2\2\u0a0d\u09fe\3\2\2\2\u0a0d\u09ff\3",
    "\2\2\2\u0a0d\u0a00\3\2\2\2\u0a0d\u0a01\3\2\2\2\u0a0d\u0a02\3\2\2\2\u0a0d",
    "\u0a03\3\2\2\2\u0a0d\u0a04\3\2\2\2\u0a0d\u0a05\3\2\2\2\u0a0d\u0a06\3",
    "\2\2\2\u0a0d\u0a07\3\2\2\2\u0a0d\u0a08\3\2\2\2\u0a0d\u0a09\3\2\2\2\u0a0d",
    "\u0a0a\3\2\2\2\u0a0d\u0a0b\3\2\2\2\u0a0d\u0a0c\3\2\2\2\u0a0e\u0183\3",
    "\2\2\2\u0a0f\u0a10\7\u00ac\2\2\u0a10\u0185\3\2\2\2\u0a11\u0a12\7\u00ac",
    "\2\2\u0a12\u0187\3\2\2\2\u0a13\u0a14\7\u00ac\2\2\u0a14\u0189\3\2\2\2",
    "\u0a15\u0a16\5\u0144\u00a3\2\u0a16\u018b\3\2\2\2\u0a17\u0a18\7\u00ac",
    "\2\2\u0a18\u018d\3\2\2\2\u0a19\u0a1a\5\u0190\u00c9\2\u0a1a\u0a1b\5\u0172",
    "\u00ba\2\u0a1b\u018f\3\2\2\2\u0a1c\u0a1d\t\5\2\2\u0a1d\u0191\3\2\2\2",
    "\u0a1e\u0a1f\7\31\2\2\u0a1f\u0193\3\2\2\2\u0a20\u0a21\7\32\2\2\u0a21",
    "\u0195\3\2\2\2\u0a22\u0a23\7\33\2\2\u0a23\u0197\3\2\2\2\u0a24\u0a25",
    "\7\36\2\2\u0a25\u0199\3\2\2\2\u0a26\u0a27\7\35\2\2\u0a27\u019b\3\2\2",
    "\2\u0a28\u0a29\7\34\2\2\u0a29\u019d\3\2\2\2\u0a2a\u0a2b\7\33\2\2\u0a2b",
    "\u0a2c\7g\2\2\u0a2c\u019f\3\2\2\2\u0a2d\u0a2e\7\37\2\2\u0a2e\u01a1\3",
    "\2\2\2\u0a2f\u0a30\7\37\2\2\u0a30\u0a31\7=\2\2\u0a31\u01a3\3\2\2\2\u0a32",
    "\u0a33\7 \2\2\u0a33\u01a5\3\2\2\2\u0a34\u0a35\7!\2\2\u0a35\u01a7\3\2",
    "\2\2\u0a36\u0a37\7#\2\2\u0a37\u01a9\3\2\2\2\u0a38\u0a39\7$\2\2\u0a39",
    "\u01ab\3\2\2\2\u0a3a\u0a3b\7%\2\2\u0a3b\u01ad\3\2\2\2\u0a3c\u0a3d\7",
    "&\2\2\u0a3d\u01af\3\2\2\2\u0a3e\u0a3f\7\'\2\2\u0a3f\u01b1\3\2\2\2\u0a40",
    "\u0a41\7(\2\2\u0a41\u01b3\3\2\2\2\u0a42\u0a43\7)\2\2\u0a43\u01b5\3\2",
    "\2\2\u0a44\u0a45\7*\2\2\u0a45\u01b7\3\2\2\2\u0a46\u0a47\7+\2\2\u0a47",
    "\u01b9\3\2\2\2\u0a48\u0a49\7-\2\2\u0a49\u01bb\3\2\2\2\u0a4a\u0a4b\7",
    "/\2\2\u0a4b\u01bd\3\2\2\2\u0a4c\u0a4d\7/\2\2\u0a4d\u0a4e\7L\2\2\u0a4e",
    "\u01bf\3\2\2\2\u0a4f\u0a50\7\60\2\2\u0a50\u01c1\3\2\2\2\u0a51\u0a52",
    "\7\62\2\2\u0a52\u01c3\3\2\2\2\u0a53\u0a54\7\63\2\2\u0a54\u01c5\3\2\2",
    "\2\u0a55\u0a56\7\64\2\2\u0a56\u01c7\3\2\2\2\u0a57\u0a58\7\65\2\2\u0a58",
    "\u01c9\3\2\2\2\u0a59\u0a5a\7\66\2\2\u0a5a\u01cb\3\2\2\2\u0a5b\u0a5c",
    "\7\67\2\2\u0a5c\u01cd\3\2\2\2\u0a5d\u0a5e\79\2\2\u0a5e\u01cf\3\2\2\2",
    "\u0a5f\u0a60\7:\2\2\u0a60\u01d1\3\2\2\2\u0a61\u0a62\7;\2\2\u0a62\u01d3",
    "\3\2\2\2\u0a63\u0a64\7=\2\2\u0a64\u01d5\3\2\2\2\u0a65\u0a66\7>\2\2\u0a66",
    "\u01d7\3\2\2\2\u0a67\u0a68\7?\2\2\u0a68\u01d9\3\2\2\2\u0a69\u0a6a\7",
    "@\2\2\u0a6a\u01db\3\2\2\2\u0a6b\u0a6c\7A\2\2\u0a6c\u01dd\3\2\2\2\u0a6d",
    "\u0a6e\7B\2\2\u0a6e\u01df\3\2\2\2\u0a6f\u0a70\7C\2\2\u0a70\u01e1\3\2",
    "\2\2\u0a71\u0a72\7D\2\2\u0a72\u01e3\3\2\2\2\u0a73\u0a74\7E\2\2\u0a74",
    "\u01e5\3\2\2\2\u0a75\u0a76\7G\2\2\u0a76\u01e7\3\2\2\2\u0a77\u0a78\7",
    "H\2\2\u0a78\u01e9\3\2\2\2\u0a79\u0a7a\7I\2\2\u0a7a\u0a7b\7J\2\2\u0a7b",
    "\u01eb\3\2\2\2\u0a7c\u0a7d\7K\2\2\u0a7d\u01ed\3\2\2\2\u0a7e\u0a7f\7",
    "L\2\2\u0a7f\u01ef\3\2\2\2\u0a80\u0a81\7M\2\2\u0a81\u01f1\3\2\2\2\u0a82",
    "\u0a83\7N\2\2\u0a83\u01f3\3\2\2\2\u0a84\u0a85\7O\2\2\u0a85\u01f5\3\2",
    "\2\2\u0a86\u0a87\7Q\2\2\u0a87\u01f7\3\2\2\2\u0a88\u0a89\7\u0097\2\2",
    "\u0a89\u01f9\3\2\2\2\u0a8a\u0a8b\7\u0097\2\2\u0a8b\u0a8c\7\u0098\2\2",
    "\u0a8c\u01fb\3\2\2\2\u0a8d\u0a8e\7\u0097\2\2\u0a8e\u0a8f\7\u00a4\2\2",
    "\u0a8f\u01fd\3\2\2\2\u0a90\u0a91\7T\2\2\u0a91\u01ff\3\2\2\2\u0a92\u0a93",
    "\7U\2\2\u0a93\u0201\3\2\2\2\u0a94\u0a95\7V\2\2\u0a95\u0a96\7\u0087\2",
    "\2\u0a96\u0203\3\2\2\2\u0a97\u0a98\7W\2\2\u0a98\u0205\3\2\2\2\u0a99",
    "\u0a9a\7Z\2\2\u0a9a\u0207\3\2\2\2\u0a9b\u0a9c\7Y\2\2\u0a9c\u0209\3\2",
    "\2\2\u0a9d\u0a9e\7[\2\2\u0a9e\u020b\3\2\2\2\u0a9f\u0aa0\7\\\2\2\u0aa0",
    "\u020d\3\2\2\2\u0aa1\u0aa2\7]\2\2\u0aa2\u020f\3\2\2\2\u0aa3\u0aa4\7",
    "^\2\2\u0aa4\u0211\3\2\2\2\u0aa5\u0aa6\7`\2\2\u0aa6\u0213\3\2\2\2\u0aa7",
    "\u0aa8\7a\2\2\u0aa8\u0215\3\2\2\2\u0aa9\u0aaa\7b\2\2\u0aaa\u0217\3\2",
    "\2\2\u0aab\u0aac\7b\2\2\u0aac\u0aad\7)\2\2\u0aad\u0219\3\2\2\2\u0aae",
    "\u0aaf\7c\2\2\u0aaf\u021b\3\2\2\2\u0ab0\u0ab1\7d\2\2\u0ab1\u021d\3\2",
    "\2\2\u0ab2\u0ab3\7g\2\2\u0ab3\u021f\3\2\2\2\u0ab4\u0ab5\7h\2\2\u0ab5",
    "\u0221\3\2\2\2\u0ab6\u0ab7\7j\2\2\u0ab7\u0223\3\2\2\2\u0ab8\u0ab9\7",
    "k\2\2\u0ab9\u0225\3\2\2\2\u0aba\u0abb\7l\2\2\u0abb\u0227\3\2\2\2\u0abc",
    "\u0abd\7m\2\2\u0abd\u0229\3\2\2\2\u0abe\u0abf\7\u0099\2\2\u0abf\u022b",
    "\3\2\2\2\u0ac0\u0ac1\7p\2\2\u0ac1\u022d\3\2\2\2\u0ac2\u0ac3\7q\2\2\u0ac3",
    "\u022f\3\2\2\2\u0ac4\u0ac5\7r\2\2\u0ac5\u0231\3\2\2\2\u0ac6\u0ac7\7",
    "s\2\2\u0ac7\u0233\3\2\2\2\u0ac8\u0ac9\7t\2\2\u0ac9\u0235\3\2\2\2\u0aca",
    "\u0acb\7u\2\2\u0acb\u0237\3\2\2\2\u0acc\u0acd\7v\2\2\u0acd\u0239\3\2",
    "\2\2\u0ace\u0acf\7w\2\2\u0acf\u023b\3\2\2\2\u0ad0\u0ad1\7y\2\2\u0ad1",
    "\u023d\3\2\2\2\u0ad2\u0ad3\7z\2\2\u0ad3\u023f\3\2\2\2\u0ad4\u0ad5\7",
    "{\2\2\u0ad5\u0241\3\2\2\2\u0ad6\u0ad7\7|\2\2\u0ad7\u0243\3\2\2\2\u0ad8",
    "\u0ad9\7~\2\2\u0ad9\u0245\3\2\2\2\u0ada\u0adb\7\177\2\2\u0adb\u0247",
    "\3\2\2\2\u0adc\u0add\7\u0081\2\2\u0add\u0249\3\2\2\2\u0ade\u0adf\7\u0082",
    "\2\2\u0adf\u024b\3\2\2\2\u0ae0\u0ae1\7\u0083\2\2\u0ae1\u024d\3\2\2\2",
    "\u0ae2\u0ae3\7\u0084\2\2\u0ae3\u024f\3\2\2\2\u0ae4\u0ae5\7\u00a5\2\2",
    "\u0ae5\u0251\3\2\2\2\u0ae6\u0ae7\7\u00a4\2\2\u0ae7\u0253\3\2\2\2\u0ae8",
    "\u0ae9\7\u0085\2\2\u0ae9\u0255\3\2\2\2\u0aea\u0aeb\7\u0086\2\2\u0aeb",
    "\u0257\3\2\2\2\u0aec\u0aed\7\u0088\2\2\u0aed\u0259\3\2\2\2\u0aee\u0aef",
    "\7\u0089\2\2\u0aef\u025b\3\2\2\2\u0af0\u0af1\7n\2\2\u0af1\u025d\3\2",
    "\2\2\u0af2\u0af3\7\u008b\2\2\u0af3\u025f\3\2\2\2\u0af4\u0af5\7\u008c",
    "\2\2\u0af5\u0261\3\2\2\2\u0af6\u0af7\7\u008d\2\2\u0af7\u0263\3\2\2\2",
    "\u0af8\u0af9\7\u008e\2\2\u0af9\u0265\3\2\2\2\u0afa\u0afb\7\u008f\2\2",
    "\u0afb\u0267\3\2\2\2\u0afc\u0afd\7\u0090\2\2\u0afd\u0269\3\2\2\2\u0afe",
    "\u0aff\7\u0091\2\2\u0aff\u026b\3\2\2\2\u0b00\u0b01\7\u0092\2\2\u0b01",
    "\u026d\3\2\2\2\u0b02\u0b03\7\u0093\2\2\u0b03\u026f\3\2\2\2\u0b04\u0b05",
    "\7\u0094\2\2\u0b05\u0271\3\2\2\2\u0b06\u0b07\7\u0095\2\2\u0b07\u0273",
    "\3\2\2\2\u0b08\u0b09\7\u0096\2\2\u0b09\u0275\3\2\2\2\u0b0a\u0b0b\7\u0097",
    "\2\2\u0b0b\u0277\3\2\2\2\u0b0c\u0b0d\7\u009a\2\2\u0b0d\u0279\3\2\2\2",
    "\u0b0e\u0b0f\7\u009b\2\2\u0b0f\u027b\3\2\2\2\u0b10\u0b11\7q\2\2\u0b11",
    "\u027d\3\2\2\2\u0b12\u0b13\7\u009c\2\2\u0b13\u027f\3\2\2\2\u0b14\u0b15",
    "\7\u009e\2\2\u0b15\u0281\3\2\2\2\u0b16\u0b17\7\u009d\2\2\u0b17\u0283",
    "\3\2\2\2\u0b18\u0b19\7y\2\2\u0b19\u0285\3\2\2\2\u0b1a\u0b1b\7\u009f",
    "\2\2\u0b1b\u0287\3\2\2\2\u0b1c\u0b1d\7\u00a0\2\2\u0b1d\u0289\3\2\2\2",
    "\u0b1e\u0b1f\7\u00ac\2\2\u0b1f\u028b\3\2\2\2\u0b20\u0b21\7\u00a1\2\2",
    "\u0b21\u028d\3\2\2\2\u0b22\u0b23\7\u00a2\2\2\u0b23\u028f\3\2\2\2\u0b24",
    "\u0b25\7\u00a3\2\2\u0b25\u0291\3\2\2\2\u0b26\u0b27\5\u02a2\u0152\2\u0b27",
    "\u0b2d\5\u0172\u00ba\2\u0b28\u0b29\5\u02aa\u0156\2\u0b29\u0b2a\5\u0172",
    "\u00ba\2\u0b2a\u0b2c\3\2\2\2\u0b2b\u0b28\3\2\2\2\u0b2c\u0b2f\3\2\2\2",
    "\u0b2d\u0b2b\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b30\3\2\2\2\u0b2f\u0b2d",
    "\3\2\2\2\u0b30\u0b31\5\u02a4\u0153\2\u0b31\u0293\3\2\2\2\u0b32\u0b33",
    "\7\23\2\2\u0b33\u0295\3\2\2\2\u0b34\u0b35\7\22\2\2\u0b35\u0297\3\2\2",
    "\2\u0b36\u0b37\7\2\2\3\u0b37\u0299\3\2\2\2\u0b38\u0b39\7\3\2\2\u0b39",
    "\u029b\3\2\2\2\u0b3a\u0b3b\7\4\2\2\u0b3b\u029d\3\2\2\2\u0b3c\u0b3d\7",
    "\5\2\2\u0b3d\u029f\3\2\2\2\u0b3e\u0b3f\7\6\2\2\u0b3f\u02a1\3\2\2\2\u0b40",
    "\u0b41\7\u00af\2\2\u0b41\u02a3\3\2\2\2\u0b42\u0b43\7\u00b0\2\2\u0b43",
    "\u02a5\3\2\2\2\u0b44\u0b45\7\7\2\2\u0b45\u02a7\3\2\2\2\u0b46\u0b47\7",
    "\b\2\2\u0b47\u02a9\3\2\2\2\u0b48\u0b49\7\t\2\2\u0b49\u02ab\3\2\2\2\u0b4a",
    "\u0b4b\7\13\2\2\u0b4b\u02ad\3\2\2\2\u0b4c\u0b4d\7\26\2\2\u0b4d\u02af",
    "\3\2\2\2\u0b4e\u0b4f\7\30\2\2\u0b4f\u02b1\3\2\2\2\u0b50\u0b51\7\r\2",
    "\2\u0b51\u02b3\3\2\2\2\u0b52\u0b53\7\f\2\2\u0b53\u02b5\3\2\2\2\u0b54",
    "\u0b55\7\u00ae\2\2\u0b55\u02b7\3\2\2\2\u0b56\u0b57\7\u00af\2\2\u0b57",
    "\u02b9\3\2\2\2\u0b58\u0b59\7\u00b0\2\2\u0b59\u02bb\3\2\2\2\u0b5a\u0b5b",
    "\7\u00b1\2\2\u0b5b\u02bd\3\2\2\2\u0b5c\u0b5d\7\u00b2\2\2\u0b5d\u02bf",
    "\3\2\2\2\u00dc\u02c1\u02c4\u02ca\u02cf\u02d1\u02d6\u02d9\u02dc\u0308",
    "\u0317\u031a\u0321\u0326\u0331\u033b\u0347\u0350\u0357\u035c\u0364\u0369",
    "\u036d\u0372\u0381\u0387\u0390\u039d\u03a4\u03ac\u03be\u03c3\u03cf\u03d3",
    "\u03d7\u03dc\u03ef\u03f6\u03fe\u0402\u0415\u041e\u042d\u042f\u043b\u0449",
    "\u0450\u0458\u045b\u045e\u0469\u0479\u048d\u04a4\u04b2\u04b9\u04c2\u04d5",
    "\u04dd\u04e2\u04e9\u04f0\u04f7\u04fe\u0505\u050e\u0515\u051c\u0523\u052a",
    "\u052f\u0536\u053d\u0541\u0546\u0548\u0554\u055b\u0563\u056e\u0574\u057d",
    "\u058a\u0592\u0598\u05a6\u05ae\u05b9\u05cb\u05d3\u05dc\u05eb\u05ef\u05f3",
    "\u05f7\u0605\u060d\u0616\u0621\u0628\u062b\u0634\u0638\u063f\u0646\u064c",
    "\u0654\u065c\u0662\u0666\u066a\u066e\u0676\u067e\u0682\u0687\u068c\u0690",
    "\u069b\u06a9\u06ad\u06b3\u06ba\u06c3\u06cc\u06d5\u06de\u06e7\u06f0\u06fc",
    "\u0705\u0715\u0721\u072c\u072f\u0741\u0758\u075b\u0762\u0768\u076c\u0770",
    "\u0776\u077a\u077e\u0786\u078b\u078e\u0792\u0797\u079a\u079d\u07a0\u07a5",
    "\u07ab\u07b3\u07b6\u07c2\u07c6\u07cd\u07d3\u07d6\u07de\u07e7\u07ed\u07f3",
    "\u07fa\u0801\u0805\u0809\u080c\u0816\u081f\u0822\u0827\u082d\u0831\u083b",
    "\u0842\u084c\u0855\u0861\u086d\u0879\u08a6\u08bc\u08d3\u08df\u08eb\u08f7",
    "\u0903\u090d\u0919\u091f\u092b\u0935\u0941\u0947\u0953\u095f\u0964\u0970",
    "\u097a\u0986\u098c\u0993\u099c\u09b4\u09b8\u09bd\u09c2\u09c7\u09cc\u09d1",
    "\u09d3\u09ea\u09ee\u0a0d\u0b2d"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
                     "';'", "':'", "'\"'", "'''", 'null', 'null', 'null', 
                     'null', "'.'", "'*'", "'/'", "'%'", "'+'", "'--'", 
                     "'-'" ];

var symbolicNames = [ 'null', "LR_BRACKET", "RR_BRACKET", "LC_BRACKET", 
                      "RC_BRACKET", "LS_BRACKET", "RS_BRACKET", "COMMA", 
                      "SEMI", "COLON", "DQUOTE", "SQUOTE", "SPACE", "SPEC_CQL_COMMENT", 
                      "COMMENT_INPUT", "LINE_COMMENT", "DOT", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUSMINUS", "MINUS", "K_ADD", 
                      "K_AGGREGATE", "K_ALL", "K_ALL_ROLES", "K_ALL_KEYSPACES", 
                      "K_ALL_FUNCTIONS", "K_ALLOW", "K_ALTER", "K_AND", 
                      "K_ANY", "K_APPLY", "K_AS", "K_ASC", "K_AUTHORIZE", 
                      "K_BATCH", "K_BEGIN", "K_BY", "K_CALLED", "K_CLUSTERING", 
                      "K_COLUMNFAMILY", "K_COMPACT", "K_CONSISTENCY", "K_CONTAINS", 
                      "K_CREATE", "K_CUSTOM", "K_DELETE", "K_DESC", "K_DESCRIBE", 
                      "K_DISTINCT", "K_DROP", "K_DURABLE_WRITES", "K_EACH_QUORUM", 
                      "K_ENTRIES", "K_EXECUTE", "K_EXISTS", "K_FALSE", "K_FILTERING", 
                      "K_FINALFUNC", "K_FROM", "K_FULL", "K_FUNCTION", "K_GRANT", 
                      "K_IF", "K_IN", "K_INDEX", "K_INFINITY", "K_INITCOND", 
                      "K_INPUT", "K_INSERT", "K_INTO", "K_IS", "K_KEY", 
                      "K_KEYS", "K_KEYSPACE", "K_LANGUAGE", "K_LEVEL", "K_LIMIT", 
                      "K_LOCAL_ONE", "K_LOCAL_QUORUM", "K_LOGGED", "K_LOGIN", 
                      "K_MATERIALIZED", "K_MODIFY", "K_NAN", "K_NORECURSIVE", 
                      "K_NOSUPERUSER", "K_NOT", "K_NULL", "K_OF", "K_ON", 
                      "K_ONE", "K_OPTIONS", "K_OR", "K_ORDER", "K_PARTITION", 
                      "K_PASSWORD", "K_PER", "K_PERMISSION", "K_PERMISSIONS", 
                      "K_PRIMARY", "K_QUORUM", "K_RENAME", "K_REPLACE", 
                      "K_REPLICATION", "K_RETURNS", "K_REVOKE", "K_SCHEMA", 
                      "K_SELECT", "K_SET", "K_SFUNC", "K_STATIC", "K_STORAGE", 
                      "K_STYPE", "K_SUPERUSER", "K_TABLE", "K_THREE", "K_TIMESTAMP", 
                      "K_TO", "K_TOKEN", "K_TRIGGER", "K_TRUE", "K_TRUNCATE", 
                      "K_TTL", "K_TWO", "K_TYPE", "K_UNLOGGED", "K_UPDATE", 
                      "K_USE", "K_USING", "K_VALUES", "K_VIEW", "K_WHERE", 
                      "K_WITH", "K_WRITETIME", "K_ASCII", "K_BIGINT", "K_BLOB", 
                      "K_BOOLEAN", "K_COUNTER", "K_DATE", "K_DECIMAL", "K_DOUBLE", 
                      "K_FLOAT", "K_FROZEN", "K_INET", "K_INT", "K_LIST", 
                      "K_ROLES", "K_ROLE", "K_MAP", "K_SMALLINT", "K_TEXT", 
                      "K_TIMEUUID", "K_TIME", "K_TINYINT", "K_TUPLE", "K_UUID", 
                      "K_VARCHAR", "K_VARINT", "K_USERS", "K_USER", "CODE_BLOCK", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "FLOAT_LITERAL", 
                      "HEXADECIMAL_LITERAL", "REAL_LITERAL", "OBJECT_NAME", 
                      "UUID", "OPERATOR_EQ", "OPERATOR_LT", "OPERATOR_GT", 
                      "OPERATOR_LTE", "OPERATOR_GTE" ];

var ruleNames =  [ "root", "cqls", "statementSeparator", "empty", "cql", 
                   "revoke", "listUsers", "listRoles", "listPermissions", 
                   "grant", "priviledge", "resource", "createUser", "createRole", 
                   "createType", "typeMemberColumnList", "createTrigger", 
                   "createMaterializedView", "materializedViewWhere", "columnNotNullList", 
                   "columnNotNull", "materializedViewOptions", "createKeyspace", 
                   "createFunction", "codeBlock", "paramList", "returnMode", 
                   "createAggregate", "initCondDefinition", "initCondHash", 
                   "initCondHashItem", "initCondListNested", "initCondList", 
                   "orReplace", "alterUser", "userPassword", "userSuperUser", 
                   "alterType", "alterTypeOperation", "alterTypeRename", 
                   "alterTypeRenameList", "alterTypeRenameItem", "alterTypeAdd", 
                   "alterTypeAlterType", "alterTable", "alterTableOperation", 
                   "alterTableWith", "alterTableRename", "alterTableDropCompactStorage", 
                   "alterTableDropColumns", "alterTableDropColumnList", 
                   "alterTableAdd", "alterTableColumnDefinition", "alterRole", 
                   "roleWith", "roleWithOptions", "alterMaterializedView", 
                   "dropUser", "dropType", "dropMaterializedView", "dropAggregate", 
                   "dropFunction", "dropTrigger", "dropRole", "dropTable", 
                   "dropKeyspace", "dropIndex", "createTable", "createTableDef", 
                   "withElement", "clusteringOrder", "clusteringOrderItem", 
                   "tableOptions", "tableOptionItem", "tableOptionName", 
                   "tableOptionValue", "optionHash", "optionHashItem", "optionHashKey", 
                   "optionHashValue", "columnDefinitionList", "columnDefinition", 
                   "primaryKeyModifier", "primaryKeyElement", "primaryKeyDefinition", 
                   "primaryKeySimple", "primaryKeyComposite", "compoundKey", 
                   "partitionKeyList", "clusteringKeyList", "applyBatch", 
                   "beginBatch", "beginBatchSpec", "batchType", "alterKeyspace", 
                   "replicationList", "replicationListItem", "durableWrites", 
                   "use", "truncate", "createIndex", "createIndexSubject", 
                   "index", "createIndexDef", "createIndexTarget", "indexKeysSpec", 
                   "indexEntriesSSpec", "indexFullSpec", "delete", "deleteColumnList", 
                   "deleteColumnItem", "update", "ifSpec", "ifConditionList", 
                   "ifCondition", "updateAssignments", "updateAssignmentElement", 
                   "assignmentSet", "assignmentMap", "assignmentList", "insert", 
                   "usingTtlTimestamp", "timestamp", "ttl", "usingTimestampSpec", 
                   "ifNotExist", "ifExist", "insertValuesSpec", "insertColumnSpec", 
                   "columnList", "baseColumnList", "expressionList", "expression", 
                   "select", "limitSpec", "fromSpec", "orderSpec", "orderSpecElement", 
                   "whereSpec", "selectElements", "selectElement", "relationElements", 
                   "relationElement", "relationElementConstant", "relationElementIn", 
                   "relationElementToken", "relationElementTokenSpec", "relationOperator", 
                   "functionCall", "functionArgs", "constant", "collectionElement", 
                   "collectionMapElement", "constantCollection", "constantMap", 
                   "constantSet", "constantList", "constantTuple", "constantUuid", 
                   "constantDecimal", "constantFloat", "constantString", 
                   "constantBoolean", "constantHexadecimal", "keyspace", 
                   "baseKeyspace", "table", "baseTable", "materializedView", 
                   "keyspaceObject", "objectUnknown", "aggregateSpec", "typeSpec", 
                   "functionSpec", "tableSpec", "baseTableSpec", "indexSpec", 
                   "materializedViewSpec", "tableOrMaterializedViewSpec", 
                   "objectUnknownSpec", "columnSpec", "column", "columnUnknownSpec", 
                   "columnUnknown", "dataType", "dataTypeCollection", "dataTypeFundamental", 
                   "orderDirection", "role", "trigger", "triggerClass", 
                   "type", "aggregate", "function", "language", "user", 
                   "password", "hashKey", "param", "paramName", "kwAdd", 
                   "kwAggregate", "kwAll", "kwAllFunctions", "kwAllKeyspaces", 
                   "kwAllRoles", "kwAllPermissions", "kwAllow", "kwAllowFiltering", 
                   "kwAlter", "kwAnd", "kwApply", "kwAs", "kwAsc", "kwAuthorize", 
                   "kwBatch", "kwBegin", "kwBy", "kwCalled", "kwClustering", 
                   "kwCompact", "kwContains", "kwContainsKey", "kwCreate", 
                   "kwDelete", "kwDesc", "kwDescibe", "kwDistinct", "kwDrop", 
                   "kwDurableWrites", "kwEntries", "kwExecute", "kwExists", 
                   "kwFiltering", "kwFinalfunc", "kwFrom", "kwFull", "kwFunction", 
                   "kwGrant", "kwIf", "kwIn", "kwIndex", "kwInitcond", "kwInput", 
                   "kwInsertInto", "kwIs", "kwKey", "kwKeys", "kwKeyspace", 
                   "kwLanguage", "kwLimit", "kwList", "kwListRoles", "kwListUsers", 
                   "kwLogged", "kwLogin", "kwMaterializedView", "kwModify", 
                   "kwNosuperuser", "kwNorecursive", "kwNot", "kwNull", 
                   "kwOf", "kwOn", "kwOptions", "kwOr", "kwOrder", "kwOrderBy", 
                   "kwPartition", "kwPassword", "kwPermissions", "kwPrimary", 
                   "kwRename", "kwReplace", "kwReplication", "kwReturns", 
                   "kwRole", "kwSelect", "kwSet", "kwSfunc", "kwStatic", 
                   "kwStorage", "kwStype", "kwSuperuser", "kwTable", "kwTimestamp", 
                   "kwTo", "kwToken", "kwTrigger", "kwTruncate", "kwTtl", 
                   "kwType", "kwUnlogged", "kwUpdate", "kwUse", "kwUser", 
                   "kwUsers", "kwUsing", "kwValues", "kwWhere", "kwWith", 
                   "kwRevoke", "dataTypeAscii", "dataTypeBigint", "dataTypeBlob", 
                   "dataTypeBoolean", "dataTypeCounter", "dataTypeDate", 
                   "dataTypeDecimal", "dataTypeDouble", "dataTypeFloat", 
                   "dataTypeFrozen", "dataTypeInet", "dataTypeInt", "dataTypeList", 
                   "dataTypeMap", "dataTypeSmallInt", "dataTypeSet", "dataTypeText", 
                   "dataTypeTime", "dataTypeTimeUuid", "dataTypeTimestamp", 
                   "dataTypeTinyInt", "dataTypeTuple", "dataTypeUserDefined", 
                   "dataTypeUuid", "dataTypeVarChar", "dataTypeVarInt", 
                   "dataTypeStructure", "specialStar", "specialDot", "eof", 
                   "syntaxBracketLr", "syntaxBracketRr", "syntaxBracketLc", 
                   "syntaxBracketRc", "syntaxBracketLa", "syntaxBracketRa", 
                   "syntaxBracketLs", "syntaxBracketRs", "syntaxComma", 
                   "syntaxColon", "syntaxPlus", "syntaxMinus", "syntaxSquote", 
                   "syntaxDquote", "syntaxOperatorEq", "syntaxOperatorLt", 
                   "syntaxOperatorGt", "syntaxOperatorLte", "syntaxOperatorGte" ];

function CqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CqlParser.prototype = Object.create(antlr4.Parser.prototype);
CqlParser.prototype.constructor = CqlParser;

Object.defineProperty(CqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CqlParser.EOF = antlr4.Token.EOF;
CqlParser.LR_BRACKET = 1;
CqlParser.RR_BRACKET = 2;
CqlParser.LC_BRACKET = 3;
CqlParser.RC_BRACKET = 4;
CqlParser.LS_BRACKET = 5;
CqlParser.RS_BRACKET = 6;
CqlParser.COMMA = 7;
CqlParser.SEMI = 8;
CqlParser.COLON = 9;
CqlParser.DQUOTE = 10;
CqlParser.SQUOTE = 11;
CqlParser.SPACE = 12;
CqlParser.SPEC_CQL_COMMENT = 13;
CqlParser.COMMENT_INPUT = 14;
CqlParser.LINE_COMMENT = 15;
CqlParser.DOT = 16;
CqlParser.STAR = 17;
CqlParser.DIVIDE = 18;
CqlParser.MODULE = 19;
CqlParser.PLUS = 20;
CqlParser.MINUSMINUS = 21;
CqlParser.MINUS = 22;
CqlParser.K_ADD = 23;
CqlParser.K_AGGREGATE = 24;
CqlParser.K_ALL = 25;
CqlParser.K_ALL_ROLES = 26;
CqlParser.K_ALL_KEYSPACES = 27;
CqlParser.K_ALL_FUNCTIONS = 28;
CqlParser.K_ALLOW = 29;
CqlParser.K_ALTER = 30;
CqlParser.K_AND = 31;
CqlParser.K_ANY = 32;
CqlParser.K_APPLY = 33;
CqlParser.K_AS = 34;
CqlParser.K_ASC = 35;
CqlParser.K_AUTHORIZE = 36;
CqlParser.K_BATCH = 37;
CqlParser.K_BEGIN = 38;
CqlParser.K_BY = 39;
CqlParser.K_CALLED = 40;
CqlParser.K_CLUSTERING = 41;
CqlParser.K_COLUMNFAMILY = 42;
CqlParser.K_COMPACT = 43;
CqlParser.K_CONSISTENCY = 44;
CqlParser.K_CONTAINS = 45;
CqlParser.K_CREATE = 46;
CqlParser.K_CUSTOM = 47;
CqlParser.K_DELETE = 48;
CqlParser.K_DESC = 49;
CqlParser.K_DESCRIBE = 50;
CqlParser.K_DISTINCT = 51;
CqlParser.K_DROP = 52;
CqlParser.K_DURABLE_WRITES = 53;
CqlParser.K_EACH_QUORUM = 54;
CqlParser.K_ENTRIES = 55;
CqlParser.K_EXECUTE = 56;
CqlParser.K_EXISTS = 57;
CqlParser.K_FALSE = 58;
CqlParser.K_FILTERING = 59;
CqlParser.K_FINALFUNC = 60;
CqlParser.K_FROM = 61;
CqlParser.K_FULL = 62;
CqlParser.K_FUNCTION = 63;
CqlParser.K_GRANT = 64;
CqlParser.K_IF = 65;
CqlParser.K_IN = 66;
CqlParser.K_INDEX = 67;
CqlParser.K_INFINITY = 68;
CqlParser.K_INITCOND = 69;
CqlParser.K_INPUT = 70;
CqlParser.K_INSERT = 71;
CqlParser.K_INTO = 72;
CqlParser.K_IS = 73;
CqlParser.K_KEY = 74;
CqlParser.K_KEYS = 75;
CqlParser.K_KEYSPACE = 76;
CqlParser.K_LANGUAGE = 77;
CqlParser.K_LEVEL = 78;
CqlParser.K_LIMIT = 79;
CqlParser.K_LOCAL_ONE = 80;
CqlParser.K_LOCAL_QUORUM = 81;
CqlParser.K_LOGGED = 82;
CqlParser.K_LOGIN = 83;
CqlParser.K_MATERIALIZED = 84;
CqlParser.K_MODIFY = 85;
CqlParser.K_NAN = 86;
CqlParser.K_NORECURSIVE = 87;
CqlParser.K_NOSUPERUSER = 88;
CqlParser.K_NOT = 89;
CqlParser.K_NULL = 90;
CqlParser.K_OF = 91;
CqlParser.K_ON = 92;
CqlParser.K_ONE = 93;
CqlParser.K_OPTIONS = 94;
CqlParser.K_OR = 95;
CqlParser.K_ORDER = 96;
CqlParser.K_PARTITION = 97;
CqlParser.K_PASSWORD = 98;
CqlParser.K_PER = 99;
CqlParser.K_PERMISSION = 100;
CqlParser.K_PERMISSIONS = 101;
CqlParser.K_PRIMARY = 102;
CqlParser.K_QUORUM = 103;
CqlParser.K_RENAME = 104;
CqlParser.K_REPLACE = 105;
CqlParser.K_REPLICATION = 106;
CqlParser.K_RETURNS = 107;
CqlParser.K_REVOKE = 108;
CqlParser.K_SCHEMA = 109;
CqlParser.K_SELECT = 110;
CqlParser.K_SET = 111;
CqlParser.K_SFUNC = 112;
CqlParser.K_STATIC = 113;
CqlParser.K_STORAGE = 114;
CqlParser.K_STYPE = 115;
CqlParser.K_SUPERUSER = 116;
CqlParser.K_TABLE = 117;
CqlParser.K_THREE = 118;
CqlParser.K_TIMESTAMP = 119;
CqlParser.K_TO = 120;
CqlParser.K_TOKEN = 121;
CqlParser.K_TRIGGER = 122;
CqlParser.K_TRUE = 123;
CqlParser.K_TRUNCATE = 124;
CqlParser.K_TTL = 125;
CqlParser.K_TWO = 126;
CqlParser.K_TYPE = 127;
CqlParser.K_UNLOGGED = 128;
CqlParser.K_UPDATE = 129;
CqlParser.K_USE = 130;
CqlParser.K_USING = 131;
CqlParser.K_VALUES = 132;
CqlParser.K_VIEW = 133;
CqlParser.K_WHERE = 134;
CqlParser.K_WITH = 135;
CqlParser.K_WRITETIME = 136;
CqlParser.K_ASCII = 137;
CqlParser.K_BIGINT = 138;
CqlParser.K_BLOB = 139;
CqlParser.K_BOOLEAN = 140;
CqlParser.K_COUNTER = 141;
CqlParser.K_DATE = 142;
CqlParser.K_DECIMAL = 143;
CqlParser.K_DOUBLE = 144;
CqlParser.K_FLOAT = 145;
CqlParser.K_FROZEN = 146;
CqlParser.K_INET = 147;
CqlParser.K_INT = 148;
CqlParser.K_LIST = 149;
CqlParser.K_ROLES = 150;
CqlParser.K_ROLE = 151;
CqlParser.K_MAP = 152;
CqlParser.K_SMALLINT = 153;
CqlParser.K_TEXT = 154;
CqlParser.K_TIMEUUID = 155;
CqlParser.K_TIME = 156;
CqlParser.K_TINYINT = 157;
CqlParser.K_TUPLE = 158;
CqlParser.K_UUID = 159;
CqlParser.K_VARCHAR = 160;
CqlParser.K_VARINT = 161;
CqlParser.K_USERS = 162;
CqlParser.K_USER = 163;
CqlParser.CODE_BLOCK = 164;
CqlParser.STRING_LITERAL = 165;
CqlParser.DECIMAL_LITERAL = 166;
CqlParser.FLOAT_LITERAL = 167;
CqlParser.HEXADECIMAL_LITERAL = 168;
CqlParser.REAL_LITERAL = 169;
CqlParser.OBJECT_NAME = 170;
CqlParser.UUID = 171;
CqlParser.OPERATOR_EQ = 172;
CqlParser.OPERATOR_LT = 173;
CqlParser.OPERATOR_GT = 174;
CqlParser.OPERATOR_LTE = 175;
CqlParser.OPERATOR_GTE = 176;

CqlParser.RULE_root = 0;
CqlParser.RULE_cqls = 1;
CqlParser.RULE_statementSeparator = 2;
CqlParser.RULE_empty = 3;
CqlParser.RULE_cql = 4;
CqlParser.RULE_revoke = 5;
CqlParser.RULE_listUsers = 6;
CqlParser.RULE_listRoles = 7;
CqlParser.RULE_listPermissions = 8;
CqlParser.RULE_grant = 9;
CqlParser.RULE_priviledge = 10;
CqlParser.RULE_resource = 11;
CqlParser.RULE_createUser = 12;
CqlParser.RULE_createRole = 13;
CqlParser.RULE_createType = 14;
CqlParser.RULE_typeMemberColumnList = 15;
CqlParser.RULE_createTrigger = 16;
CqlParser.RULE_createMaterializedView = 17;
CqlParser.RULE_materializedViewWhere = 18;
CqlParser.RULE_columnNotNullList = 19;
CqlParser.RULE_columnNotNull = 20;
CqlParser.RULE_materializedViewOptions = 21;
CqlParser.RULE_createKeyspace = 22;
CqlParser.RULE_createFunction = 23;
CqlParser.RULE_codeBlock = 24;
CqlParser.RULE_paramList = 25;
CqlParser.RULE_returnMode = 26;
CqlParser.RULE_createAggregate = 27;
CqlParser.RULE_initCondDefinition = 28;
CqlParser.RULE_initCondHash = 29;
CqlParser.RULE_initCondHashItem = 30;
CqlParser.RULE_initCondListNested = 31;
CqlParser.RULE_initCondList = 32;
CqlParser.RULE_orReplace = 33;
CqlParser.RULE_alterUser = 34;
CqlParser.RULE_userPassword = 35;
CqlParser.RULE_userSuperUser = 36;
CqlParser.RULE_alterType = 37;
CqlParser.RULE_alterTypeOperation = 38;
CqlParser.RULE_alterTypeRename = 39;
CqlParser.RULE_alterTypeRenameList = 40;
CqlParser.RULE_alterTypeRenameItem = 41;
CqlParser.RULE_alterTypeAdd = 42;
CqlParser.RULE_alterTypeAlterType = 43;
CqlParser.RULE_alterTable = 44;
CqlParser.RULE_alterTableOperation = 45;
CqlParser.RULE_alterTableWith = 46;
CqlParser.RULE_alterTableRename = 47;
CqlParser.RULE_alterTableDropCompactStorage = 48;
CqlParser.RULE_alterTableDropColumns = 49;
CqlParser.RULE_alterTableDropColumnList = 50;
CqlParser.RULE_alterTableAdd = 51;
CqlParser.RULE_alterTableColumnDefinition = 52;
CqlParser.RULE_alterRole = 53;
CqlParser.RULE_roleWith = 54;
CqlParser.RULE_roleWithOptions = 55;
CqlParser.RULE_alterMaterializedView = 56;
CqlParser.RULE_dropUser = 57;
CqlParser.RULE_dropType = 58;
CqlParser.RULE_dropMaterializedView = 59;
CqlParser.RULE_dropAggregate = 60;
CqlParser.RULE_dropFunction = 61;
CqlParser.RULE_dropTrigger = 62;
CqlParser.RULE_dropRole = 63;
CqlParser.RULE_dropTable = 64;
CqlParser.RULE_dropKeyspace = 65;
CqlParser.RULE_dropIndex = 66;
CqlParser.RULE_createTable = 67;
CqlParser.RULE_createTableDef = 68;
CqlParser.RULE_withElement = 69;
CqlParser.RULE_clusteringOrder = 70;
CqlParser.RULE_clusteringOrderItem = 71;
CqlParser.RULE_tableOptions = 72;
CqlParser.RULE_tableOptionItem = 73;
CqlParser.RULE_tableOptionName = 74;
CqlParser.RULE_tableOptionValue = 75;
CqlParser.RULE_optionHash = 76;
CqlParser.RULE_optionHashItem = 77;
CqlParser.RULE_optionHashKey = 78;
CqlParser.RULE_optionHashValue = 79;
CqlParser.RULE_columnDefinitionList = 80;
CqlParser.RULE_columnDefinition = 81;
CqlParser.RULE_primaryKeyModifier = 82;
CqlParser.RULE_primaryKeyElement = 83;
CqlParser.RULE_primaryKeyDefinition = 84;
CqlParser.RULE_primaryKeySimple = 85;
CqlParser.RULE_primaryKeyComposite = 86;
CqlParser.RULE_compoundKey = 87;
CqlParser.RULE_partitionKeyList = 88;
CqlParser.RULE_clusteringKeyList = 89;
CqlParser.RULE_applyBatch = 90;
CqlParser.RULE_beginBatch = 91;
CqlParser.RULE_beginBatchSpec = 92;
CqlParser.RULE_batchType = 93;
CqlParser.RULE_alterKeyspace = 94;
CqlParser.RULE_replicationList = 95;
CqlParser.RULE_replicationListItem = 96;
CqlParser.RULE_durableWrites = 97;
CqlParser.RULE_use = 98;
CqlParser.RULE_truncate = 99;
CqlParser.RULE_createIndex = 100;
CqlParser.RULE_createIndexSubject = 101;
CqlParser.RULE_index = 102;
CqlParser.RULE_createIndexDef = 103;
CqlParser.RULE_createIndexTarget = 104;
CqlParser.RULE_indexKeysSpec = 105;
CqlParser.RULE_indexEntriesSSpec = 106;
CqlParser.RULE_indexFullSpec = 107;
CqlParser.RULE_delete = 108;
CqlParser.RULE_deleteColumnList = 109;
CqlParser.RULE_deleteColumnItem = 110;
CqlParser.RULE_update = 111;
CqlParser.RULE_ifSpec = 112;
CqlParser.RULE_ifConditionList = 113;
CqlParser.RULE_ifCondition = 114;
CqlParser.RULE_updateAssignments = 115;
CqlParser.RULE_updateAssignmentElement = 116;
CqlParser.RULE_assignmentSet = 117;
CqlParser.RULE_assignmentMap = 118;
CqlParser.RULE_assignmentList = 119;
CqlParser.RULE_insert = 120;
CqlParser.RULE_usingTtlTimestamp = 121;
CqlParser.RULE_timestamp = 122;
CqlParser.RULE_ttl = 123;
CqlParser.RULE_usingTimestampSpec = 124;
CqlParser.RULE_ifNotExist = 125;
CqlParser.RULE_ifExist = 126;
CqlParser.RULE_insertValuesSpec = 127;
CqlParser.RULE_insertColumnSpec = 128;
CqlParser.RULE_columnList = 129;
CqlParser.RULE_baseColumnList = 130;
CqlParser.RULE_expressionList = 131;
CqlParser.RULE_expression = 132;
CqlParser.RULE_select = 133;
CqlParser.RULE_limitSpec = 134;
CqlParser.RULE_fromSpec = 135;
CqlParser.RULE_orderSpec = 136;
CqlParser.RULE_orderSpecElement = 137;
CqlParser.RULE_whereSpec = 138;
CqlParser.RULE_selectElements = 139;
CqlParser.RULE_selectElement = 140;
CqlParser.RULE_relationElements = 141;
CqlParser.RULE_relationElement = 142;
CqlParser.RULE_relationElementConstant = 143;
CqlParser.RULE_relationElementIn = 144;
CqlParser.RULE_relationElementToken = 145;
CqlParser.RULE_relationElementTokenSpec = 146;
CqlParser.RULE_relationOperator = 147;
CqlParser.RULE_functionCall = 148;
CqlParser.RULE_functionArgs = 149;
CqlParser.RULE_constant = 150;
CqlParser.RULE_collectionElement = 151;
CqlParser.RULE_collectionMapElement = 152;
CqlParser.RULE_constantCollection = 153;
CqlParser.RULE_constantMap = 154;
CqlParser.RULE_constantSet = 155;
CqlParser.RULE_constantList = 156;
CqlParser.RULE_constantTuple = 157;
CqlParser.RULE_constantUuid = 158;
CqlParser.RULE_constantDecimal = 159;
CqlParser.RULE_constantFloat = 160;
CqlParser.RULE_constantString = 161;
CqlParser.RULE_constantBoolean = 162;
CqlParser.RULE_constantHexadecimal = 163;
CqlParser.RULE_keyspace = 164;
CqlParser.RULE_baseKeyspace = 165;
CqlParser.RULE_table = 166;
CqlParser.RULE_baseTable = 167;
CqlParser.RULE_materializedView = 168;
CqlParser.RULE_keyspaceObject = 169;
CqlParser.RULE_objectUnknown = 170;
CqlParser.RULE_aggregateSpec = 171;
CqlParser.RULE_typeSpec = 172;
CqlParser.RULE_functionSpec = 173;
CqlParser.RULE_tableSpec = 174;
CqlParser.RULE_baseTableSpec = 175;
CqlParser.RULE_indexSpec = 176;
CqlParser.RULE_materializedViewSpec = 177;
CqlParser.RULE_tableOrMaterializedViewSpec = 178;
CqlParser.RULE_objectUnknownSpec = 179;
CqlParser.RULE_columnSpec = 180;
CqlParser.RULE_column = 181;
CqlParser.RULE_columnUnknownSpec = 182;
CqlParser.RULE_columnUnknown = 183;
CqlParser.RULE_dataType = 184;
CqlParser.RULE_dataTypeCollection = 185;
CqlParser.RULE_dataTypeFundamental = 186;
CqlParser.RULE_orderDirection = 187;
CqlParser.RULE_role = 188;
CqlParser.RULE_trigger = 189;
CqlParser.RULE_triggerClass = 190;
CqlParser.RULE_type = 191;
CqlParser.RULE_aggregate = 192;
CqlParser.RULE_function = 193;
CqlParser.RULE_language = 194;
CqlParser.RULE_user = 195;
CqlParser.RULE_password = 196;
CqlParser.RULE_hashKey = 197;
CqlParser.RULE_param = 198;
CqlParser.RULE_paramName = 199;
CqlParser.RULE_kwAdd = 200;
CqlParser.RULE_kwAggregate = 201;
CqlParser.RULE_kwAll = 202;
CqlParser.RULE_kwAllFunctions = 203;
CqlParser.RULE_kwAllKeyspaces = 204;
CqlParser.RULE_kwAllRoles = 205;
CqlParser.RULE_kwAllPermissions = 206;
CqlParser.RULE_kwAllow = 207;
CqlParser.RULE_kwAllowFiltering = 208;
CqlParser.RULE_kwAlter = 209;
CqlParser.RULE_kwAnd = 210;
CqlParser.RULE_kwApply = 211;
CqlParser.RULE_kwAs = 212;
CqlParser.RULE_kwAsc = 213;
CqlParser.RULE_kwAuthorize = 214;
CqlParser.RULE_kwBatch = 215;
CqlParser.RULE_kwBegin = 216;
CqlParser.RULE_kwBy = 217;
CqlParser.RULE_kwCalled = 218;
CqlParser.RULE_kwClustering = 219;
CqlParser.RULE_kwCompact = 220;
CqlParser.RULE_kwContains = 221;
CqlParser.RULE_kwContainsKey = 222;
CqlParser.RULE_kwCreate = 223;
CqlParser.RULE_kwDelete = 224;
CqlParser.RULE_kwDesc = 225;
CqlParser.RULE_kwDescibe = 226;
CqlParser.RULE_kwDistinct = 227;
CqlParser.RULE_kwDrop = 228;
CqlParser.RULE_kwDurableWrites = 229;
CqlParser.RULE_kwEntries = 230;
CqlParser.RULE_kwExecute = 231;
CqlParser.RULE_kwExists = 232;
CqlParser.RULE_kwFiltering = 233;
CqlParser.RULE_kwFinalfunc = 234;
CqlParser.RULE_kwFrom = 235;
CqlParser.RULE_kwFull = 236;
CqlParser.RULE_kwFunction = 237;
CqlParser.RULE_kwGrant = 238;
CqlParser.RULE_kwIf = 239;
CqlParser.RULE_kwIn = 240;
CqlParser.RULE_kwIndex = 241;
CqlParser.RULE_kwInitcond = 242;
CqlParser.RULE_kwInput = 243;
CqlParser.RULE_kwInsertInto = 244;
CqlParser.RULE_kwIs = 245;
CqlParser.RULE_kwKey = 246;
CqlParser.RULE_kwKeys = 247;
CqlParser.RULE_kwKeyspace = 248;
CqlParser.RULE_kwLanguage = 249;
CqlParser.RULE_kwLimit = 250;
CqlParser.RULE_kwList = 251;
CqlParser.RULE_kwListRoles = 252;
CqlParser.RULE_kwListUsers = 253;
CqlParser.RULE_kwLogged = 254;
CqlParser.RULE_kwLogin = 255;
CqlParser.RULE_kwMaterializedView = 256;
CqlParser.RULE_kwModify = 257;
CqlParser.RULE_kwNosuperuser = 258;
CqlParser.RULE_kwNorecursive = 259;
CqlParser.RULE_kwNot = 260;
CqlParser.RULE_kwNull = 261;
CqlParser.RULE_kwOf = 262;
CqlParser.RULE_kwOn = 263;
CqlParser.RULE_kwOptions = 264;
CqlParser.RULE_kwOr = 265;
CqlParser.RULE_kwOrder = 266;
CqlParser.RULE_kwOrderBy = 267;
CqlParser.RULE_kwPartition = 268;
CqlParser.RULE_kwPassword = 269;
CqlParser.RULE_kwPermissions = 270;
CqlParser.RULE_kwPrimary = 271;
CqlParser.RULE_kwRename = 272;
CqlParser.RULE_kwReplace = 273;
CqlParser.RULE_kwReplication = 274;
CqlParser.RULE_kwReturns = 275;
CqlParser.RULE_kwRole = 276;
CqlParser.RULE_kwSelect = 277;
CqlParser.RULE_kwSet = 278;
CqlParser.RULE_kwSfunc = 279;
CqlParser.RULE_kwStatic = 280;
CqlParser.RULE_kwStorage = 281;
CqlParser.RULE_kwStype = 282;
CqlParser.RULE_kwSuperuser = 283;
CqlParser.RULE_kwTable = 284;
CqlParser.RULE_kwTimestamp = 285;
CqlParser.RULE_kwTo = 286;
CqlParser.RULE_kwToken = 287;
CqlParser.RULE_kwTrigger = 288;
CqlParser.RULE_kwTruncate = 289;
CqlParser.RULE_kwTtl = 290;
CqlParser.RULE_kwType = 291;
CqlParser.RULE_kwUnlogged = 292;
CqlParser.RULE_kwUpdate = 293;
CqlParser.RULE_kwUse = 294;
CqlParser.RULE_kwUser = 295;
CqlParser.RULE_kwUsers = 296;
CqlParser.RULE_kwUsing = 297;
CqlParser.RULE_kwValues = 298;
CqlParser.RULE_kwWhere = 299;
CqlParser.RULE_kwWith = 300;
CqlParser.RULE_kwRevoke = 301;
CqlParser.RULE_dataTypeAscii = 302;
CqlParser.RULE_dataTypeBigint = 303;
CqlParser.RULE_dataTypeBlob = 304;
CqlParser.RULE_dataTypeBoolean = 305;
CqlParser.RULE_dataTypeCounter = 306;
CqlParser.RULE_dataTypeDate = 307;
CqlParser.RULE_dataTypeDecimal = 308;
CqlParser.RULE_dataTypeDouble = 309;
CqlParser.RULE_dataTypeFloat = 310;
CqlParser.RULE_dataTypeFrozen = 311;
CqlParser.RULE_dataTypeInet = 312;
CqlParser.RULE_dataTypeInt = 313;
CqlParser.RULE_dataTypeList = 314;
CqlParser.RULE_dataTypeMap = 315;
CqlParser.RULE_dataTypeSmallInt = 316;
CqlParser.RULE_dataTypeSet = 317;
CqlParser.RULE_dataTypeText = 318;
CqlParser.RULE_dataTypeTime = 319;
CqlParser.RULE_dataTypeTimeUuid = 320;
CqlParser.RULE_dataTypeTimestamp = 321;
CqlParser.RULE_dataTypeTinyInt = 322;
CqlParser.RULE_dataTypeTuple = 323;
CqlParser.RULE_dataTypeUserDefined = 324;
CqlParser.RULE_dataTypeUuid = 325;
CqlParser.RULE_dataTypeVarChar = 326;
CqlParser.RULE_dataTypeVarInt = 327;
CqlParser.RULE_dataTypeStructure = 328;
CqlParser.RULE_specialStar = 329;
CqlParser.RULE_specialDot = 330;
CqlParser.RULE_eof = 331;
CqlParser.RULE_syntaxBracketLr = 332;
CqlParser.RULE_syntaxBracketRr = 333;
CqlParser.RULE_syntaxBracketLc = 334;
CqlParser.RULE_syntaxBracketRc = 335;
CqlParser.RULE_syntaxBracketLa = 336;
CqlParser.RULE_syntaxBracketRa = 337;
CqlParser.RULE_syntaxBracketLs = 338;
CqlParser.RULE_syntaxBracketRs = 339;
CqlParser.RULE_syntaxComma = 340;
CqlParser.RULE_syntaxColon = 341;
CqlParser.RULE_syntaxPlus = 342;
CqlParser.RULE_syntaxMinus = 343;
CqlParser.RULE_syntaxSquote = 344;
CqlParser.RULE_syntaxDquote = 345;
CqlParser.RULE_syntaxOperatorEq = 346;
CqlParser.RULE_syntaxOperatorLt = 347;
CqlParser.RULE_syntaxOperatorGt = 348;
CqlParser.RULE_syntaxOperatorLte = 349;
CqlParser.RULE_syntaxOperatorGte = 350;

function RootContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_root;
    return this;
}

RootContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootContext.prototype.constructor = RootContext;

RootContext.prototype.eof = function() {
    return this.getTypedRuleContext(EofContext,0);
};

RootContext.prototype.cqls = function() {
    return this.getTypedRuleContext(CqlsContext,0);
};

RootContext.prototype.MINUSMINUS = function() {
    return this.getToken(CqlParser.MINUSMINUS, 0);
};

RootContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRoot(this);
	}
};

RootContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRoot(this);
	}
};

RootContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRoot(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RootContext = RootContext;

CqlParser.prototype.root = function() {

    var localctx = new RootContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CqlParser.RULE_root);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        _la = this._input.LA(1);
        if(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (CqlParser.SEMI - 8)) | (1 << (CqlParser.K_ALTER - 8)) | (1 << (CqlParser.K_APPLY - 8)) | (1 << (CqlParser.K_BEGIN - 8)))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (CqlParser.K_CREATE - 46)) | (1 << (CqlParser.K_DELETE - 46)) | (1 << (CqlParser.K_DROP - 46)) | (1 << (CqlParser.K_GRANT - 46)) | (1 << (CqlParser.K_INSERT - 46)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CqlParser.K_REVOKE - 108)) | (1 << (CqlParser.K_SELECT - 108)) | (1 << (CqlParser.K_TRUNCATE - 108)) | (1 << (CqlParser.K_UPDATE - 108)) | (1 << (CqlParser.K_USE - 108)))) !== 0) || _la===CqlParser.K_LIST) {
            this.state = 702;
            this.cqls();
        }

        this.state = 706;
        _la = this._input.LA(1);
        if(_la===CqlParser.MINUSMINUS) {
            this.state = 705;
            this.match(CqlParser.MINUSMINUS);
        }

        this.state = 708;
        this.eof();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CqlsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_cqls;
    return this;
}

CqlsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CqlsContext.prototype.constructor = CqlsContext;

CqlsContext.prototype.cql = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CqlContext);
    } else {
        return this.getTypedRuleContext(CqlContext,i);
    }
};

CqlsContext.prototype.empty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyContext);
    } else {
        return this.getTypedRuleContext(EmptyContext,i);
    }
};

CqlsContext.prototype.statementSeparator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementSeparatorContext);
    } else {
        return this.getTypedRuleContext(StatementSeparatorContext,i);
    }
};

CqlsContext.prototype.MINUSMINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.MINUSMINUS);
    } else {
        return this.getToken(CqlParser.MINUSMINUS, i);
    }
};


CqlsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCqls(this);
	}
};

CqlsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCqls(this);
	}
};

CqlsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCqls(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CqlsContext = CqlsContext;

CqlParser.prototype.cqls = function() {

    var localctx = new CqlsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CqlParser.RULE_cqls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 717;
                switch(this._input.LA(1)) {
                case CqlParser.K_ALTER:
                case CqlParser.K_APPLY:
                case CqlParser.K_BEGIN:
                case CqlParser.K_CREATE:
                case CqlParser.K_DELETE:
                case CqlParser.K_DROP:
                case CqlParser.K_GRANT:
                case CqlParser.K_INSERT:
                case CqlParser.K_REVOKE:
                case CqlParser.K_SELECT:
                case CqlParser.K_TRUNCATE:
                case CqlParser.K_UPDATE:
                case CqlParser.K_USE:
                case CqlParser.K_LIST:
                    this.state = 710;
                    this.cql();
                    this.state = 712;
                    _la = this._input.LA(1);
                    if(_la===CqlParser.MINUSMINUS) {
                        this.state = 711;
                        this.match(CqlParser.MINUSMINUS);
                    }

                    this.state = 714;
                    this.statementSeparator();
                    break;
                case CqlParser.SEMI:
                    this.state = 716;
                    this.empty();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 721;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 730;
        switch(this._input.LA(1)) {
        case CqlParser.K_ALTER:
        case CqlParser.K_APPLY:
        case CqlParser.K_BEGIN:
        case CqlParser.K_CREATE:
        case CqlParser.K_DELETE:
        case CqlParser.K_DROP:
        case CqlParser.K_GRANT:
        case CqlParser.K_INSERT:
        case CqlParser.K_REVOKE:
        case CqlParser.K_SELECT:
        case CqlParser.K_TRUNCATE:
        case CqlParser.K_UPDATE:
        case CqlParser.K_USE:
        case CqlParser.K_LIST:
            this.state = 722;
            this.cql();
            this.state = 727;
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 724;
                _la = this._input.LA(1);
                if(_la===CqlParser.MINUSMINUS) {
                    this.state = 723;
                    this.match(CqlParser.MINUSMINUS);
                }

                this.state = 726;
                this.statementSeparator();

            }
            break;
        case CqlParser.SEMI:
            this.state = 729;
            this.empty();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementSeparatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_statementSeparator;
    return this;
}

StatementSeparatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementSeparatorContext.prototype.constructor = StatementSeparatorContext;

StatementSeparatorContext.prototype.SEMI = function() {
    return this.getToken(CqlParser.SEMI, 0);
};

StatementSeparatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterStatementSeparator(this);
	}
};

StatementSeparatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitStatementSeparator(this);
	}
};

StatementSeparatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitStatementSeparator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.StatementSeparatorContext = StatementSeparatorContext;

CqlParser.prototype.statementSeparator = function() {

    var localctx = new StatementSeparatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CqlParser.RULE_statementSeparator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 732;
        this.match(CqlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_empty;
    return this;
}

EmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyContext.prototype.constructor = EmptyContext;

EmptyContext.prototype.statementSeparator = function() {
    return this.getTypedRuleContext(StatementSeparatorContext,0);
};

EmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterEmpty(this);
	}
};

EmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitEmpty(this);
	}
};

EmptyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitEmpty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.EmptyContext = EmptyContext;

CqlParser.prototype.empty = function() {

    var localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CqlParser.RULE_empty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 734;
        this.statementSeparator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_cql;
    return this;
}

CqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CqlContext.prototype.constructor = CqlContext;

CqlContext.prototype.beginBatch = function() {
    return this.getTypedRuleContext(BeginBatchContext,0);
};

CqlContext.prototype.alterKeyspace = function() {
    return this.getTypedRuleContext(AlterKeyspaceContext,0);
};

CqlContext.prototype.alterMaterializedView = function() {
    return this.getTypedRuleContext(AlterMaterializedViewContext,0);
};

CqlContext.prototype.alterRole = function() {
    return this.getTypedRuleContext(AlterRoleContext,0);
};

CqlContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

CqlContext.prototype.alterType = function() {
    return this.getTypedRuleContext(AlterTypeContext,0);
};

CqlContext.prototype.alterUser = function() {
    return this.getTypedRuleContext(AlterUserContext,0);
};

CqlContext.prototype.applyBatch = function() {
    return this.getTypedRuleContext(ApplyBatchContext,0);
};

CqlContext.prototype.createAggregate = function() {
    return this.getTypedRuleContext(CreateAggregateContext,0);
};

CqlContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

CqlContext.prototype.createIndex = function() {
    return this.getTypedRuleContext(CreateIndexContext,0);
};

CqlContext.prototype.createKeyspace = function() {
    return this.getTypedRuleContext(CreateKeyspaceContext,0);
};

CqlContext.prototype.createMaterializedView = function() {
    return this.getTypedRuleContext(CreateMaterializedViewContext,0);
};

CqlContext.prototype.createRole = function() {
    return this.getTypedRuleContext(CreateRoleContext,0);
};

CqlContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

CqlContext.prototype.createTrigger = function() {
    return this.getTypedRuleContext(CreateTriggerContext,0);
};

CqlContext.prototype.createType = function() {
    return this.getTypedRuleContext(CreateTypeContext,0);
};

CqlContext.prototype.createUser = function() {
    return this.getTypedRuleContext(CreateUserContext,0);
};

CqlContext.prototype.delete = function() {
    return this.getTypedRuleContext(DeleteContext,0);
};

CqlContext.prototype.dropAggregate = function() {
    return this.getTypedRuleContext(DropAggregateContext,0);
};

CqlContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

CqlContext.prototype.dropIndex = function() {
    return this.getTypedRuleContext(DropIndexContext,0);
};

CqlContext.prototype.dropKeyspace = function() {
    return this.getTypedRuleContext(DropKeyspaceContext,0);
};

CqlContext.prototype.dropMaterializedView = function() {
    return this.getTypedRuleContext(DropMaterializedViewContext,0);
};

CqlContext.prototype.dropRole = function() {
    return this.getTypedRuleContext(DropRoleContext,0);
};

CqlContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

CqlContext.prototype.dropTrigger = function() {
    return this.getTypedRuleContext(DropTriggerContext,0);
};

CqlContext.prototype.dropType = function() {
    return this.getTypedRuleContext(DropTypeContext,0);
};

CqlContext.prototype.dropUser = function() {
    return this.getTypedRuleContext(DropUserContext,0);
};

CqlContext.prototype.grant = function() {
    return this.getTypedRuleContext(GrantContext,0);
};

CqlContext.prototype.insert = function() {
    return this.getTypedRuleContext(InsertContext,0);
};

CqlContext.prototype.listPermissions = function() {
    return this.getTypedRuleContext(ListPermissionsContext,0);
};

CqlContext.prototype.listRoles = function() {
    return this.getTypedRuleContext(ListRolesContext,0);
};

CqlContext.prototype.revoke = function() {
    return this.getTypedRuleContext(RevokeContext,0);
};

CqlContext.prototype.select = function() {
    return this.getTypedRuleContext(SelectContext,0);
};

CqlContext.prototype.truncate = function() {
    return this.getTypedRuleContext(TruncateContext,0);
};

CqlContext.prototype.update = function() {
    return this.getTypedRuleContext(UpdateContext,0);
};

CqlContext.prototype.use = function() {
    return this.getTypedRuleContext(UseContext,0);
};

CqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCql(this);
	}
};

CqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCql(this);
	}
};

CqlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCql(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CqlContext = CqlContext;

CqlParser.prototype.cql = function() {

    var localctx = new CqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CqlParser.RULE_cql);
    try {
        this.state = 774;
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 736;
            this.beginBatch();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 737;
            this.alterKeyspace();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 738;
            this.alterMaterializedView();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 739;
            this.alterRole();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 740;
            this.alterTable();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 741;
            this.alterType();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 742;
            this.alterUser();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 743;
            this.applyBatch();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 744;
            this.createAggregate();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 745;
            this.createFunction();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 746;
            this.createIndex();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 747;
            this.createKeyspace();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 748;
            this.createMaterializedView();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 749;
            this.createRole();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 750;
            this.createTable();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 751;
            this.createTrigger();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 752;
            this.createType();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 753;
            this.createUser();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 754;
            this.delete();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 755;
            this.dropAggregate();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 756;
            this.dropFunction();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 757;
            this.dropIndex();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 758;
            this.dropKeyspace();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 759;
            this.dropMaterializedView();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 760;
            this.dropRole();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 761;
            this.dropTable();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 762;
            this.dropTrigger();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 763;
            this.dropType();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 764;
            this.dropUser();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 765;
            this.grant();
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 766;
            this.insert();
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 767;
            this.listPermissions();
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 768;
            this.listRoles();
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 769;
            this.revoke();
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 770;
            this.select();
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 771;
            this.truncate();
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 772;
            this.update();
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 773;
            this.use();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RevokeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_revoke;
    return this;
}

RevokeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeContext.prototype.constructor = RevokeContext;

RevokeContext.prototype.kwRevoke = function() {
    return this.getTypedRuleContext(KwRevokeContext,0);
};

RevokeContext.prototype.priviledge = function() {
    return this.getTypedRuleContext(PriviledgeContext,0);
};

RevokeContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

RevokeContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

RevokeContext.prototype.kwFrom = function() {
    return this.getTypedRuleContext(KwFromContext,0);
};

RevokeContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

RevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRevoke(this);
	}
};

RevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRevoke(this);
	}
};

RevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RevokeContext = RevokeContext;

CqlParser.prototype.revoke = function() {

    var localctx = new RevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CqlParser.RULE_revoke);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 776;
        this.kwRevoke();
        this.state = 777;
        this.priviledge();
        this.state = 778;
        this.kwOn();
        this.state = 779;
        this.resource();
        this.state = 780;
        this.kwFrom();
        this.state = 781;
        this.role();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListUsersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listUsers;
    return this;
}

ListUsersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListUsersContext.prototype.constructor = ListUsersContext;

ListUsersContext.prototype.kwListUsers = function() {
    return this.getTypedRuleContext(KwListUsersContext,0);
};

ListUsersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterListUsers(this);
	}
};

ListUsersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitListUsers(this);
	}
};

ListUsersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitListUsers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ListUsersContext = ListUsersContext;

CqlParser.prototype.listUsers = function() {

    var localctx = new ListUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CqlParser.RULE_listUsers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 783;
        this.kwListUsers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listRoles;
    return this;
}

ListRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListRolesContext.prototype.constructor = ListRolesContext;

ListRolesContext.prototype.kwListRoles = function() {
    return this.getTypedRuleContext(KwListRolesContext,0);
};

ListRolesContext.prototype.kwOf = function() {
    return this.getTypedRuleContext(KwOfContext,0);
};

ListRolesContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

ListRolesContext.prototype.kwNorecursive = function() {
    return this.getTypedRuleContext(KwNorecursiveContext,0);
};

ListRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterListRoles(this);
	}
};

ListRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitListRoles(this);
	}
};

ListRolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitListRoles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ListRolesContext = ListRolesContext;

CqlParser.prototype.listRoles = function() {

    var localctx = new ListRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CqlParser.RULE_listRoles);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this.kwListRoles();
        this.state = 789;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OF) {
            this.state = 786;
            this.kwOf();
            this.state = 787;
            this.role();
        }

        this.state = 792;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_NORECURSIVE) {
            this.state = 791;
            this.kwNorecursive();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListPermissionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_listPermissions;
    return this;
}

ListPermissionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListPermissionsContext.prototype.constructor = ListPermissionsContext;

ListPermissionsContext.prototype.kwList = function() {
    return this.getTypedRuleContext(KwListContext,0);
};

ListPermissionsContext.prototype.priviledge = function() {
    return this.getTypedRuleContext(PriviledgeContext,0);
};

ListPermissionsContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

ListPermissionsContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

ListPermissionsContext.prototype.kwOf = function() {
    return this.getTypedRuleContext(KwOfContext,0);
};

ListPermissionsContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

ListPermissionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterListPermissions(this);
	}
};

ListPermissionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitListPermissions(this);
	}
};

ListPermissionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitListPermissions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ListPermissionsContext = ListPermissionsContext;

CqlParser.prototype.listPermissions = function() {

    var localctx = new ListPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CqlParser.RULE_listPermissions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.kwList();
        this.state = 795;
        this.priviledge();
        this.state = 799;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ON) {
            this.state = 796;
            this.kwOn();
            this.state = 797;
            this.resource();
        }

        this.state = 804;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OF) {
            this.state = 801;
            this.kwOf();
            this.state = 802;
            this.role();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GrantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_grant;
    return this;
}

GrantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantContext.prototype.constructor = GrantContext;

GrantContext.prototype.kwGrant = function() {
    return this.getTypedRuleContext(KwGrantContext,0);
};

GrantContext.prototype.priviledge = function() {
    return this.getTypedRuleContext(PriviledgeContext,0);
};

GrantContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

GrantContext.prototype.resource = function() {
    return this.getTypedRuleContext(ResourceContext,0);
};

GrantContext.prototype.kwTo = function() {
    return this.getTypedRuleContext(KwToContext,0);
};

GrantContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

GrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterGrant(this);
	}
};

GrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitGrant(this);
	}
};

GrantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitGrant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.GrantContext = GrantContext;

CqlParser.prototype.grant = function() {

    var localctx = new GrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CqlParser.RULE_grant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.kwGrant();
        this.state = 807;
        this.priviledge();
        this.state = 808;
        this.kwOn();
        this.state = 809;
        this.resource();
        this.state = 810;
        this.kwTo();
        this.state = 811;
        this.role();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PriviledgeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_priviledge;
    return this;
}

PriviledgeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PriviledgeContext.prototype.constructor = PriviledgeContext;

PriviledgeContext.prototype.kwAll = function() {
    return this.getTypedRuleContext(KwAllContext,0);
};

PriviledgeContext.prototype.kwAllPermissions = function() {
    return this.getTypedRuleContext(KwAllPermissionsContext,0);
};

PriviledgeContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

PriviledgeContext.prototype.kwAuthorize = function() {
    return this.getTypedRuleContext(KwAuthorizeContext,0);
};

PriviledgeContext.prototype.kwDescibe = function() {
    return this.getTypedRuleContext(KwDescibeContext,0);
};

PriviledgeContext.prototype.kwExecute = function() {
    return this.getTypedRuleContext(KwExecuteContext,0);
};

PriviledgeContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

PriviledgeContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

PriviledgeContext.prototype.kwModify = function() {
    return this.getTypedRuleContext(KwModifyContext,0);
};

PriviledgeContext.prototype.kwSelect = function() {
    return this.getTypedRuleContext(KwSelectContext,0);
};

PriviledgeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPriviledge(this);
	}
};

PriviledgeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPriviledge(this);
	}
};

PriviledgeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPriviledge(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PriviledgeContext = PriviledgeContext;

CqlParser.prototype.priviledge = function() {

    var localctx = new PriviledgeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CqlParser.RULE_priviledge);
    try {
        this.state = 825;
        switch(this._input.LA(1)) {
        case CqlParser.K_ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 815;
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            switch(la_) {
            case 1:
                this.state = 813;
                this.kwAll();
                break;

            case 2:
                this.state = 814;
                this.kwAllPermissions();
                break;

            }
            break;
        case CqlParser.K_ALTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 817;
            this.kwAlter();
            break;
        case CqlParser.K_AUTHORIZE:
            this.enterOuterAlt(localctx, 3);
            this.state = 818;
            this.kwAuthorize();
            break;
        case CqlParser.K_DESCRIBE:
            this.enterOuterAlt(localctx, 4);
            this.state = 819;
            this.kwDescibe();
            break;
        case CqlParser.K_EXECUTE:
            this.enterOuterAlt(localctx, 5);
            this.state = 820;
            this.kwExecute();
            break;
        case CqlParser.K_CREATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 821;
            this.kwCreate();
            break;
        case CqlParser.K_DROP:
            this.enterOuterAlt(localctx, 7);
            this.state = 822;
            this.kwDrop();
            break;
        case CqlParser.K_MODIFY:
            this.enterOuterAlt(localctx, 8);
            this.state = 823;
            this.kwModify();
            break;
        case CqlParser.K_SELECT:
            this.enterOuterAlt(localctx, 9);
            this.state = 824;
            this.kwSelect();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.kwAllFunctions = function() {
    return this.getTypedRuleContext(KwAllFunctionsContext,0);
};

ResourceContext.prototype.kwIn = function() {
    return this.getTypedRuleContext(KwInContext,0);
};

ResourceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

ResourceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

ResourceContext.prototype.kwFunction = function() {
    return this.getTypedRuleContext(KwFunctionContext,0);
};

ResourceContext.prototype.function = function() {
    return this.getTypedRuleContext(FunctionContext,0);
};

ResourceContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

ResourceContext.prototype.kwAllKeyspaces = function() {
    return this.getTypedRuleContext(KwAllKeyspacesContext,0);
};

ResourceContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

ResourceContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

ResourceContext.prototype.kwAllRoles = function() {
    return this.getTypedRuleContext(KwAllRolesContext,0);
};

ResourceContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

ResourceContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitResource(this);
	}
};

ResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ResourceContext = ResourceContext;

CqlParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CqlParser.RULE_resource);
    var _la = 0; // Token type
    try {
        this.state = 853;
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 827;
            this.kwAllFunctions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 828;
            this.kwAllFunctions();
            this.state = 829;
            this.kwIn();
            this.state = 830;
            this.kwKeyspace();
            this.state = 831;
            this.keyspace();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 833;
            this.kwFunction();
            this.state = 837;
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 834;
                this.keyspace();
                this.state = 835;
                this.match(CqlParser.DOT);

            }
            this.state = 839;
            this.function();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 841;
            this.kwAllKeyspaces();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 842;
            this.kwKeyspace();
            this.state = 843;
            this.keyspace();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 846;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_TABLE) {
                this.state = 845;
                this.kwTable();
            }

            this.state = 848;
            this.tableSpec();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 849;
            this.kwAllRoles();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 850;
            this.kwRole();
            this.state = 851;
            this.role();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createUser;
    return this;
}

CreateUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserContext.prototype.constructor = CreateUserContext;

CreateUserContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateUserContext.prototype.kwUser = function() {
    return this.getTypedRuleContext(KwUserContext,0);
};

CreateUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

CreateUserContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

CreateUserContext.prototype.kwPassword = function() {
    return this.getTypedRuleContext(KwPasswordContext,0);
};

CreateUserContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

CreateUserContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateUserContext.prototype.kwSuperuser = function() {
    return this.getTypedRuleContext(KwSuperuserContext,0);
};

CreateUserContext.prototype.kwNosuperuser = function() {
    return this.getTypedRuleContext(KwNosuperuserContext,0);
};

CreateUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateUser(this);
	}
};

CreateUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateUser(this);
	}
};

CreateUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateUserContext = CreateUserContext;

CqlParser.prototype.createUser = function() {

    var localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CqlParser.RULE_createUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        this.kwCreate();
        this.state = 856;
        this.kwUser();
        this.state = 858;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 857;
            this.ifNotExist();
        }

        this.state = 860;
        this.user();
        this.state = 861;
        this.kwWith();
        this.state = 862;
        this.kwPassword();
        this.state = 863;
        this.constantString();
        this.state = 866;
        switch (this._input.LA(1)) {
        case CqlParser.K_SUPERUSER:
        	this.state = 864;
        	this.kwSuperuser();
        	break;
        case CqlParser.K_NOSUPERUSER:
        	this.state = 865;
        	this.kwNosuperuser();
        	break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createRole;
    return this;
}

CreateRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRoleContext.prototype.constructor = CreateRoleContext;

CreateRoleContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateRoleContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

CreateRoleContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

CreateRoleContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateRoleContext.prototype.roleWith = function() {
    return this.getTypedRuleContext(RoleWithContext,0);
};

CreateRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateRole(this);
	}
};

CreateRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateRole(this);
	}
};

CreateRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateRoleContext = CreateRoleContext;

CqlParser.prototype.createRole = function() {

    var localctx = new CreateRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CqlParser.RULE_createRole);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 868;
        this.kwCreate();
        this.state = 869;
        this.kwRole();
        this.state = 871;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 870;
            this.ifNotExist();
        }

        this.state = 873;
        this.role();
        this.state = 875;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 874;
            this.roleWith();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createType;
    return this;
}

CreateTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTypeContext.prototype.constructor = CreateTypeContext;

CreateTypeContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

CreateTypeContext.prototype.objectUnknownSpec = function() {
    return this.getTypedRuleContext(ObjectUnknownSpecContext,0);
};

CreateTypeContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateTypeContext.prototype.typeMemberColumnList = function() {
    return this.getTypedRuleContext(TypeMemberColumnListContext,0);
};

CreateTypeContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateTypeContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateType(this);
	}
};

CreateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateType(this);
	}
};

CreateTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTypeContext = CreateTypeContext;

CqlParser.prototype.createType = function() {

    var localctx = new CreateTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CqlParser.RULE_createType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 877;
        this.kwCreate();
        this.state = 878;
        this.kwType();
        this.state = 880;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 879;
            this.ifNotExist();
        }

        this.state = 882;
        this.objectUnknownSpec();
        this.state = 883;
        this.syntaxBracketLr();
        this.state = 884;
        this.typeMemberColumnList();
        this.state = 885;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeMemberColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_typeMemberColumnList;
    return this;
}

TypeMemberColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeMemberColumnListContext.prototype.constructor = TypeMemberColumnListContext;

TypeMemberColumnListContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

TypeMemberColumnListContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

TypeMemberColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

TypeMemberColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTypeMemberColumnList(this);
	}
};

TypeMemberColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTypeMemberColumnList(this);
	}
};

TypeMemberColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTypeMemberColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TypeMemberColumnListContext = TypeMemberColumnListContext;

CqlParser.prototype.typeMemberColumnList = function() {

    var localctx = new TypeMemberColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CqlParser.RULE_typeMemberColumnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        this.columnSpec();
        this.state = 888;
        this.dataType();
        this.state = 895;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 889;
            this.syntaxComma();
            this.state = 890;
            this.columnSpec();
            this.state = 891;
            this.dataType();
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTrigger;
    return this;
}

CreateTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTriggerContext.prototype.constructor = CreateTriggerContext;

CreateTriggerContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateTriggerContext.prototype.kwTrigger = function() {
    return this.getTypedRuleContext(KwTriggerContext,0);
};

CreateTriggerContext.prototype.objectUnknownSpec = function() {
    return this.getTypedRuleContext(ObjectUnknownSpecContext,0);
};

CreateTriggerContext.prototype.kwUsing = function() {
    return this.getTypedRuleContext(KwUsingContext,0);
};

CreateTriggerContext.prototype.triggerClass = function() {
    return this.getTypedRuleContext(TriggerClassContext,0);
};

CreateTriggerContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTriggerContext = CreateTriggerContext;

CqlParser.prototype.createTrigger = function() {

    var localctx = new CreateTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CqlParser.RULE_createTrigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.kwCreate();
        this.state = 899;
        this.kwTrigger();
        this.state = 901;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 900;
            this.ifNotExist();
        }

        this.state = 903;
        this.objectUnknownSpec();
        this.state = 904;
        this.kwUsing();
        this.state = 905;
        this.triggerClass();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createMaterializedView;
    return this;
}

CreateMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateMaterializedViewContext.prototype.constructor = CreateMaterializedViewContext;

CreateMaterializedViewContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateMaterializedViewContext.prototype.kwMaterializedView = function() {
    return this.getTypedRuleContext(KwMaterializedViewContext,0);
};

CreateMaterializedViewContext.prototype.objectUnknownSpec = function() {
    return this.getTypedRuleContext(ObjectUnknownSpecContext,0);
};

CreateMaterializedViewContext.prototype.kwAs = function() {
    return this.getTypedRuleContext(KwAsContext,0);
};

CreateMaterializedViewContext.prototype.kwSelect = function() {
    return this.getTypedRuleContext(KwSelectContext,0);
};

CreateMaterializedViewContext.prototype.baseColumnList = function() {
    return this.getTypedRuleContext(BaseColumnListContext,0);
};

CreateMaterializedViewContext.prototype.kwFrom = function() {
    return this.getTypedRuleContext(KwFromContext,0);
};

CreateMaterializedViewContext.prototype.baseTableSpec = function() {
    return this.getTypedRuleContext(BaseTableSpecContext,0);
};

CreateMaterializedViewContext.prototype.materializedViewWhere = function() {
    return this.getTypedRuleContext(MaterializedViewWhereContext,0);
};

CreateMaterializedViewContext.prototype.primaryKeyElement = function() {
    return this.getTypedRuleContext(PrimaryKeyElementContext,0);
};

CreateMaterializedViewContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateMaterializedViewContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

CreateMaterializedViewContext.prototype.materializedViewOptions = function() {
    return this.getTypedRuleContext(MaterializedViewOptionsContext,0);
};

CreateMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateMaterializedView(this);
	}
};

CreateMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateMaterializedView(this);
	}
};

CreateMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateMaterializedViewContext = CreateMaterializedViewContext;

CqlParser.prototype.createMaterializedView = function() {

    var localctx = new CreateMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CqlParser.RULE_createMaterializedView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.kwCreate();
        this.state = 908;
        this.kwMaterializedView();
        this.state = 910;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 909;
            this.ifNotExist();
        }

        this.state = 912;
        this.objectUnknownSpec();
        this.state = 913;
        this.kwAs();
        this.state = 914;
        this.kwSelect();
        this.state = 915;
        this.baseColumnList();
        this.state = 916;
        this.kwFrom();
        this.state = 917;
        this.baseTableSpec();
        this.state = 918;
        this.materializedViewWhere();
        this.state = 919;
        this.primaryKeyElement();
        this.state = 923;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 920;
            this.kwWith();
            this.state = 921;
            this.materializedViewOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaterializedViewWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewWhere;
    return this;
}

MaterializedViewWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewWhereContext.prototype.constructor = MaterializedViewWhereContext;

MaterializedViewWhereContext.prototype.kwWhere = function() {
    return this.getTypedRuleContext(KwWhereContext,0);
};

MaterializedViewWhereContext.prototype.columnNotNullList = function() {
    return this.getTypedRuleContext(ColumnNotNullListContext,0);
};

MaterializedViewWhereContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

MaterializedViewWhereContext.prototype.relationElements = function() {
    return this.getTypedRuleContext(RelationElementsContext,0);
};

MaterializedViewWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedViewWhere(this);
	}
};

MaterializedViewWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedViewWhere(this);
	}
};

MaterializedViewWhereContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedViewWhere(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewWhereContext = MaterializedViewWhereContext;

CqlParser.prototype.materializedViewWhere = function() {

    var localctx = new MaterializedViewWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CqlParser.RULE_materializedViewWhere);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        this.kwWhere();
        this.state = 926;
        this.columnNotNullList();
        this.state = 930;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_AND) {
            this.state = 927;
            this.kwAnd();
            this.state = 928;
            this.relationElements();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnNotNullListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnNotNullList;
    return this;
}

ColumnNotNullListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNotNullListContext.prototype.constructor = ColumnNotNullListContext;

ColumnNotNullListContext.prototype.columnNotNull = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnNotNullContext);
    } else {
        return this.getTypedRuleContext(ColumnNotNullContext,i);
    }
};

ColumnNotNullListContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

ColumnNotNullListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnNotNullList(this);
	}
};

ColumnNotNullListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnNotNullList(this);
	}
};

ColumnNotNullListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnNotNullList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnNotNullListContext = ColumnNotNullListContext;

CqlParser.prototype.columnNotNullList = function() {

    var localctx = new ColumnNotNullListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CqlParser.RULE_columnNotNullList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 932;
        this.columnNotNull();
        this.state = 938;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 933;
                this.kwAnd();
                this.state = 934;
                this.columnNotNull(); 
            }
            this.state = 940;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnNotNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnNotNull;
    return this;
}

ColumnNotNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNotNullContext.prototype.constructor = ColumnNotNullContext;

ColumnNotNullContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

ColumnNotNullContext.prototype.kwIs = function() {
    return this.getTypedRuleContext(KwIsContext,0);
};

ColumnNotNullContext.prototype.kwNot = function() {
    return this.getTypedRuleContext(KwNotContext,0);
};

ColumnNotNullContext.prototype.kwNull = function() {
    return this.getTypedRuleContext(KwNullContext,0);
};

ColumnNotNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnNotNull(this);
	}
};

ColumnNotNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnNotNull(this);
	}
};

ColumnNotNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnNotNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnNotNullContext = ColumnNotNullContext;

CqlParser.prototype.columnNotNull = function() {

    var localctx = new ColumnNotNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CqlParser.RULE_columnNotNull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        this.columnSpec();
        this.state = 942;
        this.kwIs();
        this.state = 943;
        this.kwNot();
        this.state = 944;
        this.kwNull();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaterializedViewOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewOptions;
    return this;
}

MaterializedViewOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewOptionsContext.prototype.constructor = MaterializedViewOptionsContext;

MaterializedViewOptionsContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

MaterializedViewOptionsContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

MaterializedViewOptionsContext.prototype.clusteringOrder = function() {
    return this.getTypedRuleContext(ClusteringOrderContext,0);
};

MaterializedViewOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedViewOptions(this);
	}
};

MaterializedViewOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedViewOptions(this);
	}
};

MaterializedViewOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedViewOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewOptionsContext = MaterializedViewOptionsContext;

CqlParser.prototype.materializedViewOptions = function() {

    var localctx = new MaterializedViewOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CqlParser.RULE_materializedViewOptions);
    try {
        this.state = 956;
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 946;
            this.tableOptions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 947;
            this.tableOptions();
            this.state = 948;
            this.kwAnd();
            this.state = 949;
            this.clusteringOrder();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 951;
            this.clusteringOrder();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 952;
            this.clusteringOrder();
            this.state = 953;
            this.kwAnd();
            this.state = 954;
            this.tableOptions();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createKeyspace;
    return this;
}

CreateKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateKeyspaceContext.prototype.constructor = CreateKeyspaceContext;

CreateKeyspaceContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateKeyspaceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

CreateKeyspaceContext.prototype.objectUnknown = function() {
    return this.getTypedRuleContext(ObjectUnknownContext,0);
};

CreateKeyspaceContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

CreateKeyspaceContext.prototype.kwReplication = function() {
    return this.getTypedRuleContext(KwReplicationContext,0);
};

CreateKeyspaceContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

CreateKeyspaceContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

CreateKeyspaceContext.prototype.replicationList = function() {
    return this.getTypedRuleContext(ReplicationListContext,0);
};

CreateKeyspaceContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

CreateKeyspaceContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateKeyspaceContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

CreateKeyspaceContext.prototype.durableWrites = function() {
    return this.getTypedRuleContext(DurableWritesContext,0);
};

CreateKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateKeyspace(this);
	}
};

CreateKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateKeyspace(this);
	}
};

CreateKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateKeyspaceContext = CreateKeyspaceContext;

CqlParser.prototype.createKeyspace = function() {

    var localctx = new CreateKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CqlParser.RULE_createKeyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 958;
        this.kwCreate();
        this.state = 959;
        this.kwKeyspace();
        this.state = 961;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 960;
            this.ifNotExist();
        }

        this.state = 963;
        this.objectUnknown();
        this.state = 964;
        this.kwWith();
        this.state = 965;
        this.kwReplication();
        this.state = 966;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 967;
        this.syntaxBracketLc();
        this.state = 968;
        this.replicationList();
        this.state = 969;
        this.syntaxBracketRc();
        this.state = 973;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_AND) {
            this.state = 970;
            this.kwAnd();
            this.state = 971;
            this.durableWrites();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

CreateFunctionContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateFunctionContext.prototype.kwFunction = function() {
    return this.getTypedRuleContext(KwFunctionContext,0);
};

CreateFunctionContext.prototype.objectUnknownSpec = function() {
    return this.getTypedRuleContext(ObjectUnknownSpecContext,0);
};

CreateFunctionContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateFunctionContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateFunctionContext.prototype.returnMode = function() {
    return this.getTypedRuleContext(ReturnModeContext,0);
};

CreateFunctionContext.prototype.kwReturns = function() {
    return this.getTypedRuleContext(KwReturnsContext,0);
};

CreateFunctionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

CreateFunctionContext.prototype.kwLanguage = function() {
    return this.getTypedRuleContext(KwLanguageContext,0);
};

CreateFunctionContext.prototype.language = function() {
    return this.getTypedRuleContext(LanguageContext,0);
};

CreateFunctionContext.prototype.kwAs = function() {
    return this.getTypedRuleContext(KwAsContext,0);
};

CreateFunctionContext.prototype.codeBlock = function() {
    return this.getTypedRuleContext(CodeBlockContext,0);
};

CreateFunctionContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateFunctionContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateFunctionContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateFunctionContext = CreateFunctionContext;

CqlParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CqlParser.RULE_createFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.kwCreate();
        this.state = 977;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OR) {
            this.state = 976;
            this.orReplace();
        }

        this.state = 979;
        this.kwFunction();
        this.state = 981;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 980;
            this.ifNotExist();
        }

        this.state = 983;
        this.objectUnknownSpec();
        this.state = 984;
        this.syntaxBracketLr();
        this.state = 986;
        _la = this._input.LA(1);
        if(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_INPUT - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0)) {
            this.state = 985;
            this.paramList();
        }

        this.state = 988;
        this.syntaxBracketRr();
        this.state = 989;
        this.returnMode();
        this.state = 990;
        this.kwReturns();
        this.state = 991;
        this.dataType();
        this.state = 992;
        this.kwLanguage();
        this.state = 993;
        this.language();
        this.state = 994;
        this.kwAs();
        this.state = 995;
        this.codeBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CodeBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_codeBlock;
    return this;
}

CodeBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeBlockContext.prototype.constructor = CodeBlockContext;

CodeBlockContext.prototype.CODE_BLOCK = function() {
    return this.getToken(CqlParser.CODE_BLOCK, 0);
};

CodeBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCodeBlock(this);
	}
};

CodeBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCodeBlock(this);
	}
};

CodeBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCodeBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CodeBlockContext = CodeBlockContext;

CqlParser.prototype.codeBlock = function() {

    var localctx = new CodeBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CqlParser.RULE_codeBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.match(CqlParser.CODE_BLOCK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_paramList;
    return this;
}

ParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamListContext.prototype.constructor = ParamListContext;

ParamListContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

ParamListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterParamList(this);
	}
};

ParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitParamList(this);
	}
};

ParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ParamListContext = ParamListContext;

CqlParser.prototype.paramList = function() {

    var localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CqlParser.RULE_paramList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 999;
        this.param();
        this.state = 1005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1000;
            this.syntaxComma();
            this.state = 1001;
            this.param();
            this.state = 1007;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_returnMode;
    return this;
}

ReturnModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnModeContext.prototype.constructor = ReturnModeContext;

ReturnModeContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

ReturnModeContext.prototype.kwNull = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwNullContext);
    } else {
        return this.getTypedRuleContext(KwNullContext,i);
    }
};

ReturnModeContext.prototype.kwInput = function() {
    return this.getTypedRuleContext(KwInputContext,0);
};

ReturnModeContext.prototype.kwCalled = function() {
    return this.getTypedRuleContext(KwCalledContext,0);
};

ReturnModeContext.prototype.kwReturns = function() {
    return this.getTypedRuleContext(KwReturnsContext,0);
};

ReturnModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterReturnMode(this);
	}
};

ReturnModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitReturnMode(this);
	}
};

ReturnModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitReturnMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ReturnModeContext = ReturnModeContext;

CqlParser.prototype.returnMode = function() {

    var localctx = new ReturnModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CqlParser.RULE_returnMode);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1012;
        switch(this._input.LA(1)) {
        case CqlParser.K_CALLED:
            this.state = 1008;
            this.kwCalled();
            break;
        case CqlParser.K_RETURNS:
            this.state = 1009;
            this.kwReturns();
            this.state = 1010;
            this.kwNull();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1014;
        this.kwOn();
        this.state = 1015;
        this.kwNull();
        this.state = 1016;
        this.kwInput();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateAggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createAggregate;
    return this;
}

CreateAggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateAggregateContext.prototype.constructor = CreateAggregateContext;

CreateAggregateContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateAggregateContext.prototype.kwAggregate = function() {
    return this.getTypedRuleContext(KwAggregateContext,0);
};

CreateAggregateContext.prototype.objectUnknownSpec = function() {
    return this.getTypedRuleContext(ObjectUnknownSpecContext,0);
};

CreateAggregateContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateAggregateContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

CreateAggregateContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateAggregateContext.prototype.kwSfunc = function() {
    return this.getTypedRuleContext(KwSfuncContext,0);
};

CreateAggregateContext.prototype.function = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionContext);
    } else {
        return this.getTypedRuleContext(FunctionContext,i);
    }
};

CreateAggregateContext.prototype.kwStype = function() {
    return this.getTypedRuleContext(KwStypeContext,0);
};

CreateAggregateContext.prototype.kwFinalfunc = function() {
    return this.getTypedRuleContext(KwFinalfuncContext,0);
};

CreateAggregateContext.prototype.kwInitcond = function() {
    return this.getTypedRuleContext(KwInitcondContext,0);
};

CreateAggregateContext.prototype.initCondDefinition = function() {
    return this.getTypedRuleContext(InitCondDefinitionContext,0);
};

CreateAggregateContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateAggregateContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateAggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateAggregate(this);
	}
};

CreateAggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateAggregate(this);
	}
};

CreateAggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateAggregateContext = CreateAggregateContext;

CqlParser.prototype.createAggregate = function() {

    var localctx = new CreateAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CqlParser.RULE_createAggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1018;
        this.kwCreate();
        this.state = 1020;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_OR) {
            this.state = 1019;
            this.orReplace();
        }

        this.state = 1022;
        this.kwAggregate();
        this.state = 1024;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1023;
            this.ifNotExist();
        }

        this.state = 1026;
        this.objectUnknownSpec();
        this.state = 1027;
        this.syntaxBracketLr();
        this.state = 1028;
        this.dataType();
        this.state = 1029;
        this.syntaxBracketRr();
        this.state = 1030;
        this.kwSfunc();
        this.state = 1031;
        this.function();
        this.state = 1032;
        this.kwStype();
        this.state = 1033;
        this.dataType();
        this.state = 1034;
        this.kwFinalfunc();
        this.state = 1035;
        this.function();
        this.state = 1036;
        this.kwInitcond();
        this.state = 1037;
        this.initCondDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitCondDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondDefinition;
    return this;
}

InitCondDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondDefinitionContext.prototype.constructor = InitCondDefinitionContext;

InitCondDefinitionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

InitCondDefinitionContext.prototype.initCondList = function() {
    return this.getTypedRuleContext(InitCondListContext,0);
};

InitCondDefinitionContext.prototype.initCondListNested = function() {
    return this.getTypedRuleContext(InitCondListNestedContext,0);
};

InitCondDefinitionContext.prototype.initCondHash = function() {
    return this.getTypedRuleContext(InitCondHashContext,0);
};

InitCondDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondDefinition(this);
	}
};

InitCondDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondDefinition(this);
	}
};

InitCondDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondDefinitionContext = InitCondDefinitionContext;

CqlParser.prototype.initCondDefinition = function() {

    var localctx = new InitCondDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CqlParser.RULE_initCondDefinition);
    try {
        this.state = 1043;
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1039;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1040;
            this.initCondList();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1041;
            this.initCondListNested();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1042;
            this.initCondHash();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitCondHashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondHash;
    return this;
}

InitCondHashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondHashContext.prototype.constructor = InitCondHashContext;

InitCondHashContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

InitCondHashContext.prototype.initCondHashItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitCondHashItemContext);
    } else {
        return this.getTypedRuleContext(InitCondHashItemContext,i);
    }
};

InitCondHashContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

InitCondHashContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

InitCondHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondHash(this);
	}
};

InitCondHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondHash(this);
	}
};

InitCondHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondHashContext = InitCondHashContext;

CqlParser.prototype.initCondHash = function() {

    var localctx = new InitCondHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CqlParser.RULE_initCondHash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this.syntaxBracketLc();
        this.state = 1046;
        this.initCondHashItem();
        this.state = 1052;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1047;
            this.syntaxComma();
            this.state = 1048;
            this.initCondHashItem();
            this.state = 1054;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1055;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitCondHashItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondHashItem;
    return this;
}

InitCondHashItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondHashItemContext.prototype.constructor = InitCondHashItemContext;

InitCondHashItemContext.prototype.hashKey = function() {
    return this.getTypedRuleContext(HashKeyContext,0);
};

InitCondHashItemContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

InitCondHashItemContext.prototype.initCondDefinition = function() {
    return this.getTypedRuleContext(InitCondDefinitionContext,0);
};

InitCondHashItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondHashItem(this);
	}
};

InitCondHashItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondHashItem(this);
	}
};

InitCondHashItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondHashItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondHashItemContext = InitCondHashItemContext;

CqlParser.prototype.initCondHashItem = function() {

    var localctx = new InitCondHashItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CqlParser.RULE_initCondHashItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1057;
        this.hashKey();
        this.state = 1058;
        this.match(CqlParser.COLON);
        this.state = 1059;
        this.initCondDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitCondListNestedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondListNested;
    return this;
}

InitCondListNestedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondListNestedContext.prototype.constructor = InitCondListNestedContext;

InitCondListNestedContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

InitCondListNestedContext.prototype.initCondList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitCondListContext);
    } else {
        return this.getTypedRuleContext(InitCondListContext,i);
    }
};

InitCondListNestedContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

InitCondListNestedContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

InitCondListNestedContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

InitCondListNestedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondListNested(this);
	}
};

InitCondListNestedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondListNested(this);
	}
};

InitCondListNestedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondListNested(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondListNestedContext = InitCondListNestedContext;

CqlParser.prototype.initCondListNested = function() {

    var localctx = new InitCondListNestedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CqlParser.RULE_initCondListNested);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        this.syntaxBracketLr();
        this.state = 1062;
        this.initCondList();
        this.state = 1069;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.LR_BRACKET || _la===CqlParser.COMMA) {
            this.state = 1067;
            switch(this._input.LA(1)) {
            case CqlParser.COMMA:
                this.state = 1063;
                this.syntaxComma();
                this.state = 1064;
                this.constant();
                break;
            case CqlParser.LR_BRACKET:
                this.state = 1066;
                this.initCondList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1072;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitCondListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_initCondList;
    return this;
}

InitCondListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitCondListContext.prototype.constructor = InitCondListContext;

InitCondListContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

InitCondListContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

InitCondListContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

InitCondListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

InitCondListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInitCondList(this);
	}
};

InitCondListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInitCondList(this);
	}
};

InitCondListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInitCondList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InitCondListContext = InitCondListContext;

CqlParser.prototype.initCondList = function() {

    var localctx = new InitCondListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CqlParser.RULE_initCondList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this.syntaxBracketLr();
        this.state = 1075;
        this.constant();
        this.state = 1081;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1076;
            this.syntaxComma();
            this.state = 1077;
            this.constant();
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1084;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrReplaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orReplace;
    return this;
}

OrReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrReplaceContext.prototype.constructor = OrReplaceContext;

OrReplaceContext.prototype.kwOr = function() {
    return this.getTypedRuleContext(KwOrContext,0);
};

OrReplaceContext.prototype.kwReplace = function() {
    return this.getTypedRuleContext(KwReplaceContext,0);
};

OrReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrReplace(this);
	}
};

OrReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrReplace(this);
	}
};

OrReplaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrReplace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrReplaceContext = OrReplaceContext;

CqlParser.prototype.orReplace = function() {

    var localctx = new OrReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CqlParser.RULE_orReplace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.kwOr();
        this.state = 1087;
        this.kwReplace();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterUser;
    return this;
}

AlterUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserContext.prototype.constructor = AlterUserContext;

AlterUserContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterUserContext.prototype.kwUser = function() {
    return this.getTypedRuleContext(KwUserContext,0);
};

AlterUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

AlterUserContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterUserContext.prototype.userPassword = function() {
    return this.getTypedRuleContext(UserPasswordContext,0);
};

AlterUserContext.prototype.userSuperUser = function() {
    return this.getTypedRuleContext(UserSuperUserContext,0);
};

AlterUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterUser(this);
	}
};

AlterUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterUser(this);
	}
};

AlterUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterUserContext = AlterUserContext;

CqlParser.prototype.alterUser = function() {

    var localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CqlParser.RULE_alterUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1089;
        this.kwAlter();
        this.state = 1090;
        this.kwUser();
        this.state = 1091;
        this.user();
        this.state = 1092;
        this.kwWith();
        this.state = 1093;
        this.userPassword();
        this.state = 1095;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_NOSUPERUSER || _la===CqlParser.K_SUPERUSER) {
            this.state = 1094;
            this.userSuperUser();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_userPassword;
    return this;
}

UserPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserPasswordContext.prototype.constructor = UserPasswordContext;

UserPasswordContext.prototype.kwPassword = function() {
    return this.getTypedRuleContext(KwPasswordContext,0);
};

UserPasswordContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

UserPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUserPassword(this);
	}
};

UserPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUserPassword(this);
	}
};

UserPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUserPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UserPasswordContext = UserPasswordContext;

CqlParser.prototype.userPassword = function() {

    var localctx = new UserPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CqlParser.RULE_userPassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        this.kwPassword();
        this.state = 1098;
        this.constantString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserSuperUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_userSuperUser;
    return this;
}

UserSuperUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserSuperUserContext.prototype.constructor = UserSuperUserContext;

UserSuperUserContext.prototype.kwSuperuser = function() {
    return this.getTypedRuleContext(KwSuperuserContext,0);
};

UserSuperUserContext.prototype.kwNosuperuser = function() {
    return this.getTypedRuleContext(KwNosuperuserContext,0);
};

UserSuperUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUserSuperUser(this);
	}
};

UserSuperUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUserSuperUser(this);
	}
};

UserSuperUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUserSuperUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UserSuperUserContext = UserSuperUserContext;

CqlParser.prototype.userSuperUser = function() {

    var localctx = new UserSuperUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CqlParser.RULE_userSuperUser);
    try {
        this.state = 1102;
        switch(this._input.LA(1)) {
        case CqlParser.K_SUPERUSER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1100;
            this.kwSuperuser();
            break;
        case CqlParser.K_NOSUPERUSER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1101;
            this.kwNosuperuser();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterType;
    return this;
}

AlterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeContext.prototype.constructor = AlterTypeContext;

AlterTypeContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

AlterTypeContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

AlterTypeContext.prototype.alterTypeOperation = function() {
    return this.getTypedRuleContext(AlterTypeOperationContext,0);
};

AlterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterType(this);
	}
};

AlterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterType(this);
	}
};

AlterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeContext = AlterTypeContext;

CqlParser.prototype.alterType = function() {

    var localctx = new AlterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CqlParser.RULE_alterType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1104;
        this.kwAlter();
        this.state = 1105;
        this.kwType();
        this.state = 1106;
        this.typeSpec();
        this.state = 1107;
        this.alterTypeOperation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeOperation;
    return this;
}

AlterTypeOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeOperationContext.prototype.constructor = AlterTypeOperationContext;

AlterTypeOperationContext.prototype.alterTypeAlterType = function() {
    return this.getTypedRuleContext(AlterTypeAlterTypeContext,0);
};

AlterTypeOperationContext.prototype.alterTypeAdd = function() {
    return this.getTypedRuleContext(AlterTypeAddContext,0);
};

AlterTypeOperationContext.prototype.alterTypeRename = function() {
    return this.getTypedRuleContext(AlterTypeRenameContext,0);
};

AlterTypeOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeOperation(this);
	}
};

AlterTypeOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeOperation(this);
	}
};

AlterTypeOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeOperationContext = AlterTypeOperationContext;

CqlParser.prototype.alterTypeOperation = function() {

    var localctx = new AlterTypeOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CqlParser.RULE_alterTypeOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1110;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ALTER) {
            this.state = 1109;
            this.alterTypeAlterType();
        }

        this.state = 1113;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ADD) {
            this.state = 1112;
            this.alterTypeAdd();
        }

        this.state = 1116;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_RENAME) {
            this.state = 1115;
            this.alterTypeRename();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRename;
    return this;
}

AlterTypeRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeRenameContext.prototype.constructor = AlterTypeRenameContext;

AlterTypeRenameContext.prototype.kwRename = function() {
    return this.getTypedRuleContext(KwRenameContext,0);
};

AlterTypeRenameContext.prototype.alterTypeRenameList = function() {
    return this.getTypedRuleContext(AlterTypeRenameListContext,0);
};

AlterTypeRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeRename(this);
	}
};

AlterTypeRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeRename(this);
	}
};

AlterTypeRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeRenameContext = AlterTypeRenameContext;

CqlParser.prototype.alterTypeRename = function() {

    var localctx = new AlterTypeRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CqlParser.RULE_alterTypeRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1118;
        this.kwRename();
        this.state = 1119;
        this.alterTypeRenameList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeRenameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRenameList;
    return this;
}

AlterTypeRenameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeRenameListContext.prototype.constructor = AlterTypeRenameListContext;

AlterTypeRenameListContext.prototype.alterTypeRenameItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterTypeRenameItemContext);
    } else {
        return this.getTypedRuleContext(AlterTypeRenameItemContext,i);
    }
};

AlterTypeRenameListContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

AlterTypeRenameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeRenameList(this);
	}
};

AlterTypeRenameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeRenameList(this);
	}
};

AlterTypeRenameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeRenameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeRenameListContext = AlterTypeRenameListContext;

CqlParser.prototype.alterTypeRenameList = function() {

    var localctx = new AlterTypeRenameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CqlParser.RULE_alterTypeRenameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.alterTypeRenameItem();
        this.state = 1127;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1122;
            this.kwAnd();
            this.state = 1123;
            this.alterTypeRenameItem();
            this.state = 1129;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeRenameItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeRenameItem;
    return this;
}

AlterTypeRenameItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeRenameItemContext.prototype.constructor = AlterTypeRenameItemContext;

AlterTypeRenameItemContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

AlterTypeRenameItemContext.prototype.kwTo = function() {
    return this.getTypedRuleContext(KwToContext,0);
};

AlterTypeRenameItemContext.prototype.columnUnknownSpec = function() {
    return this.getTypedRuleContext(ColumnUnknownSpecContext,0);
};

AlterTypeRenameItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeRenameItem(this);
	}
};

AlterTypeRenameItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeRenameItem(this);
	}
};

AlterTypeRenameItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeRenameItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeRenameItemContext = AlterTypeRenameItemContext;

CqlParser.prototype.alterTypeRenameItem = function() {

    var localctx = new AlterTypeRenameItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CqlParser.RULE_alterTypeRenameItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1130;
        this.columnSpec();
        this.state = 1131;
        this.kwTo();
        this.state = 1132;
        this.columnUnknownSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeAdd;
    return this;
}

AlterTypeAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeAddContext.prototype.constructor = AlterTypeAddContext;

AlterTypeAddContext.prototype.kwAdd = function() {
    return this.getTypedRuleContext(KwAddContext,0);
};

AlterTypeAddContext.prototype.columnUnknownSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnUnknownSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnUnknownSpecContext,i);
    }
};

AlterTypeAddContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

AlterTypeAddContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AlterTypeAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeAdd(this);
	}
};

AlterTypeAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeAdd(this);
	}
};

AlterTypeAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeAddContext = AlterTypeAddContext;

CqlParser.prototype.alterTypeAdd = function() {

    var localctx = new AlterTypeAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CqlParser.RULE_alterTypeAdd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        this.kwAdd();
        this.state = 1135;
        this.columnUnknownSpec();
        this.state = 1136;
        this.dataType();
        this.state = 1143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1137;
            this.syntaxComma();
            this.state = 1138;
            this.columnUnknownSpec();
            this.state = 1139;
            this.dataType();
            this.state = 1145;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTypeAlterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTypeAlterType;
    return this;
}

AlterTypeAlterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTypeAlterTypeContext.prototype.constructor = AlterTypeAlterTypeContext;

AlterTypeAlterTypeContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterTypeAlterTypeContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

AlterTypeAlterTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

AlterTypeAlterTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

AlterTypeAlterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTypeAlterType(this);
	}
};

AlterTypeAlterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTypeAlterType(this);
	}
};

AlterTypeAlterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTypeAlterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTypeAlterTypeContext = AlterTypeAlterTypeContext;

CqlParser.prototype.alterTypeAlterType = function() {

    var localctx = new AlterTypeAlterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CqlParser.RULE_alterTypeAlterType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1146;
        this.kwAlter();
        this.state = 1147;
        this.columnSpec();
        this.state = 1148;
        this.kwType();
        this.state = 1149;
        this.dataType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTable;
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterTableContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

AlterTableContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

AlterTableContext.prototype.alterTableOperation = function() {
    return this.getTypedRuleContext(AlterTableOperationContext,0);
};

AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableContext = AlterTableContext;

CqlParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CqlParser.RULE_alterTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1151;
        this.kwAlter();
        this.state = 1152;
        this.kwTable();
        this.state = 1153;
        this.tableSpec();
        this.state = 1154;
        this.alterTableOperation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableOperation;
    return this;
}

AlterTableOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableOperationContext.prototype.constructor = AlterTableOperationContext;

AlterTableOperationContext.prototype.alterTableAdd = function() {
    return this.getTypedRuleContext(AlterTableAddContext,0);
};

AlterTableOperationContext.prototype.alterTableDropColumns = function() {
    return this.getTypedRuleContext(AlterTableDropColumnsContext,0);
};

AlterTableOperationContext.prototype.alterTableDropCompactStorage = function() {
    return this.getTypedRuleContext(AlterTableDropCompactStorageContext,0);
};

AlterTableOperationContext.prototype.alterTableRename = function() {
    return this.getTypedRuleContext(AlterTableRenameContext,0);
};

AlterTableOperationContext.prototype.alterTableWith = function() {
    return this.getTypedRuleContext(AlterTableWithContext,0);
};

AlterTableOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableOperation(this);
	}
};

AlterTableOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableOperation(this);
	}
};

AlterTableOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableOperationContext = AlterTableOperationContext;

CqlParser.prototype.alterTableOperation = function() {

    var localctx = new AlterTableOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CqlParser.RULE_alterTableOperation);
    try {
        this.state = 1163;
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1156;
            this.alterTableAdd();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1157;
            this.alterTableDropColumns();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1158;
            this.alterTableDropColumns();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1159;
            this.alterTableDropCompactStorage();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1160;
            this.alterTableRename();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1161;
            this.alterTableWith();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
             this.notifyErrorListeners("rule.alterTableOperation"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableWith;
    return this;
}

AlterTableWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableWithContext.prototype.constructor = AlterTableWithContext;

AlterTableWithContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterTableWithContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

AlterTableWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableWith(this);
	}
};

AlterTableWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableWith(this);
	}
};

AlterTableWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableWithContext = AlterTableWithContext;

CqlParser.prototype.alterTableWith = function() {

    var localctx = new AlterTableWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CqlParser.RULE_alterTableWith);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1165;
        this.kwWith();
        this.state = 1166;
        this.tableOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableRename;
    return this;
}

AlterTableRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableRenameContext.prototype.constructor = AlterTableRenameContext;

AlterTableRenameContext.prototype.kwRename = function() {
    return this.getTypedRuleContext(KwRenameContext,0);
};

AlterTableRenameContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

AlterTableRenameContext.prototype.kwTo = function() {
    return this.getTypedRuleContext(KwToContext,0);
};

AlterTableRenameContext.prototype.columnUnknownSpec = function() {
    return this.getTypedRuleContext(ColumnUnknownSpecContext,0);
};

AlterTableRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableRename(this);
	}
};

AlterTableRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableRename(this);
	}
};

AlterTableRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableRenameContext = AlterTableRenameContext;

CqlParser.prototype.alterTableRename = function() {

    var localctx = new AlterTableRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CqlParser.RULE_alterTableRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1168;
        this.kwRename();
        this.state = 1169;
        this.columnSpec();
        this.state = 1170;
        this.kwTo();
        this.state = 1171;
        this.columnUnknownSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableDropCompactStorageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropCompactStorage;
    return this;
}

AlterTableDropCompactStorageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableDropCompactStorageContext.prototype.constructor = AlterTableDropCompactStorageContext;

AlterTableDropCompactStorageContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

AlterTableDropCompactStorageContext.prototype.kwCompact = function() {
    return this.getTypedRuleContext(KwCompactContext,0);
};

AlterTableDropCompactStorageContext.prototype.kwStorage = function() {
    return this.getTypedRuleContext(KwStorageContext,0);
};

AlterTableDropCompactStorageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableDropCompactStorage(this);
	}
};

AlterTableDropCompactStorageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableDropCompactStorage(this);
	}
};

AlterTableDropCompactStorageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableDropCompactStorage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableDropCompactStorageContext = AlterTableDropCompactStorageContext;

CqlParser.prototype.alterTableDropCompactStorage = function() {

    var localctx = new AlterTableDropCompactStorageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CqlParser.RULE_alterTableDropCompactStorage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        this.kwDrop();
        this.state = 1174;
        this.kwCompact();
        this.state = 1175;
        this.kwStorage();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableDropColumnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropColumns;
    return this;
}

AlterTableDropColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableDropColumnsContext.prototype.constructor = AlterTableDropColumnsContext;

AlterTableDropColumnsContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

AlterTableDropColumnsContext.prototype.alterTableDropColumnList = function() {
    return this.getTypedRuleContext(AlterTableDropColumnListContext,0);
};

AlterTableDropColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableDropColumns(this);
	}
};

AlterTableDropColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableDropColumns(this);
	}
};

AlterTableDropColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableDropColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableDropColumnsContext = AlterTableDropColumnsContext;

CqlParser.prototype.alterTableDropColumns = function() {

    var localctx = new AlterTableDropColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CqlParser.RULE_alterTableDropColumns);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177;
        this.kwDrop();
        this.state = 1178;
        this.alterTableDropColumnList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableDropColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableDropColumnList;
    return this;
}

AlterTableDropColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableDropColumnListContext.prototype.constructor = AlterTableDropColumnListContext;

AlterTableDropColumnListContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

AlterTableDropColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AlterTableDropColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableDropColumnList(this);
	}
};

AlterTableDropColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableDropColumnList(this);
	}
};

AlterTableDropColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableDropColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableDropColumnListContext = AlterTableDropColumnListContext;

CqlParser.prototype.alterTableDropColumnList = function() {

    var localctx = new AlterTableDropColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CqlParser.RULE_alterTableDropColumnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1180;
        this.columnSpec();
        this.state = 1186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1181;
            this.syntaxComma();
            this.state = 1182;
            this.columnSpec();
            this.state = 1188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableAdd;
    return this;
}

AlterTableAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableAddContext.prototype.constructor = AlterTableAddContext;

AlterTableAddContext.prototype.kwAdd = function() {
    return this.getTypedRuleContext(KwAddContext,0);
};

AlterTableAddContext.prototype.alterTableColumnDefinition = function() {
    return this.getTypedRuleContext(AlterTableColumnDefinitionContext,0);
};

AlterTableAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableAdd(this);
	}
};

AlterTableAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableAdd(this);
	}
};

AlterTableAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableAddContext = AlterTableAddContext;

CqlParser.prototype.alterTableAdd = function() {

    var localctx = new AlterTableAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CqlParser.RULE_alterTableAdd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1189;
        this.kwAdd();
        this.state = 1190;
        this.alterTableColumnDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterTableColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterTableColumnDefinition;
    return this;
}

AlterTableColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableColumnDefinitionContext.prototype.constructor = AlterTableColumnDefinitionContext;

AlterTableColumnDefinitionContext.prototype.columnUnknownSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnUnknownSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnUnknownSpecContext,i);
    }
};

AlterTableColumnDefinitionContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

AlterTableColumnDefinitionContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AlterTableColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterTableColumnDefinition(this);
	}
};

AlterTableColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterTableColumnDefinition(this);
	}
};

AlterTableColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterTableColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterTableColumnDefinitionContext = AlterTableColumnDefinitionContext;

CqlParser.prototype.alterTableColumnDefinition = function() {

    var localctx = new AlterTableColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CqlParser.RULE_alterTableColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1192;
        this.columnUnknownSpec();
        this.state = 1193;
        this.dataType();
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1194;
            this.syntaxComma();
            this.state = 1195;
            this.columnUnknownSpec();
            this.state = 1196;
            this.dataType();
            this.state = 1202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterRole;
    return this;
}

AlterRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterRoleContext.prototype.constructor = AlterRoleContext;

AlterRoleContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterRoleContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

AlterRoleContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

AlterRoleContext.prototype.roleWith = function() {
    return this.getTypedRuleContext(RoleWithContext,0);
};

AlterRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterRole(this);
	}
};

AlterRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterRole(this);
	}
};

AlterRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterRoleContext = AlterRoleContext;

CqlParser.prototype.alterRole = function() {

    var localctx = new AlterRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CqlParser.RULE_alterRole);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        this.kwAlter();
        this.state = 1204;
        this.kwRole();
        this.state = 1205;
        this.role();
        this.state = 1207;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 1206;
            this.roleWith();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoleWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_roleWith;
    return this;
}

RoleWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleWithContext.prototype.constructor = RoleWithContext;

RoleWithContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

RoleWithContext.prototype.roleWithOptions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoleWithOptionsContext);
    } else {
        return this.getTypedRuleContext(RoleWithOptionsContext,i);
    }
};

RoleWithContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

RoleWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRoleWith(this);
	}
};

RoleWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRoleWith(this);
	}
};

RoleWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRoleWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RoleWithContext = RoleWithContext;

CqlParser.prototype.roleWith = function() {

    var localctx = new RoleWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CqlParser.RULE_roleWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1209;
        this.kwWith();

        this.state = 1210;
        this.roleWithOptions();
        this.state = 1216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1211;
            this.kwAnd();
            this.state = 1212;
            this.roleWithOptions();
            this.state = 1218;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoleWithOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_roleWithOptions;
    return this;
}

RoleWithOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleWithOptionsContext.prototype.constructor = RoleWithOptionsContext;

RoleWithOptionsContext.prototype.kwPassword = function() {
    return this.getTypedRuleContext(KwPasswordContext,0);
};

RoleWithOptionsContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

RoleWithOptionsContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

RoleWithOptionsContext.prototype.kwLogin = function() {
    return this.getTypedRuleContext(KwLoginContext,0);
};

RoleWithOptionsContext.prototype.constantBoolean = function() {
    return this.getTypedRuleContext(ConstantBooleanContext,0);
};

RoleWithOptionsContext.prototype.kwSuperuser = function() {
    return this.getTypedRuleContext(KwSuperuserContext,0);
};

RoleWithOptionsContext.prototype.kwOptions = function() {
    return this.getTypedRuleContext(KwOptionsContext,0);
};

RoleWithOptionsContext.prototype.optionHash = function() {
    return this.getTypedRuleContext(OptionHashContext,0);
};

RoleWithOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRoleWithOptions(this);
	}
};

RoleWithOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRoleWithOptions(this);
	}
};

RoleWithOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRoleWithOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RoleWithOptionsContext = RoleWithOptionsContext;

CqlParser.prototype.roleWithOptions = function() {

    var localctx = new RoleWithOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CqlParser.RULE_roleWithOptions);
    try {
        this.state = 1235;
        switch(this._input.LA(1)) {
        case CqlParser.K_PASSWORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 1219;
            this.kwPassword();
            this.state = 1220;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1221;
            this.constantString();
            break;
        case CqlParser.K_LOGIN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1223;
            this.kwLogin();
            this.state = 1224;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1225;
            this.constantBoolean();
            break;
        case CqlParser.K_SUPERUSER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1227;
            this.kwSuperuser();
            this.state = 1228;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1229;
            this.constantBoolean();
            break;
        case CqlParser.K_OPTIONS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1231;
            this.kwOptions();
            this.state = 1232;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1233;
            this.optionHash();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterMaterializedView;
    return this;
}

AlterMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterMaterializedViewContext.prototype.constructor = AlterMaterializedViewContext;

AlterMaterializedViewContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterMaterializedViewContext.prototype.kwMaterializedView = function() {
    return this.getTypedRuleContext(KwMaterializedViewContext,0);
};

AlterMaterializedViewContext.prototype.materializedViewSpec = function() {
    return this.getTypedRuleContext(MaterializedViewSpecContext,0);
};

AlterMaterializedViewContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterMaterializedViewContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

AlterMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterMaterializedView(this);
	}
};

AlterMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterMaterializedView(this);
	}
};

AlterMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterMaterializedViewContext = AlterMaterializedViewContext;

CqlParser.prototype.alterMaterializedView = function() {

    var localctx = new AlterMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CqlParser.RULE_alterMaterializedView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        this.kwAlter();
        this.state = 1238;
        this.kwMaterializedView();
        this.state = 1239;
        this.materializedViewSpec();
        this.state = 1243;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 1240;
            this.kwWith();
            this.state = 1241;
            this.tableOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropUser;
    return this;
}

DropUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUserContext.prototype.constructor = DropUserContext;

DropUserContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropUserContext.prototype.kwUser = function() {
    return this.getTypedRuleContext(KwUserContext,0);
};

DropUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

DropUserContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropUser(this);
	}
};

DropUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropUser(this);
	}
};

DropUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropUserContext = DropUserContext;

CqlParser.prototype.dropUser = function() {

    var localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CqlParser.RULE_dropUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        this.kwDrop();
        this.state = 1246;
        this.kwUser();
        this.state = 1248;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1247;
            this.ifExist();
        }

        this.state = 1250;
        this.user();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropType;
    return this;
}

DropTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTypeContext.prototype.constructor = DropTypeContext;

DropTypeContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropTypeContext.prototype.kwType = function() {
    return this.getTypedRuleContext(KwTypeContext,0);
};

DropTypeContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

DropTypeContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropType(this);
	}
};

DropTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropType(this);
	}
};

DropTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropTypeContext = DropTypeContext;

CqlParser.prototype.dropType = function() {

    var localctx = new DropTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CqlParser.RULE_dropType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1252;
        this.kwDrop();
        this.state = 1253;
        this.kwType();
        this.state = 1255;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1254;
            this.ifExist();
        }

        this.state = 1257;
        this.typeSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropMaterializedView;
    return this;
}

DropMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropMaterializedViewContext.prototype.constructor = DropMaterializedViewContext;

DropMaterializedViewContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropMaterializedViewContext.prototype.kwMaterializedView = function() {
    return this.getTypedRuleContext(KwMaterializedViewContext,0);
};

DropMaterializedViewContext.prototype.materializedViewSpec = function() {
    return this.getTypedRuleContext(MaterializedViewSpecContext,0);
};

DropMaterializedViewContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropMaterializedView(this);
	}
};

DropMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropMaterializedView(this);
	}
};

DropMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropMaterializedViewContext = DropMaterializedViewContext;

CqlParser.prototype.dropMaterializedView = function() {

    var localctx = new DropMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CqlParser.RULE_dropMaterializedView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1259;
        this.kwDrop();
        this.state = 1260;
        this.kwMaterializedView();
        this.state = 1262;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1261;
            this.ifExist();
        }

        this.state = 1264;
        this.materializedViewSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropAggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropAggregate;
    return this;
}

DropAggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropAggregateContext.prototype.constructor = DropAggregateContext;

DropAggregateContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropAggregateContext.prototype.kwAggregate = function() {
    return this.getTypedRuleContext(KwAggregateContext,0);
};

DropAggregateContext.prototype.aggregateSpec = function() {
    return this.getTypedRuleContext(AggregateSpecContext,0);
};

DropAggregateContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropAggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropAggregate(this);
	}
};

DropAggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropAggregate(this);
	}
};

DropAggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropAggregateContext = DropAggregateContext;

CqlParser.prototype.dropAggregate = function() {

    var localctx = new DropAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CqlParser.RULE_dropAggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        this.kwDrop();
        this.state = 1267;
        this.kwAggregate();
        this.state = 1269;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1268;
            this.ifExist();
        }

        this.state = 1271;
        this.aggregateSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropFunctionContext.prototype.kwFunction = function() {
    return this.getTypedRuleContext(KwFunctionContext,0);
};

DropFunctionContext.prototype.functionSpec = function() {
    return this.getTypedRuleContext(FunctionSpecContext,0);
};

DropFunctionContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropFunctionContext = DropFunctionContext;

CqlParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CqlParser.RULE_dropFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1273;
        this.kwDrop();
        this.state = 1274;
        this.kwFunction();
        this.state = 1276;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1275;
            this.ifExist();
        }

        this.state = 1278;
        this.functionSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropTrigger;
    return this;
}

DropTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTriggerContext.prototype.constructor = DropTriggerContext;

DropTriggerContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropTriggerContext.prototype.kwTrigger = function() {
    return this.getTypedRuleContext(KwTriggerContext,0);
};

DropTriggerContext.prototype.trigger = function() {
    return this.getTypedRuleContext(TriggerContext,0);
};

DropTriggerContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

DropTriggerContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

DropTriggerContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropTrigger(this);
	}
};

DropTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropTrigger(this);
	}
};

DropTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropTriggerContext = DropTriggerContext;

CqlParser.prototype.dropTrigger = function() {

    var localctx = new DropTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CqlParser.RULE_dropTrigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1280;
        this.kwDrop();
        this.state = 1281;
        this.kwTrigger();
        this.state = 1283;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1282;
            this.ifExist();
        }

        this.state = 1285;
        this.trigger();
        this.state = 1286;
        this.kwOn();
        this.state = 1287;
        this.tableSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropRole;
    return this;
}

DropRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRoleContext.prototype.constructor = DropRoleContext;

DropRoleContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropRoleContext.prototype.kwRole = function() {
    return this.getTypedRuleContext(KwRoleContext,0);
};

DropRoleContext.prototype.role = function() {
    return this.getTypedRuleContext(RoleContext,0);
};

DropRoleContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropRole(this);
	}
};

DropRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropRole(this);
	}
};

DropRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropRoleContext = DropRoleContext;

CqlParser.prototype.dropRole = function() {

    var localctx = new DropRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CqlParser.RULE_dropRole);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1289;
        this.kwDrop();
        this.state = 1290;
        this.kwRole();
        this.state = 1292;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1291;
            this.ifExist();
        }

        this.state = 1294;
        this.role();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropTable;
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropTableContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

DropTableContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

DropTableContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropTableContext = DropTableContext;

CqlParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CqlParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1296;
        this.kwDrop();
        this.state = 1297;
        this.kwTable();
        this.state = 1299;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1298;
            this.ifExist();
        }

        this.state = 1301;
        this.tableSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropKeyspace;
    return this;
}

DropKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropKeyspaceContext.prototype.constructor = DropKeyspaceContext;

DropKeyspaceContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropKeyspaceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

DropKeyspaceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

DropKeyspaceContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropKeyspace(this);
	}
};

DropKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropKeyspace(this);
	}
};

DropKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropKeyspaceContext = DropKeyspaceContext;

CqlParser.prototype.dropKeyspace = function() {

    var localctx = new DropKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CqlParser.RULE_dropKeyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1303;
        this.kwDrop();
        this.state = 1304;
        this.kwKeyspace();
        this.state = 1306;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1305;
            this.ifExist();
        }

        this.state = 1308;
        this.keyspace();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dropIndex;
    return this;
}

DropIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexContext.prototype.constructor = DropIndexContext;

DropIndexContext.prototype.kwDrop = function() {
    return this.getTypedRuleContext(KwDropContext,0);
};

DropIndexContext.prototype.kwIndex = function() {
    return this.getTypedRuleContext(KwIndexContext,0);
};

DropIndexContext.prototype.indexSpec = function() {
    return this.getTypedRuleContext(IndexSpecContext,0);
};

DropIndexContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDropIndex(this);
	}
};

DropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDropIndex(this);
	}
};

DropIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDropIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DropIndexContext = DropIndexContext;

CqlParser.prototype.dropIndex = function() {

    var localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CqlParser.RULE_dropIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1310;
        this.kwDrop();
        this.state = 1311;
        this.kwIndex();
        this.state = 1313;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1312;
            this.ifExist();
        }

        this.state = 1315;
        this.indexSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateTableContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

CreateTableContext.prototype.objectUnknownSpec = function() {
    return this.getTypedRuleContext(ObjectUnknownSpecContext,0);
};

CreateTableContext.prototype.createTableDef = function() {
    return this.getTypedRuleContext(CreateTableDefContext,0);
};

CreateTableContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateTableContext.prototype.withElement = function() {
    return this.getTypedRuleContext(WithElementContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTableContext = CreateTableContext;

CqlParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CqlParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1317;
        this.kwCreate();
        this.state = 1318;
        this.kwTable();
        this.state = 1320;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1319;
            this.ifNotExist();
        }

        this.state = 1322;
        this.objectUnknownSpec();
        this.state = 1323;
        this.createTableDef();
        this.state = 1325;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WITH) {
            this.state = 1324;
            this.withElement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateTableDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createTableDef;
    return this;
}

CreateTableDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableDefContext.prototype.constructor = CreateTableDefContext;

CreateTableDefContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateTableDefContext.prototype.columnDefinitionList = function() {
    return this.getTypedRuleContext(ColumnDefinitionListContext,0);
};

CreateTableDefContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateTableDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateTableDef(this);
	}
};

CreateTableDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateTableDef(this);
	}
};

CreateTableDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateTableDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateTableDefContext = CreateTableDefContext;

CqlParser.prototype.createTableDef = function() {

    var localctx = new CreateTableDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CqlParser.RULE_createTableDef);
    try {
        this.state = 1332;
        switch(this._input.LA(1)) {
        case CqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1327;
            this.syntaxBracketLr();
            this.state = 1328;
            this.columnDefinitionList();
            this.state = 1329;
            this.syntaxBracketRr();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_WITH:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.createTableDef"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_withElement;
    return this;
}

WithElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithElementContext.prototype.constructor = WithElementContext;

WithElementContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

WithElementContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

WithElementContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

WithElementContext.prototype.clusteringOrder = function() {
    return this.getTypedRuleContext(ClusteringOrderContext,0);
};

WithElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterWithElement(this);
	}
};

WithElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitWithElement(this);
	}
};

WithElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitWithElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.WithElementContext = WithElementContext;

CqlParser.prototype.withElement = function() {

    var localctx = new WithElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CqlParser.RULE_withElement);
    var _la = 0; // Token type
    try {
        this.state = 1350;
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1334;
            this.kwWith();
            this.state = 1335;
            this.tableOptions();
            this.state = 1339;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_AND) {
                this.state = 1336;
                this.kwAnd();
                this.state = 1337;
                this.clusteringOrder();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1341;
            this.kwWith();
            this.state = 1343;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_CLUSTERING) {
                this.state = 1342;
                this.clusteringOrder();
            }

            this.state = 1348;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_AND) {
                this.state = 1345;
                this.kwAnd();
                this.state = 1346;
                this.tableOptions();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClusteringOrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringOrder;
    return this;
}

ClusteringOrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringOrderContext.prototype.constructor = ClusteringOrderContext;

ClusteringOrderContext.prototype.kwClustering = function() {
    return this.getTypedRuleContext(KwClusteringContext,0);
};

ClusteringOrderContext.prototype.kwOrder = function() {
    return this.getTypedRuleContext(KwOrderContext,0);
};

ClusteringOrderContext.prototype.kwBy = function() {
    return this.getTypedRuleContext(KwByContext,0);
};

ClusteringOrderContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

ClusteringOrderContext.prototype.clusteringOrderItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClusteringOrderItemContext);
    } else {
        return this.getTypedRuleContext(ClusteringOrderItemContext,i);
    }
};

ClusteringOrderContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

ClusteringOrderContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ClusteringOrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringOrder(this);
	}
};

ClusteringOrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringOrder(this);
	}
};

ClusteringOrderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringOrder(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringOrderContext = ClusteringOrderContext;

CqlParser.prototype.clusteringOrder = function() {

    var localctx = new ClusteringOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CqlParser.RULE_clusteringOrder);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1352;
        this.kwClustering();
        this.state = 1353;
        this.kwOrder();
        this.state = 1354;
        this.kwBy();
        this.state = 1355;
        this.syntaxBracketLr();
        this.state = 1356;
        this.clusteringOrderItem();
        this.state = 1362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1357;
            this.syntaxComma();
            this.state = 1358;
            this.clusteringOrderItem();
            this.state = 1364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1365;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClusteringOrderItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringOrderItem;
    return this;
}

ClusteringOrderItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringOrderItemContext.prototype.constructor = ClusteringOrderItemContext;

ClusteringOrderItemContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

ClusteringOrderItemContext.prototype.orderDirection = function() {
    return this.getTypedRuleContext(OrderDirectionContext,0);
};

ClusteringOrderItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringOrderItem(this);
	}
};

ClusteringOrderItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringOrderItem(this);
	}
};

ClusteringOrderItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringOrderItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringOrderItemContext = ClusteringOrderItemContext;

CqlParser.prototype.clusteringOrderItem = function() {

    var localctx = new ClusteringOrderItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CqlParser.RULE_clusteringOrderItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1367;
        this.columnSpec();
        this.state = 1369;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ASC || _la===CqlParser.K_DESC) {
            this.state = 1368;
            this.orderDirection();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptions;
    return this;
}

TableOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionsContext.prototype.constructor = TableOptionsContext;

TableOptionsContext.prototype.tableOptionItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableOptionItemContext);
    } else {
        return this.getTypedRuleContext(TableOptionItemContext,i);
    }
};

TableOptionsContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

TableOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptions(this);
	}
};

TableOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptions(this);
	}
};

TableOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionsContext = TableOptionsContext;

CqlParser.prototype.tableOptions = function() {

    var localctx = new TableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CqlParser.RULE_tableOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1371;
        this.tableOptionItem();
        this.state = 1377;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1372;
                this.kwAnd();
                this.state = 1373;
                this.tableOptionItem(); 
            }
            this.state = 1379;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableOptionItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionItem;
    return this;
}

TableOptionItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionItemContext.prototype.constructor = TableOptionItemContext;

TableOptionItemContext.prototype.tableOptionName = function() {
    return this.getTypedRuleContext(TableOptionNameContext,0);
};

TableOptionItemContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

TableOptionItemContext.prototype.tableOptionValue = function() {
    return this.getTypedRuleContext(TableOptionValueContext,0);
};

TableOptionItemContext.prototype.optionHash = function() {
    return this.getTypedRuleContext(OptionHashContext,0);
};

TableOptionItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptionItem(this);
	}
};

TableOptionItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptionItem(this);
	}
};

TableOptionItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptionItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionItemContext = TableOptionItemContext;

CqlParser.prototype.tableOptionItem = function() {

    var localctx = new TableOptionItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CqlParser.RULE_tableOptionItem);
    try {
        this.state = 1388;
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1380;
            this.tableOptionName();
            this.state = 1381;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1382;
            this.tableOptionValue();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1384;
            this.tableOptionName();
            this.state = 1385;
            this.match(CqlParser.OPERATOR_EQ);
            this.state = 1386;
            this.optionHash();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableOptionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionName;
    return this;
}

TableOptionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionNameContext.prototype.constructor = TableOptionNameContext;

TableOptionNameContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

TableOptionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptionName(this);
	}
};

TableOptionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptionName(this);
	}
};

TableOptionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionNameContext = TableOptionNameContext;

CqlParser.prototype.tableOptionName = function() {

    var localctx = new TableOptionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CqlParser.RULE_tableOptionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableOptionValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOptionValue;
    return this;
}

TableOptionValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionValueContext.prototype.constructor = TableOptionValueContext;

TableOptionValueContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

TableOptionValueContext.prototype.constantFloat = function() {
    return this.getTypedRuleContext(ConstantFloatContext,0);
};

TableOptionValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOptionValue(this);
	}
};

TableOptionValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOptionValue(this);
	}
};

TableOptionValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOptionValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOptionValueContext = TableOptionValueContext;

CqlParser.prototype.tableOptionValue = function() {

    var localctx = new TableOptionValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CqlParser.RULE_tableOptionValue);
    try {
        this.state = 1394;
        switch(this._input.LA(1)) {
        case CqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1392;
            this.constantString();
            break;
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1393;
            this.constantFloat();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionHashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHash;
    return this;
}

OptionHashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashContext.prototype.constructor = OptionHashContext;

OptionHashContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

OptionHashContext.prototype.optionHashItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionHashItemContext);
    } else {
        return this.getTypedRuleContext(OptionHashItemContext,i);
    }
};

OptionHashContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

OptionHashContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

OptionHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHash(this);
	}
};

OptionHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHash(this);
	}
};

OptionHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashContext = OptionHashContext;

CqlParser.prototype.optionHash = function() {

    var localctx = new OptionHashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CqlParser.RULE_optionHash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1396;
        this.syntaxBracketLc();
        this.state = 1397;
        this.optionHashItem();
        this.state = 1403;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1398;
            this.syntaxComma();
            this.state = 1399;
            this.optionHashItem();
            this.state = 1405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1406;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionHashItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashItem;
    return this;
}

OptionHashItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashItemContext.prototype.constructor = OptionHashItemContext;

OptionHashItemContext.prototype.optionHashKey = function() {
    return this.getTypedRuleContext(OptionHashKeyContext,0);
};

OptionHashItemContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

OptionHashItemContext.prototype.optionHashValue = function() {
    return this.getTypedRuleContext(OptionHashValueContext,0);
};

OptionHashItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHashItem(this);
	}
};

OptionHashItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHashItem(this);
	}
};

OptionHashItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHashItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashItemContext = OptionHashItemContext;

CqlParser.prototype.optionHashItem = function() {

    var localctx = new OptionHashItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CqlParser.RULE_optionHashItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1408;
        this.optionHashKey();
        this.state = 1409;
        this.match(CqlParser.COLON);
        this.state = 1410;
        this.optionHashValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionHashKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashKey;
    return this;
}

OptionHashKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashKeyContext.prototype.constructor = OptionHashKeyContext;

OptionHashKeyContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

OptionHashKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHashKey(this);
	}
};

OptionHashKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHashKey(this);
	}
};

OptionHashKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHashKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashKeyContext = OptionHashKeyContext;

CqlParser.prototype.optionHashKey = function() {

    var localctx = new OptionHashKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CqlParser.RULE_optionHashKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1412;
        this.constantString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionHashValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_optionHashValue;
    return this;
}

OptionHashValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionHashValueContext.prototype.constructor = OptionHashValueContext;

OptionHashValueContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

OptionHashValueContext.prototype.constantFloat = function() {
    return this.getTypedRuleContext(ConstantFloatContext,0);
};

OptionHashValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOptionHashValue(this);
	}
};

OptionHashValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOptionHashValue(this);
	}
};

OptionHashValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOptionHashValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OptionHashValueContext = OptionHashValueContext;

CqlParser.prototype.optionHashValue = function() {

    var localctx = new OptionHashValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CqlParser.RULE_optionHashValue);
    try {
        this.state = 1416;
        switch(this._input.LA(1)) {
        case CqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1414;
            this.constantString();
            break;
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1415;
            this.constantFloat();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnDefinitionList;
    return this;
}

ColumnDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionListContext.prototype.constructor = ColumnDefinitionListContext;

ColumnDefinitionListContext.prototype.columnDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnDefinitionContext);
    } else {
        return this.getTypedRuleContext(ColumnDefinitionContext,i);
    }
};

ColumnDefinitionListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ColumnDefinitionListContext.prototype.primaryKeyElement = function() {
    return this.getTypedRuleContext(PrimaryKeyElementContext,0);
};

ColumnDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnDefinitionList(this);
	}
};

ColumnDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnDefinitionList(this);
	}
};

ColumnDefinitionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnDefinitionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnDefinitionListContext = ColumnDefinitionListContext;

CqlParser.prototype.columnDefinitionList = function() {

    var localctx = new ColumnDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CqlParser.RULE_columnDefinitionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1418;
        this.columnDefinition();
        this.state = 1424;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1419;
                this.syntaxComma();
                this.state = 1420;
                this.columnDefinition(); 
            }
            this.state = 1426;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
        }

        this.state = 1430;
        _la = this._input.LA(1);
        if(_la===CqlParser.COMMA) {
            this.state = 1427;
            this.syntaxComma();
            this.state = 1428;
            this.primaryKeyElement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnDefinition;
    return this;
}

ColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.columnUnknown = function() {
    return this.getTypedRuleContext(ColumnUnknownContext,0);
};

ColumnDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ColumnDefinitionContext.prototype.primaryKeyModifier = function() {
    return this.getTypedRuleContext(PrimaryKeyModifierContext,0);
};

ColumnDefinitionContext.prototype.kwStatic = function() {
    return this.getTypedRuleContext(KwStaticContext,0);
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnDefinitionContext = ColumnDefinitionContext;

CqlParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CqlParser.RULE_columnDefinition);
    try {
        this.state = 1444;
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1432;
            this.columnUnknown();
            this.state = 1433;
            this.dataType();
            this.state = 1434;
            this.primaryKeyModifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1436;
            this.columnUnknown();
            this.state = 1437;
            this.dataType();
            this.state = 1438;
            this.kwStatic();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1440;
            this.columnUnknown();
            this.state = 1441;
            this.dataType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.columnDefinition"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryKeyModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyModifier;
    return this;
}

PrimaryKeyModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyModifierContext.prototype.constructor = PrimaryKeyModifierContext;

PrimaryKeyModifierContext.prototype.kwPrimary = function() {
    return this.getTypedRuleContext(KwPrimaryContext,0);
};

PrimaryKeyModifierContext.prototype.kwKey = function() {
    return this.getTypedRuleContext(KwKeyContext,0);
};

PrimaryKeyModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyModifier(this);
	}
};

PrimaryKeyModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyModifier(this);
	}
};

PrimaryKeyModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyModifierContext = PrimaryKeyModifierContext;

CqlParser.prototype.primaryKeyModifier = function() {

    var localctx = new PrimaryKeyModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CqlParser.RULE_primaryKeyModifier);
    try {
        this.state = 1452;
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1446;
            this.kwPrimary();
            this.state = 1447;
            this.kwKey();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1449;
            this.kwPrimary();
             this.notifyErrorListeners("rule.primaryKeyModifier"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryKeyElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyElement;
    return this;
}

PrimaryKeyElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyElementContext.prototype.constructor = PrimaryKeyElementContext;

PrimaryKeyElementContext.prototype.kwPrimary = function() {
    return this.getTypedRuleContext(KwPrimaryContext,0);
};

PrimaryKeyElementContext.prototype.kwKey = function() {
    return this.getTypedRuleContext(KwKeyContext,0);
};

PrimaryKeyElementContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

PrimaryKeyElementContext.prototype.primaryKeyDefinition = function() {
    return this.getTypedRuleContext(PrimaryKeyDefinitionContext,0);
};

PrimaryKeyElementContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

PrimaryKeyElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyElement(this);
	}
};

PrimaryKeyElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyElement(this);
	}
};

PrimaryKeyElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyElementContext = PrimaryKeyElementContext;

CqlParser.prototype.primaryKeyElement = function() {

    var localctx = new PrimaryKeyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CqlParser.RULE_primaryKeyElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1454;
        this.kwPrimary();
        this.state = 1455;
        this.kwKey();
        this.state = 1456;
        this.syntaxBracketLr();
        this.state = 1457;
        this.primaryKeyDefinition();
        this.state = 1458;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryKeyDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyDefinition;
    return this;
}

PrimaryKeyDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyDefinitionContext.prototype.constructor = PrimaryKeyDefinitionContext;

PrimaryKeyDefinitionContext.prototype.primaryKeySimple = function() {
    return this.getTypedRuleContext(PrimaryKeySimpleContext,0);
};

PrimaryKeyDefinitionContext.prototype.primaryKeyComposite = function() {
    return this.getTypedRuleContext(PrimaryKeyCompositeContext,0);
};

PrimaryKeyDefinitionContext.prototype.compoundKey = function() {
    return this.getTypedRuleContext(CompoundKeyContext,0);
};

PrimaryKeyDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyDefinition(this);
	}
};

PrimaryKeyDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyDefinition(this);
	}
};

PrimaryKeyDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyDefinitionContext = PrimaryKeyDefinitionContext;

CqlParser.prototype.primaryKeyDefinition = function() {

    var localctx = new PrimaryKeyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CqlParser.RULE_primaryKeyDefinition);
    try {
        this.state = 1463;
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1460;
            this.primaryKeySimple();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1461;
            this.primaryKeyComposite();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1462;
            this.compoundKey();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryKeySimpleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeySimple;
    return this;
}

PrimaryKeySimpleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeySimpleContext.prototype.constructor = PrimaryKeySimpleContext;

PrimaryKeySimpleContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

PrimaryKeySimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeySimple(this);
	}
};

PrimaryKeySimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeySimple(this);
	}
};

PrimaryKeySimpleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeySimple(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeySimpleContext = PrimaryKeySimpleContext;

CqlParser.prototype.primaryKeySimple = function() {

    var localctx = new PrimaryKeySimpleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CqlParser.RULE_primaryKeySimple);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1465;
        this.columnSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryKeyCompositeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_primaryKeyComposite;
    return this;
}

PrimaryKeyCompositeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyCompositeContext.prototype.constructor = PrimaryKeyCompositeContext;

PrimaryKeyCompositeContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

PrimaryKeyCompositeContext.prototype.partitionKeyList = function() {
    return this.getTypedRuleContext(PartitionKeyListContext,0);
};

PrimaryKeyCompositeContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

PrimaryKeyCompositeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPrimaryKeyComposite(this);
	}
};

PrimaryKeyCompositeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPrimaryKeyComposite(this);
	}
};

PrimaryKeyCompositeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPrimaryKeyComposite(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PrimaryKeyCompositeContext = PrimaryKeyCompositeContext;

CqlParser.prototype.primaryKeyComposite = function() {

    var localctx = new PrimaryKeyCompositeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CqlParser.RULE_primaryKeyComposite);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1467;
        this.syntaxBracketLr();
        this.state = 1468;
        this.partitionKeyList();
        this.state = 1469;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompoundKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_compoundKey;
    return this;
}

CompoundKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundKeyContext.prototype.constructor = CompoundKeyContext;

CompoundKeyContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

CompoundKeyContext.prototype.syntaxComma = function() {
    return this.getTypedRuleContext(SyntaxCommaContext,0);
};

CompoundKeyContext.prototype.clusteringKeyList = function() {
    return this.getTypedRuleContext(ClusteringKeyListContext,0);
};

CompoundKeyContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CompoundKeyContext.prototype.partitionKeyList = function() {
    return this.getTypedRuleContext(PartitionKeyListContext,0);
};

CompoundKeyContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CompoundKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCompoundKey(this);
	}
};

CompoundKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCompoundKey(this);
	}
};

CompoundKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCompoundKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CompoundKeyContext = CompoundKeyContext;

CqlParser.prototype.compoundKey = function() {

    var localctx = new CompoundKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CqlParser.RULE_compoundKey);
    try {
        this.state = 1481;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1471;
            this.columnSpec();

            this.state = 1472;
            this.syntaxComma();
            this.state = 1473;
            this.clusteringKeyList();
            break;
        case CqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1475;
            this.syntaxBracketLr();
            this.state = 1476;
            this.partitionKeyList();
            this.state = 1477;
            this.syntaxBracketRr();

            this.state = 1478;
            this.syntaxComma();
            this.state = 1479;
            this.clusteringKeyList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionKeyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_partitionKeyList;
    return this;
}

PartitionKeyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionKeyListContext.prototype.constructor = PartitionKeyListContext;

PartitionKeyListContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

PartitionKeyListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

PartitionKeyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPartitionKeyList(this);
	}
};

PartitionKeyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPartitionKeyList(this);
	}
};

PartitionKeyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPartitionKeyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PartitionKeyListContext = PartitionKeyListContext;

CqlParser.prototype.partitionKeyList = function() {

    var localctx = new PartitionKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CqlParser.RULE_partitionKeyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.columnSpec();
        this.state = 1489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1484;
            this.syntaxComma();
            this.state = 1485;
            this.columnSpec();
            this.state = 1491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClusteringKeyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_clusteringKeyList;
    return this;
}

ClusteringKeyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteringKeyListContext.prototype.constructor = ClusteringKeyListContext;

ClusteringKeyListContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

ClusteringKeyListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ClusteringKeyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterClusteringKeyList(this);
	}
};

ClusteringKeyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitClusteringKeyList(this);
	}
};

ClusteringKeyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitClusteringKeyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ClusteringKeyListContext = ClusteringKeyListContext;

CqlParser.prototype.clusteringKeyList = function() {

    var localctx = new ClusteringKeyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CqlParser.RULE_clusteringKeyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1492;
        this.columnSpec();
        this.state = 1498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1493;
            this.syntaxComma();
            this.state = 1494;
            this.columnSpec();
            this.state = 1500;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApplyBatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_applyBatch;
    return this;
}

ApplyBatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApplyBatchContext.prototype.constructor = ApplyBatchContext;

ApplyBatchContext.prototype.kwApply = function() {
    return this.getTypedRuleContext(KwApplyContext,0);
};

ApplyBatchContext.prototype.kwBatch = function() {
    return this.getTypedRuleContext(KwBatchContext,0);
};

ApplyBatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterApplyBatch(this);
	}
};

ApplyBatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitApplyBatch(this);
	}
};

ApplyBatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitApplyBatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ApplyBatchContext = ApplyBatchContext;

CqlParser.prototype.applyBatch = function() {

    var localctx = new ApplyBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CqlParser.RULE_applyBatch);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1501;
        this.kwApply();
        this.state = 1502;
        this.kwBatch();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BeginBatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_beginBatch;
    return this;
}

BeginBatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginBatchContext.prototype.constructor = BeginBatchContext;

BeginBatchContext.prototype.beginBatchSpec = function() {
    return this.getTypedRuleContext(BeginBatchSpecContext,0);
};

BeginBatchContext.prototype.delete = function() {
    return this.getTypedRuleContext(DeleteContext,0);
};

BeginBatchContext.prototype.insert = function() {
    return this.getTypedRuleContext(InsertContext,0);
};

BeginBatchContext.prototype.update = function() {
    return this.getTypedRuleContext(UpdateContext,0);
};

BeginBatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBeginBatch(this);
	}
};

BeginBatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBeginBatch(this);
	}
};

BeginBatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBeginBatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BeginBatchContext = BeginBatchContext;

CqlParser.prototype.beginBatch = function() {

    var localctx = new BeginBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CqlParser.RULE_beginBatch);
    try {
        this.state = 1513;
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1504;
            this.beginBatchSpec();
            this.state = 1505;
            this.delete();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1507;
            this.beginBatchSpec();
            this.state = 1508;
            this.insert();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1510;
            this.beginBatchSpec();
            this.state = 1511;
            this.update();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BeginBatchSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_beginBatchSpec;
    return this;
}

BeginBatchSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginBatchSpecContext.prototype.constructor = BeginBatchSpecContext;

BeginBatchSpecContext.prototype.kwBegin = function() {
    return this.getTypedRuleContext(KwBeginContext,0);
};

BeginBatchSpecContext.prototype.kwBatch = function() {
    return this.getTypedRuleContext(KwBatchContext,0);
};

BeginBatchSpecContext.prototype.batchType = function() {
    return this.getTypedRuleContext(BatchTypeContext,0);
};

BeginBatchSpecContext.prototype.usingTimestampSpec = function() {
    return this.getTypedRuleContext(UsingTimestampSpecContext,0);
};

BeginBatchSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBeginBatchSpec(this);
	}
};

BeginBatchSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBeginBatchSpec(this);
	}
};

BeginBatchSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBeginBatchSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BeginBatchSpecContext = BeginBatchSpecContext;

CqlParser.prototype.beginBatchSpec = function() {

    var localctx = new BeginBatchSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CqlParser.RULE_beginBatchSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1515;
        this.kwBegin();
        this.state = 1517;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_LOGGED || _la===CqlParser.K_UNLOGGED) {
            this.state = 1516;
            this.batchType();
        }

        this.state = 1519;
        this.kwBatch();
        this.state = 1521;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1520;
            this.usingTimestampSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_batchType;
    return this;
}

BatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BatchTypeContext.prototype.constructor = BatchTypeContext;

BatchTypeContext.prototype.kwLogged = function() {
    return this.getTypedRuleContext(KwLoggedContext,0);
};

BatchTypeContext.prototype.kwUnlogged = function() {
    return this.getTypedRuleContext(KwUnloggedContext,0);
};

BatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBatchType(this);
	}
};

BatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBatchType(this);
	}
};

BatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BatchTypeContext = BatchTypeContext;

CqlParser.prototype.batchType = function() {

    var localctx = new BatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CqlParser.RULE_batchType);
    try {
        this.state = 1525;
        switch(this._input.LA(1)) {
        case CqlParser.K_LOGGED:
            this.enterOuterAlt(localctx, 1);
            this.state = 1523;
            this.kwLogged();
            break;
        case CqlParser.K_UNLOGGED:
            this.enterOuterAlt(localctx, 2);
            this.state = 1524;
            this.kwUnlogged();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_alterKeyspace;
    return this;
}

AlterKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterKeyspaceContext.prototype.constructor = AlterKeyspaceContext;

AlterKeyspaceContext.prototype.kwAlter = function() {
    return this.getTypedRuleContext(KwAlterContext,0);
};

AlterKeyspaceContext.prototype.kwKeyspace = function() {
    return this.getTypedRuleContext(KwKeyspaceContext,0);
};

AlterKeyspaceContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

AlterKeyspaceContext.prototype.kwWith = function() {
    return this.getTypedRuleContext(KwWithContext,0);
};

AlterKeyspaceContext.prototype.kwReplication = function() {
    return this.getTypedRuleContext(KwReplicationContext,0);
};

AlterKeyspaceContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

AlterKeyspaceContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AlterKeyspaceContext.prototype.replicationList = function() {
    return this.getTypedRuleContext(ReplicationListContext,0);
};

AlterKeyspaceContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AlterKeyspaceContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

AlterKeyspaceContext.prototype.durableWrites = function() {
    return this.getTypedRuleContext(DurableWritesContext,0);
};

AlterKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAlterKeyspace(this);
	}
};

AlterKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAlterKeyspace(this);
	}
};

AlterKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAlterKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AlterKeyspaceContext = AlterKeyspaceContext;

CqlParser.prototype.alterKeyspace = function() {

    var localctx = new AlterKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CqlParser.RULE_alterKeyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1527;
        this.kwAlter();
        this.state = 1528;
        this.kwKeyspace();
        this.state = 1529;
        this.keyspace();
        this.state = 1530;
        this.kwWith();
        this.state = 1531;
        this.kwReplication();
        this.state = 1532;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 1533;
        this.syntaxBracketLc();
        this.state = 1534;
        this.replicationList();
        this.state = 1535;
        this.syntaxBracketRc();
        this.state = 1539;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_AND) {
            this.state = 1536;
            this.kwAnd();
            this.state = 1537;
            this.durableWrites();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReplicationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_replicationList;
    return this;
}

ReplicationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationListContext.prototype.constructor = ReplicationListContext;

ReplicationListContext.prototype.replicationListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReplicationListItemContext);
    } else {
        return this.getTypedRuleContext(ReplicationListItemContext,i);
    }
};

ReplicationListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ReplicationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterReplicationList(this);
	}
};

ReplicationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitReplicationList(this);
	}
};

ReplicationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitReplicationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ReplicationListContext = ReplicationListContext;

CqlParser.prototype.replicationList = function() {

    var localctx = new ReplicationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CqlParser.RULE_replicationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1541;
        this.replicationListItem();
        this.state = 1547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1542;
            this.syntaxComma();
            this.state = 1543;
            this.replicationListItem();
            this.state = 1549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReplicationListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_replicationListItem;
    return this;
}

ReplicationListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationListItemContext.prototype.constructor = ReplicationListItemContext;

ReplicationListItemContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.STRING_LITERAL);
    } else {
        return this.getToken(CqlParser.STRING_LITERAL, i);
    }
};


ReplicationListItemContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

ReplicationListItemContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
};

ReplicationListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterReplicationListItem(this);
	}
};

ReplicationListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitReplicationListItem(this);
	}
};

ReplicationListItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitReplicationListItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ReplicationListItemContext = ReplicationListItemContext;

CqlParser.prototype.replicationListItem = function() {

    var localctx = new ReplicationListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CqlParser.RULE_replicationListItem);
    try {
        this.state = 1556;
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1550;
            this.match(CqlParser.STRING_LITERAL);
            this.state = 1551;
            this.match(CqlParser.COLON);
            this.state = 1552;
            this.match(CqlParser.STRING_LITERAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1553;
            this.match(CqlParser.STRING_LITERAL);
            this.state = 1554;
            this.match(CqlParser.COLON);
            this.state = 1555;
            this.match(CqlParser.DECIMAL_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DurableWritesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_durableWrites;
    return this;
}

DurableWritesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DurableWritesContext.prototype.constructor = DurableWritesContext;

DurableWritesContext.prototype.kwDurableWrites = function() {
    return this.getTypedRuleContext(KwDurableWritesContext,0);
};

DurableWritesContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

DurableWritesContext.prototype.constantBoolean = function() {
    return this.getTypedRuleContext(ConstantBooleanContext,0);
};

DurableWritesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDurableWrites(this);
	}
};

DurableWritesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDurableWrites(this);
	}
};

DurableWritesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDurableWrites(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DurableWritesContext = DurableWritesContext;

CqlParser.prototype.durableWrites = function() {

    var localctx = new DurableWritesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CqlParser.RULE_durableWrites);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1558;
        this.kwDurableWrites();
        this.state = 1559;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 1560;
        this.constantBoolean();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_use;
    return this;
}

UseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseContext.prototype.constructor = UseContext;

UseContext.prototype.kwUse = function() {
    return this.getTypedRuleContext(KwUseContext,0);
};

UseContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

UseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUse(this);
	}
};

UseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUse(this);
	}
};

UseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UseContext = UseContext;

CqlParser.prototype.use = function() {

    var localctx = new UseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CqlParser.RULE_use);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1562;
        this.kwUse();
        this.state = 1563;
        this.keyspace();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TruncateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_truncate;
    return this;
}

TruncateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TruncateContext.prototype.constructor = TruncateContext;

TruncateContext.prototype.kwTruncate = function() {
    return this.getTypedRuleContext(KwTruncateContext,0);
};

TruncateContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

TruncateContext.prototype.kwTable = function() {
    return this.getTypedRuleContext(KwTableContext,0);
};

TruncateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTruncate(this);
	}
};

TruncateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTruncate(this);
	}
};

TruncateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTruncate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TruncateContext = TruncateContext;

CqlParser.prototype.truncate = function() {

    var localctx = new TruncateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CqlParser.RULE_truncate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1565;
        this.kwTruncate();
        this.state = 1567;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_TABLE) {
            this.state = 1566;
            this.kwTable();
        }

        this.state = 1569;
        this.tableSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createIndex;
    return this;
}

CreateIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexContext.prototype.constructor = CreateIndexContext;

CreateIndexContext.prototype.kwCreate = function() {
    return this.getTypedRuleContext(KwCreateContext,0);
};

CreateIndexContext.prototype.kwIndex = function() {
    return this.getTypedRuleContext(KwIndexContext,0);
};

CreateIndexContext.prototype.createIndexSubject = function() {
    return this.getTypedRuleContext(CreateIndexSubjectContext,0);
};

CreateIndexContext.prototype.createIndexDef = function() {
    return this.getTypedRuleContext(CreateIndexDefContext,0);
};

CreateIndexContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

CreateIndexContext.prototype.objectUnknown = function() {
    return this.getTypedRuleContext(ObjectUnknownContext,0);
};

CreateIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateIndex(this);
	}
};

CreateIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateIndex(this);
	}
};

CreateIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateIndexContext = CreateIndexContext;

CqlParser.prototype.createIndex = function() {

    var localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CqlParser.RULE_createIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1571;
        this.kwCreate();
        this.state = 1572;
        this.kwIndex();
        this.state = 1574;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_IF) {
            this.state = 1573;
            this.ifNotExist();
        }

        this.state = 1577;
        _la = this._input.LA(1);
        if(_la===CqlParser.DQUOTE || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_INPUT - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0)) {
            this.state = 1576;
            this.objectUnknown();
        }

        this.state = 1579;
        this.createIndexSubject();
        this.state = 1580;
        this.createIndexDef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateIndexSubjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createIndexSubject;
    return this;
}

CreateIndexSubjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexSubjectContext.prototype.constructor = CreateIndexSubjectContext;

CreateIndexSubjectContext.prototype.kwOn = function() {
    return this.getTypedRuleContext(KwOnContext,0);
};

CreateIndexSubjectContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

CreateIndexSubjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateIndexSubject(this);
	}
};

CreateIndexSubjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateIndexSubject(this);
	}
};

CreateIndexSubjectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateIndexSubject(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateIndexSubjectContext = CreateIndexSubjectContext;

CqlParser.prototype.createIndexSubject = function() {

    var localctx = new CreateIndexSubjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CqlParser.RULE_createIndexSubject);
    try {
        this.state = 1586;
        switch(this._input.LA(1)) {
        case CqlParser.K_ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 1582;
            this.kwOn();
            this.state = 1583;
            this.tableSpec();
            break;
        case CqlParser.EOF:
        case CqlParser.LR_BRACKET:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.createIndexSubject"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_index;
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

IndexContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

IndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndex(this);
	}
};

IndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndex(this);
	}
};

IndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexContext = IndexContext;

CqlParser.prototype.index = function() {

    var localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CqlParser.RULE_index);
    try {
        this.state = 1590;
        switch(this._input.LA(1)) {
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1588;
            this.match(CqlParser.OBJECT_NAME);
            break;
        case CqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            this.constantString();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateIndexDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createIndexDef;
    return this;
}

CreateIndexDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexDefContext.prototype.constructor = CreateIndexDefContext;

CreateIndexDefContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

CreateIndexDefContext.prototype.createIndexTarget = function() {
    return this.getTypedRuleContext(CreateIndexTargetContext,0);
};

CreateIndexDefContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

CreateIndexDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateIndexDef(this);
	}
};

CreateIndexDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateIndexDef(this);
	}
};

CreateIndexDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateIndexDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateIndexDefContext = CreateIndexDefContext;

CqlParser.prototype.createIndexDef = function() {

    var localctx = new CreateIndexDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CqlParser.RULE_createIndexDef);
    try {
        this.state = 1597;
        switch(this._input.LA(1)) {
        case CqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1592;
            this.syntaxBracketLr();
            this.state = 1593;
            this.createIndexTarget();
            this.state = 1594;
            this.syntaxBracketRr();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.createIndexDef"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateIndexTargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_createIndexTarget;
    return this;
}

CreateIndexTargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexTargetContext.prototype.constructor = CreateIndexTargetContext;

CreateIndexTargetContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

CreateIndexTargetContext.prototype.indexKeysSpec = function() {
    return this.getTypedRuleContext(IndexKeysSpecContext,0);
};

CreateIndexTargetContext.prototype.indexEntriesSSpec = function() {
    return this.getTypedRuleContext(IndexEntriesSSpecContext,0);
};

CreateIndexTargetContext.prototype.indexFullSpec = function() {
    return this.getTypedRuleContext(IndexFullSpecContext,0);
};

CreateIndexTargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCreateIndexTarget(this);
	}
};

CreateIndexTargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCreateIndexTarget(this);
	}
};

CreateIndexTargetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCreateIndexTarget(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CreateIndexTargetContext = CreateIndexTargetContext;

CqlParser.prototype.createIndexTarget = function() {

    var localctx = new CreateIndexTargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CqlParser.RULE_createIndexTarget);
    try {
        this.state = 1604;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1599;
            this.columnSpec();
            break;
        case CqlParser.K_KEYS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1600;
            this.indexKeysSpec();
            break;
        case CqlParser.K_ENTRIES:
            this.enterOuterAlt(localctx, 3);
            this.state = 1601;
            this.indexEntriesSSpec();
            break;
        case CqlParser.K_FULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1602;
            this.indexFullSpec();
            break;
        case CqlParser.RR_BRACKET:
            this.enterOuterAlt(localctx, 5);
             this.notifyErrorListeners("rule.createIndexTarget"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexKeysSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexKeysSpec;
    return this;
}

IndexKeysSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexKeysSpecContext.prototype.constructor = IndexKeysSpecContext;

IndexKeysSpecContext.prototype.kwKeys = function() {
    return this.getTypedRuleContext(KwKeysContext,0);
};

IndexKeysSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

IndexKeysSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

IndexKeysSpecContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

IndexKeysSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexKeysSpec(this);
	}
};

IndexKeysSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexKeysSpec(this);
	}
};

IndexKeysSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexKeysSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexKeysSpecContext = IndexKeysSpecContext;

CqlParser.prototype.indexKeysSpec = function() {

    var localctx = new IndexKeysSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CqlParser.RULE_indexKeysSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1606;
        this.kwKeys();
        this.state = 1607;
        this.syntaxBracketLr();
        this.state = 1610;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.state = 1608;
            this.columnSpec();
            break;
        case CqlParser.RR_BRACKET:
             this.notifyErrorListeners("rule.indexKeysSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1612;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexEntriesSSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexEntriesSSpec;
    return this;
}

IndexEntriesSSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexEntriesSSpecContext.prototype.constructor = IndexEntriesSSpecContext;

IndexEntriesSSpecContext.prototype.kwEntries = function() {
    return this.getTypedRuleContext(KwEntriesContext,0);
};

IndexEntriesSSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

IndexEntriesSSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

IndexEntriesSSpecContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

IndexEntriesSSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexEntriesSSpec(this);
	}
};

IndexEntriesSSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexEntriesSSpec(this);
	}
};

IndexEntriesSSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexEntriesSSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexEntriesSSpecContext = IndexEntriesSSpecContext;

CqlParser.prototype.indexEntriesSSpec = function() {

    var localctx = new IndexEntriesSSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CqlParser.RULE_indexEntriesSSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1614;
        this.kwEntries();
        this.state = 1615;
        this.syntaxBracketLr();
        this.state = 1618;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.state = 1616;
            this.columnSpec();
            break;
        case CqlParser.RR_BRACKET:
             this.notifyErrorListeners("rule.indexEntriesSSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1620;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexFullSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexFullSpec;
    return this;
}

IndexFullSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexFullSpecContext.prototype.constructor = IndexFullSpecContext;

IndexFullSpecContext.prototype.kwFull = function() {
    return this.getTypedRuleContext(KwFullContext,0);
};

IndexFullSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

IndexFullSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

IndexFullSpecContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

IndexFullSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexFullSpec(this);
	}
};

IndexFullSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexFullSpec(this);
	}
};

IndexFullSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexFullSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexFullSpecContext = IndexFullSpecContext;

CqlParser.prototype.indexFullSpec = function() {

    var localctx = new IndexFullSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CqlParser.RULE_indexFullSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1622;
        this.kwFull();
        this.state = 1623;
        this.syntaxBracketLr();
        this.state = 1626;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.state = 1624;
            this.columnSpec();
            break;
        case CqlParser.RR_BRACKET:
             this.notifyErrorListeners("rule.indexFullSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1628;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_delete;
    return this;
}

DeleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteContext.prototype.constructor = DeleteContext;

DeleteContext.prototype.kwDelete = function() {
    return this.getTypedRuleContext(KwDeleteContext,0);
};

DeleteContext.prototype.fromSpec = function() {
    return this.getTypedRuleContext(FromSpecContext,0);
};

DeleteContext.prototype.whereSpec = function() {
    return this.getTypedRuleContext(WhereSpecContext,0);
};

DeleteContext.prototype.deleteColumnList = function() {
    return this.getTypedRuleContext(DeleteColumnListContext,0);
};

DeleteContext.prototype.usingTimestampSpec = function() {
    return this.getTypedRuleContext(UsingTimestampSpecContext,0);
};

DeleteContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

DeleteContext.prototype.ifSpec = function() {
    return this.getTypedRuleContext(IfSpecContext,0);
};

DeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDelete(this);
	}
};

DeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDelete(this);
	}
};

DeleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDelete(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DeleteContext = DeleteContext;

CqlParser.prototype.delete = function() {

    var localctx = new DeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CqlParser.RULE_delete);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.kwDelete();
        this.state = 1632;
        _la = this._input.LA(1);
        if(_la===CqlParser.DQUOTE || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_INPUT - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0)) {
            this.state = 1631;
            this.deleteColumnList();
        }

        this.state = 1634;
        this.fromSpec();
        this.state = 1636;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1635;
            this.usingTimestampSpec();
        }

        this.state = 1640;
        switch(this._input.LA(1)) {
        case CqlParser.K_WHERE:
            this.state = 1638;
            this.whereSpec();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_IF:
             this.notifyErrorListeners("rule.whereSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1644;
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        if(la_===1) {
            this.state = 1642;
            this.ifExist();

        } else if(la_===2) {
            this.state = 1643;
            this.ifSpec();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteColumnList;
    return this;
}

DeleteColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteColumnListContext.prototype.constructor = DeleteColumnListContext;

DeleteColumnListContext.prototype.deleteColumnItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeleteColumnItemContext);
    } else {
        return this.getTypedRuleContext(DeleteColumnItemContext,i);
    }
};

DeleteColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

DeleteColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDeleteColumnList(this);
	}
};

DeleteColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDeleteColumnList(this);
	}
};

DeleteColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDeleteColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DeleteColumnListContext = DeleteColumnListContext;

CqlParser.prototype.deleteColumnList = function() {

    var localctx = new DeleteColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CqlParser.RULE_deleteColumnList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1646;
        this.deleteColumnItem();
        this.state = 1652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1647;
            this.syntaxComma();
            this.state = 1648;
            this.deleteColumnItem();
            this.state = 1654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteColumnItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_deleteColumnItem;
    return this;
}

DeleteColumnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteColumnItemContext.prototype.constructor = DeleteColumnItemContext;

DeleteColumnItemContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

DeleteColumnItemContext.prototype.syntaxBracketLs = function() {
    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
};

DeleteColumnItemContext.prototype.syntaxBracketRs = function() {
    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
};

DeleteColumnItemContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

DeleteColumnItemContext.prototype.constantDecimal = function() {
    return this.getTypedRuleContext(ConstantDecimalContext,0);
};

DeleteColumnItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDeleteColumnItem(this);
	}
};

DeleteColumnItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDeleteColumnItem(this);
	}
};

DeleteColumnItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDeleteColumnItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DeleteColumnItemContext = DeleteColumnItemContext;

CqlParser.prototype.deleteColumnItem = function() {

    var localctx = new DeleteColumnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CqlParser.RULE_deleteColumnItem);
    try {
        this.state = 1664;
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1655;
            this.columnSpec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1656;
            this.columnSpec();
            this.state = 1657;
            this.syntaxBracketLs();
            this.state = 1660;
            switch(this._input.LA(1)) {
            case CqlParser.STRING_LITERAL:
                this.state = 1658;
                this.constantString();
                break;
            case CqlParser.DECIMAL_LITERAL:
                this.state = 1659;
                this.constantDecimal();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1662;
            this.syntaxBracketRs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_update;
    return this;
}

UpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateContext.prototype.constructor = UpdateContext;

UpdateContext.prototype.kwUpdate = function() {
    return this.getTypedRuleContext(KwUpdateContext,0);
};

UpdateContext.prototype.tableOrMaterializedViewSpec = function() {
    return this.getTypedRuleContext(TableOrMaterializedViewSpecContext,0);
};

UpdateContext.prototype.updateAssignments = function() {
    return this.getTypedRuleContext(UpdateAssignmentsContext,0);
};

UpdateContext.prototype.whereSpec = function() {
    return this.getTypedRuleContext(WhereSpecContext,0);
};

UpdateContext.prototype.usingTtlTimestamp = function() {
    return this.getTypedRuleContext(UsingTtlTimestampContext,0);
};

UpdateContext.prototype.ifExist = function() {
    return this.getTypedRuleContext(IfExistContext,0);
};

UpdateContext.prototype.ifSpec = function() {
    return this.getTypedRuleContext(IfSpecContext,0);
};

UpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUpdate(this);
	}
};

UpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUpdate(this);
	}
};

UpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UpdateContext = UpdateContext;

CqlParser.prototype.update = function() {

    var localctx = new UpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CqlParser.RULE_update);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this.kwUpdate();
        this.state = 1667;
        this.tableOrMaterializedViewSpec();
        this.state = 1669;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1668;
            this.usingTtlTimestamp();
        }

        this.state = 1671;
        this.updateAssignments();
        this.state = 1674;
        switch(this._input.LA(1)) {
        case CqlParser.K_WHERE:
            this.state = 1672;
            this.whereSpec();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_IF:
             this.notifyErrorListeners("rule.whereSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1678;
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 1676;
            this.ifExist();

        } else if(la_===2) {
            this.state = 1677;
            this.ifSpec();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifSpec;
    return this;
}

IfSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfSpecContext.prototype.constructor = IfSpecContext;

IfSpecContext.prototype.kwIf = function() {
    return this.getTypedRuleContext(KwIfContext,0);
};

IfSpecContext.prototype.ifConditionList = function() {
    return this.getTypedRuleContext(IfConditionListContext,0);
};

IfSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfSpec(this);
	}
};

IfSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfSpec(this);
	}
};

IfSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfSpecContext = IfSpecContext;

CqlParser.prototype.ifSpec = function() {

    var localctx = new IfSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CqlParser.RULE_ifSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1680;
        this.kwIf();
        this.state = 1681;
        this.ifConditionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfConditionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifConditionList;
    return this;
}

IfConditionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfConditionListContext.prototype.constructor = IfConditionListContext;

IfConditionListContext.prototype.ifCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfConditionContext);
    } else {
        return this.getTypedRuleContext(IfConditionContext,i);
    }
};

IfConditionListContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

IfConditionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfConditionList(this);
	}
};

IfConditionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfConditionList(this);
	}
};

IfConditionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfConditionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfConditionListContext = IfConditionListContext;

CqlParser.prototype.ifConditionList = function() {

    var localctx = new IfConditionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CqlParser.RULE_ifConditionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1683;
        this.ifCondition();
        this.state = 1689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 1684;
            this.kwAnd();
            this.state = 1685;
            this.ifCondition();
            this.state = 1691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifCondition;
    return this;
}

IfConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfConditionContext.prototype.constructor = IfConditionContext;

IfConditionContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

IfConditionContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

IfConditionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

IfConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfCondition(this);
	}
};

IfConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfCondition(this);
	}
};

IfConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfConditionContext = IfConditionContext;

CqlParser.prototype.ifCondition = function() {

    var localctx = new IfConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CqlParser.RULE_ifCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this.match(CqlParser.OBJECT_NAME);
        this.state = 1693;
        this.match(CqlParser.OPERATOR_EQ);
        this.state = 1694;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateAssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_updateAssignments;
    return this;
}

UpdateAssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateAssignmentsContext.prototype.constructor = UpdateAssignmentsContext;

UpdateAssignmentsContext.prototype.kwSet = function() {
    return this.getTypedRuleContext(KwSetContext,0);
};

UpdateAssignmentsContext.prototype.updateAssignmentElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdateAssignmentElementContext);
    } else {
        return this.getTypedRuleContext(UpdateAssignmentElementContext,i);
    }
};

UpdateAssignmentsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

UpdateAssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUpdateAssignments(this);
	}
};

UpdateAssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUpdateAssignments(this);
	}
};

UpdateAssignmentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUpdateAssignments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UpdateAssignmentsContext = UpdateAssignmentsContext;

CqlParser.prototype.updateAssignments = function() {

    var localctx = new UpdateAssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CqlParser.RULE_updateAssignments);
    var _la = 0; // Token type
    try {
        this.state = 1707;
        switch(this._input.LA(1)) {
        case CqlParser.K_SET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1696;
            this.kwSet();

            this.state = 1697;
            this.updateAssignmentElement();
            this.state = 1703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1698;
                this.syntaxComma();
                this.state = 1699;
                this.updateAssignmentElement();
                this.state = 1705;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_IF:
        case CqlParser.K_WHERE:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.updateAssignments"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateAssignmentElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_updateAssignmentElement;
    return this;
}

UpdateAssignmentElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateAssignmentElementContext.prototype.constructor = UpdateAssignmentElementContext;

UpdateAssignmentElementContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

UpdateAssignmentElementContext.prototype.syntaxOperatorEq = function() {
    return this.getTypedRuleContext(SyntaxOperatorEqContext,0);
};

UpdateAssignmentElementContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

UpdateAssignmentElementContext.prototype.constantCollection = function() {
    return this.getTypedRuleContext(ConstantCollectionContext,0);
};

UpdateAssignmentElementContext.prototype.constantDecimal = function() {
    return this.getTypedRuleContext(ConstantDecimalContext,0);
};

UpdateAssignmentElementContext.prototype.syntaxPlus = function() {
    return this.getTypedRuleContext(SyntaxPlusContext,0);
};

UpdateAssignmentElementContext.prototype.syntaxMinus = function() {
    return this.getTypedRuleContext(SyntaxMinusContext,0);
};

UpdateAssignmentElementContext.prototype.assignmentMap = function() {
    return this.getTypedRuleContext(AssignmentMapContext,0);
};

UpdateAssignmentElementContext.prototype.assignmentSet = function() {
    return this.getTypedRuleContext(AssignmentSetContext,0);
};

UpdateAssignmentElementContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

UpdateAssignmentElementContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

UpdateAssignmentElementContext.prototype.syntaxBracketLs = function() {
    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
};

UpdateAssignmentElementContext.prototype.syntaxBracketRs = function() {
    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
};

UpdateAssignmentElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUpdateAssignmentElement(this);
	}
};

UpdateAssignmentElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUpdateAssignmentElement(this);
	}
};

UpdateAssignmentElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUpdateAssignmentElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UpdateAssignmentElementContext = UpdateAssignmentElementContext;

CqlParser.prototype.updateAssignmentElement = function() {

    var localctx = new UpdateAssignmentElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CqlParser.RULE_updateAssignmentElement);
    try {
        this.state = 1786;
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1709;
            this.columnSpec();
            this.state = 1710;
            this.syntaxOperatorEq();
            this.state = 1713;
            switch(this._input.LA(1)) {
            case CqlParser.K_FALSE:
            case CqlParser.K_NULL:
            case CqlParser.K_TRUE:
            case CqlParser.STRING_LITERAL:
            case CqlParser.DECIMAL_LITERAL:
            case CqlParser.FLOAT_LITERAL:
            case CqlParser.HEXADECIMAL_LITERAL:
            case CqlParser.UUID:
                this.state = 1711;
                this.constant();
                break;
            case CqlParser.LR_BRACKET:
            case CqlParser.LC_BRACKET:
            case CqlParser.LS_BRACKET:
                this.state = 1712;
                this.constantCollection();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1715;
            this.columnSpec();
            this.state = 1716;
            this.syntaxOperatorEq();
            this.state = 1717;
            this.columnSpec();
            this.state = 1720;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1718;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1719;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1722;
            this.constantDecimal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1724;
            this.columnSpec();
            this.state = 1725;
            this.syntaxOperatorEq();
            this.state = 1726;
            this.columnSpec();
            this.state = 1729;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1727;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1728;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1731;
            this.assignmentMap();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1733;
            this.columnSpec();
            this.state = 1734;
            this.syntaxOperatorEq();
            this.state = 1735;
            this.columnSpec();
            this.state = 1738;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1736;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1737;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1740;
            this.assignmentSet();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1742;
            this.columnSpec();
            this.state = 1743;
            this.syntaxOperatorEq();
            this.state = 1744;
            this.columnSpec();
            this.state = 1747;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1745;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1746;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1749;
            this.assignmentList();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1751;
            this.columnSpec();
            this.state = 1752;
            this.syntaxOperatorEq();
            this.state = 1753;
            this.assignmentSet();
            this.state = 1756;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1754;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1755;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1758;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1760;
            this.columnSpec();
            this.state = 1761;
            this.syntaxOperatorEq();
            this.state = 1762;
            this.assignmentMap();
            this.state = 1765;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1763;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1764;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1767;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1769;
            this.columnSpec();
            this.state = 1770;
            this.syntaxOperatorEq();
            this.state = 1771;
            this.assignmentList();
            this.state = 1774;
            switch(this._input.LA(1)) {
            case CqlParser.PLUS:
                this.state = 1772;
                this.syntaxPlus();
                break;
            case CqlParser.MINUS:
                this.state = 1773;
                this.syntaxMinus();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1776;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1778;
            this.columnSpec();
            this.state = 1779;
            this.syntaxBracketLs();
            this.state = 1780;
            this.constantDecimal();
            this.state = 1781;
            this.syntaxBracketRs();
            this.state = 1782;
            this.syntaxOperatorEq();
            this.state = 1783;
            this.constant();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
             this.notifyErrorListeners("rule.updateAssignmentElement"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentSet;
    return this;
}

AssignmentSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentSetContext.prototype.constructor = AssignmentSetContext;

AssignmentSetContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AssignmentSetContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

AssignmentSetContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AssignmentSetContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

AssignmentSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentSet(this);
	}
};

AssignmentSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentSet(this);
	}
};

AssignmentSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentSetContext = AssignmentSetContext;

CqlParser.prototype.assignmentSet = function() {

    var localctx = new AssignmentSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CqlParser.RULE_assignmentSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1788;
        this.syntaxBracketLc();
        this.state = 1789;
        this.constant();
        this.state = 1795;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1790;
            this.syntaxComma();
            this.state = 1791;
            this.constant();
            this.state = 1797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1798;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentMapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentMap;
    return this;
}

AssignmentMapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentMapContext.prototype.constructor = AssignmentMapContext;

AssignmentMapContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

AssignmentMapContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

AssignmentMapContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

AssignmentMapContext.prototype.syntaxColon = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxColonContext);
    } else {
        return this.getTypedRuleContext(SyntaxColonContext,i);
    }
};

AssignmentMapContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentMap(this);
	}
};

AssignmentMapContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentMap(this);
	}
};

AssignmentMapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentMap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentMapContext = AssignmentMapContext;

CqlParser.prototype.assignmentMap = function() {

    var localctx = new AssignmentMapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CqlParser.RULE_assignmentMap);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1800;
        this.syntaxBracketLc();

        this.state = 1801;
        this.constant();
        this.state = 1802;
        this.syntaxColon();
        this.state = 1803;
        this.constant();
        this.state = 1811;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_FALSE || _la===CqlParser.K_NULL || _la===CqlParser.K_TRUE || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (CqlParser.STRING_LITERAL - 165)) | (1 << (CqlParser.DECIMAL_LITERAL - 165)) | (1 << (CqlParser.FLOAT_LITERAL - 165)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 165)) | (1 << (CqlParser.UUID - 165)))) !== 0)) {
            this.state = 1805;
            this.constant();
            this.state = 1806;
            this.syntaxColon();
            this.state = 1807;
            this.constant();
            this.state = 1813;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1814;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_assignmentList;
    return this;
}

AssignmentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentListContext.prototype.constructor = AssignmentListContext;

AssignmentListContext.prototype.syntaxBracketLs = function() {
    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
};

AssignmentListContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

AssignmentListContext.prototype.syntaxBracketRs = function() {
    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
};

AssignmentListContext.prototype.syntaxColon = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxColonContext);
    } else {
        return this.getTypedRuleContext(SyntaxColonContext,i);
    }
};

AssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAssignmentList(this);
	}
};

AssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAssignmentList(this);
	}
};

AssignmentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAssignmentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AssignmentListContext = AssignmentListContext;

CqlParser.prototype.assignmentList = function() {

    var localctx = new AssignmentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CqlParser.RULE_assignmentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1816;
        this.syntaxBracketLs();
        this.state = 1817;
        this.constant();
        this.state = 1823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COLON) {
            this.state = 1818;
            this.syntaxColon();
            this.state = 1819;
            this.constant();
            this.state = 1825;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1826;
        this.syntaxBracketRs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insert;
    return this;
}

InsertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertContext.prototype.constructor = InsertContext;

InsertContext.prototype.kwInsertInto = function() {
    return this.getTypedRuleContext(KwInsertIntoContext,0);
};

InsertContext.prototype.tableOrMaterializedViewSpec = function() {
    return this.getTypedRuleContext(TableOrMaterializedViewSpecContext,0);
};

InsertContext.prototype.insertColumnSpec = function() {
    return this.getTypedRuleContext(InsertColumnSpecContext,0);
};

InsertContext.prototype.insertValuesSpec = function() {
    return this.getTypedRuleContext(InsertValuesSpecContext,0);
};

InsertContext.prototype.ifNotExist = function() {
    return this.getTypedRuleContext(IfNotExistContext,0);
};

InsertContext.prototype.usingTtlTimestamp = function() {
    return this.getTypedRuleContext(UsingTtlTimestampContext,0);
};

InsertContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInsert(this);
	}
};

InsertContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInsert(this);
	}
};

InsertContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInsert(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InsertContext = InsertContext;

CqlParser.prototype.insert = function() {

    var localctx = new InsertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CqlParser.RULE_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1828;
        this.kwInsertInto();
        this.state = 1829;
        this.tableOrMaterializedViewSpec();
        this.state = 1830;
        this.insertColumnSpec();
        this.state = 1831;
        this.insertValuesSpec();
        this.state = 1834;
        switch(this._input.LA(1)) {
        case CqlParser.K_IF:
            this.state = 1832;
            this.ifNotExist();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_USING:
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1837;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_USING) {
            this.state = 1836;
            this.usingTtlTimestamp();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingTtlTimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_usingTtlTimestamp;
    return this;
}

UsingTtlTimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingTtlTimestampContext.prototype.constructor = UsingTtlTimestampContext;

UsingTtlTimestampContext.prototype.kwUsing = function() {
    return this.getTypedRuleContext(KwUsingContext,0);
};

UsingTtlTimestampContext.prototype.ttl = function() {
    return this.getTypedRuleContext(TtlContext,0);
};

UsingTtlTimestampContext.prototype.kwAnd = function() {
    return this.getTypedRuleContext(KwAndContext,0);
};

UsingTtlTimestampContext.prototype.timestamp = function() {
    return this.getTypedRuleContext(TimestampContext,0);
};

UsingTtlTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUsingTtlTimestamp(this);
	}
};

UsingTtlTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUsingTtlTimestamp(this);
	}
};

UsingTtlTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUsingTtlTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UsingTtlTimestampContext = UsingTtlTimestampContext;

CqlParser.prototype.usingTtlTimestamp = function() {

    var localctx = new UsingTtlTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CqlParser.RULE_usingTtlTimestamp);
    try {
        this.state = 1855;
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1839;
            this.kwUsing();
            this.state = 1840;
            this.ttl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1842;
            this.kwUsing();
            this.state = 1843;
            this.ttl();
            this.state = 1844;
            this.kwAnd();
            this.state = 1845;
            this.timestamp();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1847;
            this.kwUsing();
            this.state = 1848;
            this.timestamp();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1850;
            this.kwUsing();
            this.state = 1851;
            this.timestamp();
            this.state = 1852;
            this.kwAnd();
            this.state = 1853;
            this.ttl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_timestamp;
    return this;
}

TimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimestampContext.prototype.constructor = TimestampContext;

TimestampContext.prototype.kwTimestamp = function() {
    return this.getTypedRuleContext(KwTimestampContext,0);
};

TimestampContext.prototype.constantDecimal = function() {
    return this.getTypedRuleContext(ConstantDecimalContext,0);
};

TimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTimestamp(this);
	}
};

TimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTimestamp(this);
	}
};

TimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TimestampContext = TimestampContext;

CqlParser.prototype.timestamp = function() {

    var localctx = new TimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CqlParser.RULE_timestamp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1857;
        this.kwTimestamp();
        this.state = 1858;
        this.constantDecimal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TtlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ttl;
    return this;
}

TtlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TtlContext.prototype.constructor = TtlContext;

TtlContext.prototype.kwTtl = function() {
    return this.getTypedRuleContext(KwTtlContext,0);
};

TtlContext.prototype.constantDecimal = function() {
    return this.getTypedRuleContext(ConstantDecimalContext,0);
};

TtlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTtl(this);
	}
};

TtlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTtl(this);
	}
};

TtlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTtl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TtlContext = TtlContext;

CqlParser.prototype.ttl = function() {

    var localctx = new TtlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CqlParser.RULE_ttl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1860;
        this.kwTtl();
        this.state = 1861;
        this.constantDecimal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingTimestampSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_usingTimestampSpec;
    return this;
}

UsingTimestampSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingTimestampSpecContext.prototype.constructor = UsingTimestampSpecContext;

UsingTimestampSpecContext.prototype.kwUsing = function() {
    return this.getTypedRuleContext(KwUsingContext,0);
};

UsingTimestampSpecContext.prototype.timestamp = function() {
    return this.getTypedRuleContext(TimestampContext,0);
};

UsingTimestampSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUsingTimestampSpec(this);
	}
};

UsingTimestampSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUsingTimestampSpec(this);
	}
};

UsingTimestampSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUsingTimestampSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UsingTimestampSpecContext = UsingTimestampSpecContext;

CqlParser.prototype.usingTimestampSpec = function() {

    var localctx = new UsingTimestampSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CqlParser.RULE_usingTimestampSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1863;
        this.kwUsing();
        this.state = 1864;
        this.timestamp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfNotExistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifNotExist;
    return this;
}

IfNotExistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistContext.prototype.constructor = IfNotExistContext;

IfNotExistContext.prototype.kwIf = function() {
    return this.getTypedRuleContext(KwIfContext,0);
};

IfNotExistContext.prototype.kwNot = function() {
    return this.getTypedRuleContext(KwNotContext,0);
};

IfNotExistContext.prototype.kwExists = function() {
    return this.getTypedRuleContext(KwExistsContext,0);
};

IfNotExistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfNotExist(this);
	}
};

IfNotExistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfNotExist(this);
	}
};

IfNotExistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfNotExist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfNotExistContext = IfNotExistContext;

CqlParser.prototype.ifNotExist = function() {

    var localctx = new IfNotExistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CqlParser.RULE_ifNotExist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1866;
        this.kwIf();
        this.state = 1867;
        this.kwNot();
        this.state = 1868;
        this.kwExists();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfExistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_ifExist;
    return this;
}

IfExistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistContext.prototype.constructor = IfExistContext;

IfExistContext.prototype.kwIf = function() {
    return this.getTypedRuleContext(KwIfContext,0);
};

IfExistContext.prototype.kwExists = function() {
    return this.getTypedRuleContext(KwExistsContext,0);
};

IfExistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIfExist(this);
	}
};

IfExistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIfExist(this);
	}
};

IfExistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIfExist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IfExistContext = IfExistContext;

CqlParser.prototype.ifExist = function() {

    var localctx = new IfExistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CqlParser.RULE_ifExist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1870;
        this.kwIf();
        this.state = 1871;
        this.kwExists();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertValuesSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insertValuesSpec;
    return this;
}

InsertValuesSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertValuesSpecContext.prototype.constructor = InsertValuesSpecContext;

InsertValuesSpecContext.prototype.kwValues = function() {
    return this.getTypedRuleContext(KwValuesContext,0);
};

InsertValuesSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

InsertValuesSpecContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

InsertValuesSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

InsertValuesSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInsertValuesSpec(this);
	}
};

InsertValuesSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInsertValuesSpec(this);
	}
};

InsertValuesSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInsertValuesSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InsertValuesSpecContext = InsertValuesSpecContext;

CqlParser.prototype.insertValuesSpec = function() {

    var localctx = new InsertValuesSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CqlParser.RULE_insertValuesSpec);
    try {
        this.state = 1881;
        switch(this._input.LA(1)) {
        case CqlParser.K_VALUES:
            this.enterOuterAlt(localctx, 1);
            this.state = 1873;
            this.kwValues();
            this.state = 1874;
            this.syntaxBracketLr();
            this.state = 1875;
            this.expressionList();
            this.state = 1878;
            switch(this._input.LA(1)) {
            case CqlParser.RR_BRACKET:
                this.state = 1876;
                this.syntaxBracketRr();
                break;
            case CqlParser.EOF:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_IF:
            case CqlParser.K_USING:
                 this.notifyErrorListeners("rule.syntaxBracketRr"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_IF:
        case CqlParser.K_USING:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.insertValuesSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertColumnSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_insertColumnSpec;
    return this;
}

InsertColumnSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertColumnSpecContext.prototype.constructor = InsertColumnSpecContext;

InsertColumnSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

InsertColumnSpecContext.prototype.columnList = function() {
    return this.getTypedRuleContext(ColumnListContext,0);
};

InsertColumnSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

InsertColumnSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterInsertColumnSpec(this);
	}
};

InsertColumnSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitInsertColumnSpec(this);
	}
};

InsertColumnSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitInsertColumnSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.InsertColumnSpecContext = InsertColumnSpecContext;

CqlParser.prototype.insertColumnSpec = function() {

    var localctx = new InsertColumnSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CqlParser.RULE_insertColumnSpec);
    try {
        this.state = 1888;
        switch(this._input.LA(1)) {
        case CqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1883;
            this.syntaxBracketLr();
            this.state = 1884;
            this.columnList();
            this.state = 1885;
            this.syntaxBracketRr();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_IF:
        case CqlParser.K_USING:
        case CqlParser.K_VALUES:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.insertColumnSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnList;
    return this;
}

ColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnListContext.prototype.constructor = ColumnListContext;

ColumnListContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

ColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnList(this);
	}
};

ColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnList(this);
	}
};

ColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnListContext = ColumnListContext;

CqlParser.prototype.columnList = function() {

    var localctx = new ColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CqlParser.RULE_columnList);
    var _la = 0; // Token type
    try {
        this.state = 1902;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1890;
            this.columnSpec();
            this.state = 1898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1891;
                this.syntaxComma();
                this.state = 1894;
                switch(this._input.LA(1)) {
                case CqlParser.DQUOTE:
                case CqlParser.K_DURABLE_WRITES:
                case CqlParser.K_INITCOND:
                case CqlParser.K_INPUT:
                case CqlParser.K_KEY:
                case CqlParser.K_LANGUAGE:
                case CqlParser.K_LEVEL:
                case CqlParser.K_OPTIONS:
                case CqlParser.K_PARTITION:
                case CqlParser.K_PERMISSIONS:
                case CqlParser.K_REPLICATION:
                case CqlParser.K_TTL:
                case CqlParser.K_TYPE:
                case CqlParser.K_ROLES:
                case CqlParser.K_ROLE:
                case CqlParser.K_USERS:
                case CqlParser.K_USER:
                case CqlParser.OBJECT_NAME:
                    this.state = 1892;
                    this.columnSpec();
                    break;
                case CqlParser.RR_BRACKET:
                case CqlParser.COMMA:
                     this.notifyErrorListeners("rule.column"); 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1900;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case CqlParser.RR_BRACKET:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.columnList"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseColumnListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_baseColumnList;
    return this;
}

BaseColumnListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseColumnListContext.prototype.constructor = BaseColumnListContext;

BaseColumnListContext.prototype.columnSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnSpecContext);
    } else {
        return this.getTypedRuleContext(ColumnSpecContext,i);
    }
};

BaseColumnListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

BaseColumnListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBaseColumnList(this);
	}
};

BaseColumnListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBaseColumnList(this);
	}
};

BaseColumnListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBaseColumnList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BaseColumnListContext = BaseColumnListContext;

CqlParser.prototype.baseColumnList = function() {

    var localctx = new BaseColumnListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CqlParser.RULE_baseColumnList);
    var _la = 0; // Token type
    try {
        this.state = 1916;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1904;
            this.columnSpec();
            this.state = 1912;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1905;
                this.syntaxComma();
                this.state = 1908;
                switch(this._input.LA(1)) {
                case CqlParser.DQUOTE:
                case CqlParser.K_DURABLE_WRITES:
                case CqlParser.K_INITCOND:
                case CqlParser.K_INPUT:
                case CqlParser.K_KEY:
                case CqlParser.K_LANGUAGE:
                case CqlParser.K_LEVEL:
                case CqlParser.K_OPTIONS:
                case CqlParser.K_PARTITION:
                case CqlParser.K_PERMISSIONS:
                case CqlParser.K_REPLICATION:
                case CqlParser.K_TTL:
                case CqlParser.K_TYPE:
                case CqlParser.K_ROLES:
                case CqlParser.K_ROLE:
                case CqlParser.K_USERS:
                case CqlParser.K_USER:
                case CqlParser.OBJECT_NAME:
                    this.state = 1906;
                    this.columnSpec();
                    break;
                case CqlParser.COMMA:
                case CqlParser.K_FROM:
                     this.notifyErrorListeners("rule.column"); 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1914;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case CqlParser.K_FROM:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.baseColumnList"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ExpressionListContext = ExpressionListContext;

CqlParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CqlParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1918;
        this.expression();
        this.state = 1924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 1919;
            this.syntaxComma();
            this.state = 1920;
            this.expression();
            this.state = 1926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ExpressionContext.prototype.constantCollection = function() {
    return this.getTypedRuleContext(ConstantCollectionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ExpressionContext = ExpressionContext;

CqlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CqlParser.RULE_expression);
    try {
        this.state = 1932;
        switch(this._input.LA(1)) {
        case CqlParser.LR_BRACKET:
        case CqlParser.LC_BRACKET:
        case CqlParser.LS_BRACKET:
        case CqlParser.K_FALSE:
        case CqlParser.K_NULL:
        case CqlParser.K_TRUE:
        case CqlParser.STRING_LITERAL:
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
        case CqlParser.HEXADECIMAL_LITERAL:
        case CqlParser.UUID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1929;
            switch(this._input.LA(1)) {
            case CqlParser.K_FALSE:
            case CqlParser.K_NULL:
            case CqlParser.K_TRUE:
            case CqlParser.STRING_LITERAL:
            case CqlParser.DECIMAL_LITERAL:
            case CqlParser.FLOAT_LITERAL:
            case CqlParser.HEXADECIMAL_LITERAL:
            case CqlParser.UUID:
                this.state = 1927;
                this.constant();
                break;
            case CqlParser.LR_BRACKET:
            case CqlParser.LC_BRACKET:
            case CqlParser.LS_BRACKET:
                this.state = 1928;
                this.constantCollection();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.EOF:
        case CqlParser.RR_BRACKET:
        case CqlParser.COMMA:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_IF:
        case CqlParser.K_USING:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.expression"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_select;
    return this;
}

SelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectContext.prototype.constructor = SelectContext;

SelectContext.prototype.kwSelect = function() {
    return this.getTypedRuleContext(KwSelectContext,0);
};

SelectContext.prototype.selectElements = function() {
    return this.getTypedRuleContext(SelectElementsContext,0);
};

SelectContext.prototype.fromSpec = function() {
    return this.getTypedRuleContext(FromSpecContext,0);
};

SelectContext.prototype.kwDistinct = function() {
    return this.getTypedRuleContext(KwDistinctContext,0);
};

SelectContext.prototype.whereSpec = function() {
    return this.getTypedRuleContext(WhereSpecContext,0);
};

SelectContext.prototype.orderSpec = function() {
    return this.getTypedRuleContext(OrderSpecContext,0);
};

SelectContext.prototype.limitSpec = function() {
    return this.getTypedRuleContext(LimitSpecContext,0);
};

SelectContext.prototype.kwAllowFiltering = function() {
    return this.getTypedRuleContext(KwAllowFilteringContext,0);
};

SelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSelect(this);
	}
};

SelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSelect(this);
	}
};

SelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SelectContext = SelectContext;

CqlParser.prototype.select = function() {

    var localctx = new SelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CqlParser.RULE_select);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1934;
        this.kwSelect();
        this.state = 1936;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_DISTINCT) {
            this.state = 1935;
            this.kwDistinct();
        }

        this.state = 1938;
        this.selectElements();
        this.state = 1939;
        this.fromSpec();
        this.state = 1941;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_WHERE) {
            this.state = 1940;
            this.whereSpec();
        }

        this.state = 1944;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ORDER) {
            this.state = 1943;
            this.orderSpec();
        }

        this.state = 1947;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_LIMIT) {
            this.state = 1946;
            this.limitSpec();
        }

        this.state = 1950;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_ALLOW) {
            this.state = 1949;
            this.kwAllowFiltering();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_limitSpec;
    return this;
}

LimitSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitSpecContext.prototype.constructor = LimitSpecContext;

LimitSpecContext.prototype.kwLimit = function() {
    return this.getTypedRuleContext(KwLimitContext,0);
};

LimitSpecContext.prototype.constantDecimal = function() {
    return this.getTypedRuleContext(ConstantDecimalContext,0);
};

LimitSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterLimitSpec(this);
	}
};

LimitSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitLimitSpec(this);
	}
};

LimitSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitLimitSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.LimitSpecContext = LimitSpecContext;

CqlParser.prototype.limitSpec = function() {

    var localctx = new LimitSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CqlParser.RULE_limitSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1952;
        this.kwLimit();
        this.state = 1955;
        switch(this._input.LA(1)) {
        case CqlParser.DECIMAL_LITERAL:
            this.state = 1953;
            this.constantDecimal();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_ALLOW:
             this.notifyErrorListeners("rule.constantDecimal"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_fromSpec;
    return this;
}

FromSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromSpecContext.prototype.constructor = FromSpecContext;

FromSpecContext.prototype.kwFrom = function() {
    return this.getTypedRuleContext(KwFromContext,0);
};

FromSpecContext.prototype.tableOrMaterializedViewSpec = function() {
    return this.getTypedRuleContext(TableOrMaterializedViewSpecContext,0);
};

FromSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFromSpec(this);
	}
};

FromSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFromSpec(this);
	}
};

FromSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFromSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FromSpecContext = FromSpecContext;

CqlParser.prototype.fromSpec = function() {

    var localctx = new FromSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CqlParser.RULE_fromSpec);
    try {
        this.state = 1961;
        switch(this._input.LA(1)) {
        case CqlParser.K_FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1957;
            this.kwFrom();
            this.state = 1958;
            this.tableOrMaterializedViewSpec();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_ALLOW:
        case CqlParser.K_IF:
        case CqlParser.K_LIMIT:
        case CqlParser.K_ORDER:
        case CqlParser.K_USING:
        case CqlParser.K_WHERE:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.fromSpec"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderSpec;
    return this;
}

OrderSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderSpecContext.prototype.constructor = OrderSpecContext;

OrderSpecContext.prototype.kwOrderBy = function() {
    return this.getTypedRuleContext(KwOrderByContext,0);
};

OrderSpecContext.prototype.orderSpecElement = function() {
    return this.getTypedRuleContext(OrderSpecElementContext,0);
};

OrderSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrderSpec(this);
	}
};

OrderSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrderSpec(this);
	}
};

OrderSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrderSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrderSpecContext = OrderSpecContext;

CqlParser.prototype.orderSpec = function() {

    var localctx = new OrderSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CqlParser.RULE_orderSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1963;
        this.kwOrderBy();
        this.state = 1964;
        this.orderSpecElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderSpecElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderSpecElement;
    return this;
}

OrderSpecElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderSpecElementContext.prototype.constructor = OrderSpecElementContext;

OrderSpecElementContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

OrderSpecElementContext.prototype.kwAsc = function() {
    return this.getTypedRuleContext(KwAscContext,0);
};

OrderSpecElementContext.prototype.kwDesc = function() {
    return this.getTypedRuleContext(KwDescContext,0);
};

OrderSpecElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrderSpecElement(this);
	}
};

OrderSpecElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrderSpecElement(this);
	}
};

OrderSpecElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrderSpecElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrderSpecElementContext = OrderSpecElementContext;

CqlParser.prototype.orderSpecElement = function() {

    var localctx = new OrderSpecElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CqlParser.RULE_orderSpecElement);
    try {
        this.state = 1972;
        switch(this._input.LA(1)) {
        case CqlParser.DQUOTE:
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1966;
            this.columnSpec();
            this.state = 1969;
            switch (this._input.LA(1)) {
            case CqlParser.K_ASC:
            	this.state = 1967;
            	this.kwAsc();
            	break;
            case CqlParser.K_DESC:
            	this.state = 1968;
            	this.kwDesc();
            	break;
            case CqlParser.EOF:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ALLOW:
            case CqlParser.K_LIMIT:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_ALLOW:
        case CqlParser.K_LIMIT:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.orderSpecElement"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_whereSpec;
    return this;
}

WhereSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereSpecContext.prototype.constructor = WhereSpecContext;

WhereSpecContext.prototype.kwWhere = function() {
    return this.getTypedRuleContext(KwWhereContext,0);
};

WhereSpecContext.prototype.relationElements = function() {
    return this.getTypedRuleContext(RelationElementsContext,0);
};

WhereSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterWhereSpec(this);
	}
};

WhereSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitWhereSpec(this);
	}
};

WhereSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitWhereSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.WhereSpecContext = WhereSpecContext;

CqlParser.prototype.whereSpec = function() {

    var localctx = new WhereSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CqlParser.RULE_whereSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1974;
        this.kwWhere();
        this.state = 1975;
        this.relationElements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_selectElements;
    return this;
}

SelectElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectElementsContext.prototype.constructor = SelectElementsContext;

SelectElementsContext.prototype.specialStar = function() {
    return this.getTypedRuleContext(SpecialStarContext,0);
};

SelectElementsContext.prototype.selectElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectElementContext);
    } else {
        return this.getTypedRuleContext(SelectElementContext,i);
    }
};

SelectElementsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

SelectElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSelectElements(this);
	}
};

SelectElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSelectElements(this);
	}
};

SelectElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSelectElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SelectElementsContext = SelectElementsContext;

CqlParser.prototype.selectElements = function() {

    var localctx = new SelectElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CqlParser.RULE_selectElements);
    var _la = 0; // Token type
    try {
        this.state = 1988;
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1977;
            this.specialStar();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1978;
            this.selectElement();
            this.state = 1984;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CqlParser.COMMA) {
                this.state = 1979;
                this.syntaxComma();
                this.state = 1980;
                this.selectElement();
                this.state = 1986;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
             this.notifyErrorListeners("rule.selectElements"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_selectElement;
    return this;
}

SelectElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectElementContext.prototype.constructor = SelectElementContext;

SelectElementContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

SelectElementContext.prototype.kwAs = function() {
    return this.getTypedRuleContext(KwAsContext,0);
};

SelectElementContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

SelectElementContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

SelectElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSelectElement(this);
	}
};

SelectElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSelectElement(this);
	}
};

SelectElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSelectElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SelectElementContext = SelectElementContext;

CqlParser.prototype.selectElement = function() {

    var localctx = new SelectElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CqlParser.RULE_selectElement);
    var _la = 0; // Token type
    try {
        this.state = 2004;
        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1990;
            this.columnSpec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1991;
            this.columnSpec();
            this.state = 1995;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_AS) {
                this.state = 1992;
                this.kwAs();
                this.state = 1993;
                this.match(CqlParser.OBJECT_NAME);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1997;
            this.functionCall();
            this.state = 2001;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_AS) {
                this.state = 1998;
                this.kwAs();
                this.state = 1999;
                this.match(CqlParser.OBJECT_NAME);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.selectElement"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElements;
    return this;
}

RelationElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementsContext.prototype.constructor = RelationElementsContext;

RelationElementsContext.prototype.relationElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationElementContext);
    } else {
        return this.getTypedRuleContext(RelationElementContext,i);
    }
};

RelationElementsContext.prototype.kwAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KwAndContext);
    } else {
        return this.getTypedRuleContext(KwAndContext,i);
    }
};

RelationElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElements(this);
	}
};

RelationElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElements(this);
	}
};

RelationElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementsContext = RelationElementsContext;

CqlParser.prototype.relationElements = function() {

    var localctx = new RelationElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CqlParser.RULE_relationElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2006;
        this.relationElement();
        this.state = 2012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.K_AND) {
            this.state = 2007;
            this.kwAnd();
            this.state = 2008;
            this.relationElement();
            this.state = 2014;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElement;
    return this;
}

RelationElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementContext.prototype.constructor = RelationElementContext;

RelationElementContext.prototype.relationElementConstant = function() {
    return this.getTypedRuleContext(RelationElementConstantContext,0);
};

RelationElementContext.prototype.relationElementIn = function() {
    return this.getTypedRuleContext(RelationElementInContext,0);
};

RelationElementContext.prototype.relationElementToken = function() {
    return this.getTypedRuleContext(RelationElementTokenContext,0);
};

RelationElementContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

RelationElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElement(this);
	}
};

RelationElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElement(this);
	}
};

RelationElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementContext = RelationElementContext;

CqlParser.prototype.relationElement = function() {

    var localctx = new RelationElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CqlParser.RULE_relationElement);
    try {
        this.state = 2021;
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2015;
            this.relationElementConstant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2016;
            this.relationElementIn();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2017;
            this.relationElementToken();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2018;
            this.match(CqlParser.OBJECT_NAME);
             this.notifyErrorListeners("rule.relationElement"); 
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
             this.notifyErrorListeners("rule.relationElement"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationElementConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElementConstant;
    return this;
}

RelationElementConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementConstantContext.prototype.constructor = RelationElementConstantContext;

RelationElementConstantContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

RelationElementConstantContext.prototype.relationOperator = function() {
    return this.getTypedRuleContext(RelationOperatorContext,0);
};

RelationElementConstantContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

RelationElementConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElementConstant(this);
	}
};

RelationElementConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElementConstant(this);
	}
};

RelationElementConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElementConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementConstantContext = RelationElementConstantContext;

CqlParser.prototype.relationElementConstant = function() {

    var localctx = new RelationElementConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CqlParser.RULE_relationElementConstant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2023;
        this.columnSpec();
        this.state = 2024;
        this.relationOperator();
        this.state = 2027;
        switch(this._input.LA(1)) {
        case CqlParser.K_FALSE:
        case CqlParser.K_NULL:
        case CqlParser.K_TRUE:
        case CqlParser.STRING_LITERAL:
        case CqlParser.DECIMAL_LITERAL:
        case CqlParser.FLOAT_LITERAL:
        case CqlParser.HEXADECIMAL_LITERAL:
        case CqlParser.UUID:
            this.state = 2025;
            this.constant();
            break;
        case CqlParser.EOF:
        case CqlParser.SEMI:
        case CqlParser.MINUSMINUS:
        case CqlParser.K_ALLOW:
        case CqlParser.K_AND:
        case CqlParser.K_IF:
        case CqlParser.K_LIMIT:
        case CqlParser.K_ORDER:
        case CqlParser.K_PRIMARY:
             this.notifyErrorListeners("rule.constant"); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationElementInContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElementIn;
    return this;
}

RelationElementInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementInContext.prototype.constructor = RelationElementInContext;

RelationElementInContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

RelationElementInContext.prototype.kwIn = function() {
    return this.getTypedRuleContext(KwInContext,0);
};

RelationElementInContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

RelationElementInContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

RelationElementInContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};

RelationElementInContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElementIn(this);
	}
};

RelationElementInContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElementIn(this);
	}
};

RelationElementInContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElementIn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementInContext = RelationElementInContext;

CqlParser.prototype.relationElementIn = function() {

    var localctx = new RelationElementInContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CqlParser.RULE_relationElementIn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2029;
        this.columnSpec();
        this.state = 2030;
        this.kwIn();
        this.state = 2031;
        this.syntaxBracketLr();
        this.state = 2033;
        _la = this._input.LA(1);
        if(_la===CqlParser.K_FALSE || _la===CqlParser.K_NULL || _la===CqlParser.K_TRUE || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (CqlParser.STRING_LITERAL - 165)) | (1 << (CqlParser.DECIMAL_LITERAL - 165)) | (1 << (CqlParser.FLOAT_LITERAL - 165)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 165)) | (1 << (CqlParser.OBJECT_NAME - 165)) | (1 << (CqlParser.UUID - 165)))) !== 0)) {
            this.state = 2032;
            this.functionArgs();
        }

        this.state = 2035;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationElementTokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElementToken;
    return this;
}

RelationElementTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementTokenContext.prototype.constructor = RelationElementTokenContext;

RelationElementTokenContext.prototype.relationElementTokenSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationElementTokenSpecContext);
    } else {
        return this.getTypedRuleContext(RelationElementTokenSpecContext,i);
    }
};

RelationElementTokenContext.prototype.relationOperator = function() {
    return this.getTypedRuleContext(RelationOperatorContext,0);
};

RelationElementTokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElementToken(this);
	}
};

RelationElementTokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElementToken(this);
	}
};

RelationElementTokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElementToken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementTokenContext = RelationElementTokenContext;

CqlParser.prototype.relationElementToken = function() {

    var localctx = new RelationElementTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CqlParser.RULE_relationElementToken);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2037;
        this.relationElementTokenSpec();
        this.state = 2040;
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2038;
            this.relationOperator();
            break;

        case 2:
             this.notifyErrorListeners("rule.relationOperator"); 
            break;

        }
        this.state = 2042;
        this.relationElementTokenSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationElementTokenSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationElementTokenSpec;
    return this;
}

RelationElementTokenSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationElementTokenSpecContext.prototype.constructor = RelationElementTokenSpecContext;

RelationElementTokenSpecContext.prototype.kwToken = function() {
    return this.getTypedRuleContext(KwTokenContext,0);
};

RelationElementTokenSpecContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

RelationElementTokenSpecContext.prototype.columnSpec = function() {
    return this.getTypedRuleContext(ColumnSpecContext,0);
};

RelationElementTokenSpecContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

RelationElementTokenSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationElementTokenSpec(this);
	}
};

RelationElementTokenSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationElementTokenSpec(this);
	}
};

RelationElementTokenSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationElementTokenSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationElementTokenSpecContext = RelationElementTokenSpecContext;

CqlParser.prototype.relationElementTokenSpec = function() {

    var localctx = new RelationElementTokenSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CqlParser.RULE_relationElementTokenSpec);
    try {
        this.state = 2058;
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2044;
            this.kwToken();
            this.state = 2047;
            switch(this._input.LA(1)) {
            case CqlParser.LR_BRACKET:
                this.state = 2045;
                this.syntaxBracketLr();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.SEMI:
            case CqlParser.DQUOTE:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ALLOW:
            case CqlParser.K_AND:
            case CqlParser.K_CONTAINS:
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_IF:
            case CqlParser.K_INITCOND:
            case CqlParser.K_INPUT:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_LIMIT:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_ORDER:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TOKEN:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
            case CqlParser.OPERATOR_EQ:
            case CqlParser.OPERATOR_LT:
            case CqlParser.OPERATOR_GT:
            case CqlParser.OPERATOR_LTE:
            case CqlParser.OPERATOR_GTE:
                 this.notifyErrorListeners("rule.syntaxBracketLr"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2051;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_INPUT:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2049;
                this.columnSpec();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ALLOW:
            case CqlParser.K_AND:
            case CqlParser.K_CONTAINS:
            case CqlParser.K_IF:
            case CqlParser.K_LIMIT:
            case CqlParser.K_ORDER:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_TOKEN:
            case CqlParser.OPERATOR_EQ:
            case CqlParser.OPERATOR_LT:
            case CqlParser.OPERATOR_GT:
            case CqlParser.OPERATOR_LTE:
            case CqlParser.OPERATOR_GTE:
                 this.notifyErrorListeners("rule.column"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2055;
            switch(this._input.LA(1)) {
            case CqlParser.RR_BRACKET:
                this.state = 2053;
                this.syntaxBracketRr();
                break;
            case CqlParser.EOF:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ALLOW:
            case CqlParser.K_AND:
            case CqlParser.K_CONTAINS:
            case CqlParser.K_IF:
            case CqlParser.K_LIMIT:
            case CqlParser.K_ORDER:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_TOKEN:
            case CqlParser.OPERATOR_EQ:
            case CqlParser.OPERATOR_LT:
            case CqlParser.OPERATOR_GT:
            case CqlParser.OPERATOR_LTE:
            case CqlParser.OPERATOR_GTE:
                 this.notifyErrorListeners("rule.syntaxBracketRr"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
             this.notifyErrorListeners("rule.relationElementTokenSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_relationOperator;
    return this;
}

RelationOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationOperatorContext.prototype.constructor = RelationOperatorContext;

RelationOperatorContext.prototype.syntaxOperatorEq = function() {
    return this.getTypedRuleContext(SyntaxOperatorEqContext,0);
};

RelationOperatorContext.prototype.syntaxOperatorLt = function() {
    return this.getTypedRuleContext(SyntaxOperatorLtContext,0);
};

RelationOperatorContext.prototype.syntaxOperatorGt = function() {
    return this.getTypedRuleContext(SyntaxOperatorGtContext,0);
};

RelationOperatorContext.prototype.syntaxOperatorLte = function() {
    return this.getTypedRuleContext(SyntaxOperatorLteContext,0);
};

RelationOperatorContext.prototype.syntaxOperatorGte = function() {
    return this.getTypedRuleContext(SyntaxOperatorGteContext,0);
};

RelationOperatorContext.prototype.kwContains = function() {
    return this.getTypedRuleContext(KwContainsContext,0);
};

RelationOperatorContext.prototype.kwContainsKey = function() {
    return this.getTypedRuleContext(KwContainsKeyContext,0);
};

RelationOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRelationOperator(this);
	}
};

RelationOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRelationOperator(this);
	}
};

RelationOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRelationOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RelationOperatorContext = RelationOperatorContext;

CqlParser.prototype.relationOperator = function() {

    var localctx = new RelationOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CqlParser.RULE_relationOperator);
    try {
        this.state = 2068;
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2060;
            this.syntaxOperatorEq();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2061;
            this.syntaxOperatorLt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2062;
            this.syntaxOperatorGt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2063;
            this.syntaxOperatorLte();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2064;
            this.syntaxOperatorGte();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2065;
            this.kwContains();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2066;
            this.kwContainsKey();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
             this.notifyErrorListeners("rule.relationOperator"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

FunctionCallContext.prototype.STAR = function() {
    return this.getToken(CqlParser.STAR, 0);
};

FunctionCallContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunctionCall(this);
	}
};

FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionCallContext = FunctionCallContext;

CqlParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CqlParser.RULE_functionCall);
    var _la = 0; // Token type
    try {
        this.state = 2080;
        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2070;
            this.match(CqlParser.OBJECT_NAME);
            this.state = 2071;
            this.match(CqlParser.LR_BRACKET);
            this.state = 2072;
            this.match(CqlParser.STAR);
            this.state = 2073;
            this.match(CqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2074;
            this.match(CqlParser.OBJECT_NAME);
            this.state = 2075;
            this.match(CqlParser.LR_BRACKET);
            this.state = 2077;
            _la = this._input.LA(1);
            if(_la===CqlParser.K_FALSE || _la===CqlParser.K_NULL || _la===CqlParser.K_TRUE || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (CqlParser.STRING_LITERAL - 165)) | (1 << (CqlParser.DECIMAL_LITERAL - 165)) | (1 << (CqlParser.FLOAT_LITERAL - 165)) | (1 << (CqlParser.HEXADECIMAL_LITERAL - 165)) | (1 << (CqlParser.OBJECT_NAME - 165)) | (1 << (CqlParser.UUID - 165)))) !== 0)) {
                this.state = 2076;
                this.functionArgs();
            }

            this.state = 2079;
            this.match(CqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionArgs;
    return this;
}

FunctionArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionArgsContext.prototype.constructor = FunctionArgsContext;

FunctionArgsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

FunctionArgsContext.prototype.OBJECT_NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.OBJECT_NAME);
    } else {
        return this.getToken(CqlParser.OBJECT_NAME, i);
    }
};


FunctionArgsContext.prototype.functionCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionCallContext);
    } else {
        return this.getTypedRuleContext(FunctionCallContext,i);
    }
};

FunctionArgsContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

FunctionArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunctionArgs(this);
	}
};

FunctionArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunctionArgs(this);
	}
};

FunctionArgsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunctionArgs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionArgsContext = FunctionArgsContext;

CqlParser.prototype.functionArgs = function() {

    var localctx = new FunctionArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CqlParser.RULE_functionArgs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2085;
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2082;
            this.constant();
            break;

        case 2:
            this.state = 2083;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 3:
            this.state = 2084;
            this.functionCall();
            break;

        }
        this.state = 2095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2087;
            this.syntaxComma();
            this.state = 2091;
            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2088;
                this.constant();
                break;

            case 2:
                this.state = 2089;
                this.match(CqlParser.OBJECT_NAME);
                break;

            case 3:
                this.state = 2090;
                this.functionCall();
                break;

            }
            this.state = 2097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.constantUuid = function() {
    return this.getTypedRuleContext(ConstantUuidContext,0);
};

ConstantContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

ConstantContext.prototype.constantDecimal = function() {
    return this.getTypedRuleContext(ConstantDecimalContext,0);
};

ConstantContext.prototype.constantFloat = function() {
    return this.getTypedRuleContext(ConstantFloatContext,0);
};

ConstantContext.prototype.constantHexadecimal = function() {
    return this.getTypedRuleContext(ConstantHexadecimalContext,0);
};

ConstantContext.prototype.constantBoolean = function() {
    return this.getTypedRuleContext(ConstantBooleanContext,0);
};

ConstantContext.prototype.kwNull = function() {
    return this.getTypedRuleContext(KwNullContext,0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantContext = ConstantContext;

CqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CqlParser.RULE_constant);
    try {
        this.state = 2105;
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2098;
            this.constantUuid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2099;
            this.constantString();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2100;
            this.constantDecimal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2101;
            this.constantFloat();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2102;
            this.constantHexadecimal();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2103;
            this.constantBoolean();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2104;
            this.kwNull();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_collectionElement;
    return this;
}

CollectionElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionElementContext.prototype.constructor = CollectionElementContext;

CollectionElementContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

CollectionElementContext.prototype.constantMap = function() {
    return this.getTypedRuleContext(ConstantMapContext,0);
};

CollectionElementContext.prototype.constantSet = function() {
    return this.getTypedRuleContext(ConstantSetContext,0);
};

CollectionElementContext.prototype.constantList = function() {
    return this.getTypedRuleContext(ConstantListContext,0);
};

CollectionElementContext.prototype.constantTuple = function() {
    return this.getTypedRuleContext(ConstantTupleContext,0);
};

CollectionElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCollectionElement(this);
	}
};

CollectionElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCollectionElement(this);
	}
};

CollectionElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCollectionElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CollectionElementContext = CollectionElementContext;

CqlParser.prototype.collectionElement = function() {

    var localctx = new CollectionElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CqlParser.RULE_collectionElement);
    try {
        this.state = 2112;
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2107;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2108;
            this.constantMap();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2109;
            this.constantSet();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2110;
            this.constantList();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2111;
            this.constantTuple();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionMapElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_collectionMapElement;
    return this;
}

CollectionMapElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionMapElementContext.prototype.constructor = CollectionMapElementContext;

CollectionMapElementContext.prototype.collectionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CollectionElementContext);
    } else {
        return this.getTypedRuleContext(CollectionElementContext,i);
    }
};

CollectionMapElementContext.prototype.syntaxColon = function() {
    return this.getTypedRuleContext(SyntaxColonContext,0);
};

CollectionMapElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterCollectionMapElement(this);
	}
};

CollectionMapElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitCollectionMapElement(this);
	}
};

CollectionMapElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitCollectionMapElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.CollectionMapElementContext = CollectionMapElementContext;

CqlParser.prototype.collectionMapElement = function() {

    var localctx = new CollectionMapElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CqlParser.RULE_collectionMapElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2114;
        this.collectionElement();
        this.state = 2115;
        this.syntaxColon();
        this.state = 2116;
        this.collectionElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantCollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantCollection;
    return this;
}

ConstantCollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantCollectionContext.prototype.constructor = ConstantCollectionContext;

ConstantCollectionContext.prototype.constantMap = function() {
    return this.getTypedRuleContext(ConstantMapContext,0);
};

ConstantCollectionContext.prototype.constantTuple = function() {
    return this.getTypedRuleContext(ConstantTupleContext,0);
};

ConstantCollectionContext.prototype.constantList = function() {
    return this.getTypedRuleContext(ConstantListContext,0);
};

ConstantCollectionContext.prototype.constantSet = function() {
    return this.getTypedRuleContext(ConstantSetContext,0);
};

ConstantCollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantCollection(this);
	}
};

ConstantCollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantCollection(this);
	}
};

ConstantCollectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantCollection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantCollectionContext = ConstantCollectionContext;

CqlParser.prototype.constantCollection = function() {

    var localctx = new ConstantCollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CqlParser.RULE_constantCollection);
    try {
        this.state = 2122;
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2118;
            this.constantMap();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2119;
            this.constantTuple();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2120;
            this.constantList();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2121;
            this.constantSet();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantMapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantMap;
    return this;
}

ConstantMapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantMapContext.prototype.constructor = ConstantMapContext;

ConstantMapContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

ConstantMapContext.prototype.collectionMapElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CollectionMapElementContext);
    } else {
        return this.getTypedRuleContext(CollectionMapElementContext,i);
    }
};

ConstantMapContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

ConstantMapContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ConstantMapContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantMap(this);
	}
};

ConstantMapContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantMap(this);
	}
};

ConstantMapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantMap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantMapContext = ConstantMapContext;

CqlParser.prototype.constantMap = function() {

    var localctx = new ConstantMapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CqlParser.RULE_constantMap);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2124;
        this.syntaxBracketLc();
        this.state = 2125;
        this.collectionMapElement();
        this.state = 2131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2126;
            this.syntaxComma();
            this.state = 2127;
            this.collectionMapElement();
            this.state = 2133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2134;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantSet;
    return this;
}

ConstantSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantSetContext.prototype.constructor = ConstantSetContext;

ConstantSetContext.prototype.syntaxBracketLc = function() {
    return this.getTypedRuleContext(SyntaxBracketLcContext,0);
};

ConstantSetContext.prototype.collectionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CollectionElementContext);
    } else {
        return this.getTypedRuleContext(CollectionElementContext,i);
    }
};

ConstantSetContext.prototype.syntaxBracketRc = function() {
    return this.getTypedRuleContext(SyntaxBracketRcContext,0);
};

ConstantSetContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ConstantSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantSet(this);
	}
};

ConstantSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantSet(this);
	}
};

ConstantSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantSetContext = ConstantSetContext;

CqlParser.prototype.constantSet = function() {

    var localctx = new ConstantSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CqlParser.RULE_constantSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2136;
        this.syntaxBracketLc();
        this.state = 2137;
        this.collectionElement();
        this.state = 2143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2138;
            this.syntaxComma();
            this.state = 2139;
            this.collectionElement();
            this.state = 2145;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2146;
        this.syntaxBracketRc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantList;
    return this;
}

ConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantListContext.prototype.constructor = ConstantListContext;

ConstantListContext.prototype.syntaxBracketLs = function() {
    return this.getTypedRuleContext(SyntaxBracketLsContext,0);
};

ConstantListContext.prototype.collectionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CollectionElementContext);
    } else {
        return this.getTypedRuleContext(CollectionElementContext,i);
    }
};

ConstantListContext.prototype.syntaxBracketRs = function() {
    return this.getTypedRuleContext(SyntaxBracketRsContext,0);
};

ConstantListContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ConstantListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantList(this);
	}
};

ConstantListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantList(this);
	}
};

ConstantListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantListContext = ConstantListContext;

CqlParser.prototype.constantList = function() {

    var localctx = new ConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CqlParser.RULE_constantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2148;
        this.syntaxBracketLs();
        this.state = 2149;
        this.collectionElement();
        this.state = 2155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2150;
            this.syntaxComma();
            this.state = 2151;
            this.collectionElement();
            this.state = 2157;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2158;
        this.syntaxBracketRs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantTupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantTuple;
    return this;
}

ConstantTupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantTupleContext.prototype.constructor = ConstantTupleContext;

ConstantTupleContext.prototype.syntaxBracketLr = function() {
    return this.getTypedRuleContext(SyntaxBracketLrContext,0);
};

ConstantTupleContext.prototype.collectionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CollectionElementContext);
    } else {
        return this.getTypedRuleContext(CollectionElementContext,i);
    }
};

ConstantTupleContext.prototype.syntaxBracketRr = function() {
    return this.getTypedRuleContext(SyntaxBracketRrContext,0);
};

ConstantTupleContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

ConstantTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantTuple(this);
	}
};

ConstantTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantTuple(this);
	}
};

ConstantTupleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantTuple(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantTupleContext = ConstantTupleContext;

CqlParser.prototype.constantTuple = function() {

    var localctx = new ConstantTupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CqlParser.RULE_constantTuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2160;
        this.syntaxBracketLr();
        this.state = 2161;
        this.collectionElement();
        this.state = 2167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2162;
            this.syntaxComma();
            this.state = 2163;
            this.collectionElement();
            this.state = 2169;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2170;
        this.syntaxBracketRr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantUuidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantUuid;
    return this;
}

ConstantUuidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantUuidContext.prototype.constructor = ConstantUuidContext;

ConstantUuidContext.prototype.UUID = function() {
    return this.getToken(CqlParser.UUID, 0);
};

ConstantUuidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantUuid(this);
	}
};

ConstantUuidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantUuid(this);
	}
};

ConstantUuidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantUuid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantUuidContext = ConstantUuidContext;

CqlParser.prototype.constantUuid = function() {

    var localctx = new ConstantUuidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CqlParser.RULE_constantUuid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2172;
        this.match(CqlParser.UUID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDecimalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantDecimal;
    return this;
}

ConstantDecimalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDecimalContext.prototype.constructor = ConstantDecimalContext;

ConstantDecimalContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
};

ConstantDecimalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantDecimal(this);
	}
};

ConstantDecimalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantDecimal(this);
	}
};

ConstantDecimalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantDecimal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantDecimalContext = ConstantDecimalContext;

CqlParser.prototype.constantDecimal = function() {

    var localctx = new ConstantDecimalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CqlParser.RULE_constantDecimal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2174;
        this.match(CqlParser.DECIMAL_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantFloatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantFloat;
    return this;
}

ConstantFloatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantFloatContext.prototype.constructor = ConstantFloatContext;

ConstantFloatContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.DECIMAL_LITERAL, 0);
};

ConstantFloatContext.prototype.FLOAT_LITERAL = function() {
    return this.getToken(CqlParser.FLOAT_LITERAL, 0);
};

ConstantFloatContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantFloat(this);
	}
};

ConstantFloatContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantFloat(this);
	}
};

ConstantFloatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantFloat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantFloatContext = ConstantFloatContext;

CqlParser.prototype.constantFloat = function() {

    var localctx = new ConstantFloatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CqlParser.RULE_constantFloat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2176;
        _la = this._input.LA(1);
        if(!(_la===CqlParser.DECIMAL_LITERAL || _la===CqlParser.FLOAT_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantStringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantString;
    return this;
}

ConstantStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantStringContext.prototype.constructor = ConstantStringContext;

ConstantStringContext.prototype.STRING_LITERAL = function() {
    return this.getToken(CqlParser.STRING_LITERAL, 0);
};

ConstantStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantString(this);
	}
};

ConstantStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantString(this);
	}
};

ConstantStringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantString(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantStringContext = ConstantStringContext;

CqlParser.prototype.constantString = function() {

    var localctx = new ConstantStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CqlParser.RULE_constantString);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2178;
        this.match(CqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantBooleanContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantBoolean;
    return this;
}

ConstantBooleanContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantBooleanContext.prototype.constructor = ConstantBooleanContext;

ConstantBooleanContext.prototype.K_TRUE = function() {
    return this.getToken(CqlParser.K_TRUE, 0);
};

ConstantBooleanContext.prototype.K_FALSE = function() {
    return this.getToken(CqlParser.K_FALSE, 0);
};

ConstantBooleanContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantBoolean(this);
	}
};

ConstantBooleanContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantBoolean(this);
	}
};

ConstantBooleanContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantBoolean(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantBooleanContext = ConstantBooleanContext;

CqlParser.prototype.constantBoolean = function() {

    var localctx = new ConstantBooleanContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CqlParser.RULE_constantBoolean);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2180;
        _la = this._input.LA(1);
        if(!(_la===CqlParser.K_FALSE || _la===CqlParser.K_TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantHexadecimalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_constantHexadecimal;
    return this;
}

ConstantHexadecimalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantHexadecimalContext.prototype.constructor = ConstantHexadecimalContext;

ConstantHexadecimalContext.prototype.HEXADECIMAL_LITERAL = function() {
    return this.getToken(CqlParser.HEXADECIMAL_LITERAL, 0);
};

ConstantHexadecimalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterConstantHexadecimal(this);
	}
};

ConstantHexadecimalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitConstantHexadecimal(this);
	}
};

ConstantHexadecimalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitConstantHexadecimal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ConstantHexadecimalContext = ConstantHexadecimalContext;

CqlParser.prototype.constantHexadecimal = function() {

    var localctx = new ConstantHexadecimalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CqlParser.RULE_constantHexadecimal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2182;
        this.match(CqlParser.HEXADECIMAL_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_keyspace;
    return this;
}

KeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyspaceContext.prototype.constructor = KeyspaceContext;

KeyspaceContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

KeyspaceContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


KeyspaceContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

KeyspaceContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

KeyspaceContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

KeyspaceContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

KeyspaceContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

KeyspaceContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

KeyspaceContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

KeyspaceContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

KeyspaceContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

KeyspaceContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

KeyspaceContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

KeyspaceContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

KeyspaceContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

KeyspaceContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

KeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKeyspace(this);
	}
};

KeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKeyspace(this);
	}
};

KeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KeyspaceContext = KeyspaceContext;

CqlParser.prototype.keyspace = function() {

    var localctx = new KeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CqlParser.RULE_keyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2184;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_baseKeyspace;
    return this;
}

BaseKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseKeyspaceContext.prototype.constructor = BaseKeyspaceContext;

BaseKeyspaceContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

BaseKeyspaceContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


BaseKeyspaceContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

BaseKeyspaceContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

BaseKeyspaceContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

BaseKeyspaceContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

BaseKeyspaceContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

BaseKeyspaceContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

BaseKeyspaceContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

BaseKeyspaceContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

BaseKeyspaceContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

BaseKeyspaceContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

BaseKeyspaceContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

BaseKeyspaceContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

BaseKeyspaceContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

BaseKeyspaceContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

BaseKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBaseKeyspace(this);
	}
};

BaseKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBaseKeyspace(this);
	}
};

BaseKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBaseKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BaseKeyspaceContext = BaseKeyspaceContext;

CqlParser.prototype.baseKeyspace = function() {

    var localctx = new BaseKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CqlParser.RULE_baseKeyspace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2186;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_table;
    return this;
}

TableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableContext.prototype.constructor = TableContext;

TableContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

TableContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


TableContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

TableContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

TableContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

TableContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

TableContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

TableContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

TableContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

TableContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

TableContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

TableContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

TableContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

TableContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

TableContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

TableContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTable(this);
	}
};

TableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableContext = TableContext;

CqlParser.prototype.table = function() {

    var localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CqlParser.RULE_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2188;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_baseTable;
    return this;
}

BaseTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTableContext.prototype.constructor = BaseTableContext;

BaseTableContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

BaseTableContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


BaseTableContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

BaseTableContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

BaseTableContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

BaseTableContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

BaseTableContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

BaseTableContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

BaseTableContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

BaseTableContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

BaseTableContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

BaseTableContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

BaseTableContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

BaseTableContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

BaseTableContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

BaseTableContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

BaseTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBaseTable(this);
	}
};

BaseTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBaseTable(this);
	}
};

BaseTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBaseTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BaseTableContext = BaseTableContext;

CqlParser.prototype.baseTable = function() {

    var localctx = new BaseTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CqlParser.RULE_baseTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2190;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedView;
    return this;
}

MaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewContext.prototype.constructor = MaterializedViewContext;

MaterializedViewContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

MaterializedViewContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


MaterializedViewContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

MaterializedViewContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

MaterializedViewContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

MaterializedViewContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

MaterializedViewContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

MaterializedViewContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

MaterializedViewContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

MaterializedViewContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

MaterializedViewContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

MaterializedViewContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

MaterializedViewContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

MaterializedViewContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

MaterializedViewContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

MaterializedViewContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

MaterializedViewContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

MaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedView(this);
	}
};

MaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedView(this);
	}
};

MaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewContext = MaterializedViewContext;

CqlParser.prototype.materializedView = function() {

    var localctx = new MaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CqlParser.RULE_materializedView);
    try {
        this.state = 2212;
        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2192;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2193;
            this.match(CqlParser.DQUOTE);
            this.state = 2194;
            this.match(CqlParser.OBJECT_NAME);
            this.state = 2195;
            this.match(CqlParser.DQUOTE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2196;
            this.match(CqlParser.K_ROLE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2197;
            this.match(CqlParser.K_PERMISSIONS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2198;
            this.match(CqlParser.K_OPTIONS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2199;
            this.match(CqlParser.K_DURABLE_WRITES);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2200;
            this.match(CqlParser.K_LANGUAGE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2201;
            this.match(CqlParser.K_TYPE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2202;
            this.match(CqlParser.K_INITCOND);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2203;
            this.match(CqlParser.K_REPLICATION);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2204;
            this.match(CqlParser.K_TTL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2205;
            this.match(CqlParser.K_PARTITION);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2206;
            this.match(CqlParser.K_KEY);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2207;
            this.match(CqlParser.K_LEVEL);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2208;
            this.match(CqlParser.K_USERS);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2209;
            this.match(CqlParser.K_USER);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2210;
            this.match(CqlParser.K_ROLE);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2211;
            this.match(CqlParser.K_ROLES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyspaceObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_keyspaceObject;
    return this;
}

KeyspaceObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyspaceObjectContext.prototype.constructor = KeyspaceObjectContext;

KeyspaceObjectContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

KeyspaceObjectContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


KeyspaceObjectContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

KeyspaceObjectContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

KeyspaceObjectContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

KeyspaceObjectContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

KeyspaceObjectContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

KeyspaceObjectContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

KeyspaceObjectContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

KeyspaceObjectContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

KeyspaceObjectContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

KeyspaceObjectContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

KeyspaceObjectContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

KeyspaceObjectContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

KeyspaceObjectContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

KeyspaceObjectContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

KeyspaceObjectContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

KeyspaceObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKeyspaceObject(this);
	}
};

KeyspaceObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKeyspaceObject(this);
	}
};

KeyspaceObjectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKeyspaceObject(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KeyspaceObjectContext = KeyspaceObjectContext;

CqlParser.prototype.keyspaceObject = function() {

    var localctx = new KeyspaceObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CqlParser.RULE_keyspaceObject);
    try {
        this.state = 2234;
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2214;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2215;
            this.match(CqlParser.DQUOTE);
            this.state = 2216;
            this.match(CqlParser.OBJECT_NAME);
            this.state = 2217;
            this.match(CqlParser.DQUOTE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2218;
            this.match(CqlParser.K_ROLE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2219;
            this.match(CqlParser.K_PERMISSIONS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2220;
            this.match(CqlParser.K_OPTIONS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2221;
            this.match(CqlParser.K_DURABLE_WRITES);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2222;
            this.match(CqlParser.K_LANGUAGE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2223;
            this.match(CqlParser.K_TYPE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2224;
            this.match(CqlParser.K_INITCOND);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2225;
            this.match(CqlParser.K_REPLICATION);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2226;
            this.match(CqlParser.K_TTL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2227;
            this.match(CqlParser.K_PARTITION);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2228;
            this.match(CqlParser.K_KEY);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2229;
            this.match(CqlParser.K_LEVEL);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2230;
            this.match(CqlParser.K_USERS);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2231;
            this.match(CqlParser.K_USER);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2232;
            this.match(CqlParser.K_ROLE);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2233;
            this.match(CqlParser.K_ROLES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectUnknownContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_objectUnknown;
    return this;
}

ObjectUnknownContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectUnknownContext.prototype.constructor = ObjectUnknownContext;

ObjectUnknownContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

ObjectUnknownContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


ObjectUnknownContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

ObjectUnknownContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

ObjectUnknownContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

ObjectUnknownContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

ObjectUnknownContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

ObjectUnknownContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

ObjectUnknownContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

ObjectUnknownContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

ObjectUnknownContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

ObjectUnknownContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

ObjectUnknownContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

ObjectUnknownContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

ObjectUnknownContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

ObjectUnknownContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

ObjectUnknownContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

ObjectUnknownContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

ObjectUnknownContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterObjectUnknown(this);
	}
};

ObjectUnknownContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitObjectUnknown(this);
	}
};

ObjectUnknownContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitObjectUnknown(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ObjectUnknownContext = ObjectUnknownContext;

CqlParser.prototype.objectUnknown = function() {

    var localctx = new ObjectUnknownContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CqlParser.RULE_objectUnknown);
    try {
        this.state = 2257;
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2236;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2237;
            this.match(CqlParser.DQUOTE);
            this.state = 2238;
            this.match(CqlParser.OBJECT_NAME);
            this.state = 2239;
            this.match(CqlParser.DQUOTE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2240;
            this.match(CqlParser.K_ROLE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2241;
            this.match(CqlParser.K_PERMISSIONS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2242;
            this.match(CqlParser.K_OPTIONS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2243;
            this.match(CqlParser.K_DURABLE_WRITES);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2244;
            this.match(CqlParser.K_LANGUAGE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2245;
            this.match(CqlParser.K_TYPE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2246;
            this.match(CqlParser.K_INITCOND);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2247;
            this.match(CqlParser.K_REPLICATION);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2248;
            this.match(CqlParser.K_TTL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2249;
            this.match(CqlParser.K_PARTITION);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2250;
            this.match(CqlParser.K_KEY);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2251;
            this.match(CqlParser.K_LEVEL);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2252;
            this.match(CqlParser.K_USERS);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2253;
            this.match(CqlParser.K_USER);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2254;
            this.match(CqlParser.K_ROLE);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2255;
            this.match(CqlParser.K_ROLES);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2256;
            this.match(CqlParser.K_INPUT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_aggregateSpec;
    return this;
}

AggregateSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateSpecContext.prototype.constructor = AggregateSpecContext;

AggregateSpecContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

AggregateSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

AggregateSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

AggregateSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAggregateSpec(this);
	}
};

AggregateSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAggregateSpec(this);
	}
};

AggregateSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAggregateSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AggregateSpecContext = AggregateSpecContext;

CqlParser.prototype.aggregateSpec = function() {

    var localctx = new AggregateSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CqlParser.RULE_aggregateSpec);
    try {
        this.state = 2269;
        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2259;
            this.aggregate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2260;
            this.keyspace();
            this.state = 2261;
            this.specialDot();
            this.state = 2262;
            this.aggregate();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2264;
            this.keyspace();
            this.state = 2265;
            this.specialDot();
             this.notifyErrorListeners("rule.aggregate"); 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.aggregateSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_typeSpec;
    return this;
}

TypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecContext.prototype.constructor = TypeSpecContext;

TypeSpecContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

TypeSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

TypeSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTypeSpec(this);
	}
};

TypeSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTypeSpec(this);
	}
};

TypeSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTypeSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TypeSpecContext = TypeSpecContext;

CqlParser.prototype.typeSpec = function() {

    var localctx = new TypeSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CqlParser.RULE_typeSpec);
    try {
        this.state = 2281;
        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2271;
            this.type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2272;
            this.keyspace();
            this.state = 2273;
            this.specialDot();
            this.state = 2274;
            this.type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2276;
            this.keyspace();
            this.state = 2277;
            this.specialDot();
             this.notifyErrorListeners("rule.type"); 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.typeSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_functionSpec;
    return this;
}

FunctionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionSpecContext.prototype.constructor = FunctionSpecContext;

FunctionSpecContext.prototype.function = function() {
    return this.getTypedRuleContext(FunctionContext,0);
};

FunctionSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

FunctionSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

FunctionSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunctionSpec(this);
	}
};

FunctionSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunctionSpec(this);
	}
};

FunctionSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunctionSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionSpecContext = FunctionSpecContext;

CqlParser.prototype.functionSpec = function() {

    var localctx = new FunctionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CqlParser.RULE_functionSpec);
    try {
        this.state = 2293;
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2283;
            this.function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2284;
            this.keyspace();
            this.state = 2285;
            this.specialDot();
            this.state = 2286;
            this.function();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2288;
            this.keyspace();
            this.state = 2289;
            this.specialDot();
             this.notifyErrorListeners("rule.function"); 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.functionSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableSpec;
    return this;
}

TableSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSpecContext.prototype.constructor = TableSpecContext;

TableSpecContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

TableSpecContext.prototype.syntaxDquote = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxDquoteContext);
    } else {
        return this.getTypedRuleContext(SyntaxDquoteContext,i);
    }
};

TableSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

TableSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

TableSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableSpec(this);
	}
};

TableSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableSpec(this);
	}
};

TableSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableSpecContext = TableSpecContext;

CqlParser.prototype.tableSpec = function() {

    var localctx = new TableSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CqlParser.RULE_tableSpec);
    try {
        this.state = 2333;
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2295;
            this.table();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2296;
            this.syntaxDquote();
            this.state = 2297;
            this.table();
            this.state = 2298;
            this.syntaxDquote();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2305;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2300;
                this.syntaxDquote();
                this.state = 2301;
                this.keyspace();
                this.state = 2302;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2304;
                this.keyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2307;
            this.specialDot();
            this.state = 2308;
            this.table();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2315;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2310;
                this.syntaxDquote();
                this.state = 2311;
                this.keyspace();
                this.state = 2312;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2314;
                this.keyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2317;
            this.specialDot();
            this.state = 2318;
            this.syntaxDquote();
            this.state = 2319;
            this.table();
            this.state = 2320;
            this.syntaxDquote();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2327;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2322;
                this.syntaxDquote();
                this.state = 2323;
                this.keyspace();
                this.state = 2324;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2326;
                this.keyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2329;
            this.specialDot();
             this.notifyErrorListeners("rule.table"); 
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
             this.notifyErrorListeners("rule.tableSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseTableSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_baseTableSpec;
    return this;
}

BaseTableSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTableSpecContext.prototype.constructor = BaseTableSpecContext;

BaseTableSpecContext.prototype.baseTable = function() {
    return this.getTypedRuleContext(BaseTableContext,0);
};

BaseTableSpecContext.prototype.syntaxDquote = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxDquoteContext);
    } else {
        return this.getTypedRuleContext(SyntaxDquoteContext,i);
    }
};

BaseTableSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

BaseTableSpecContext.prototype.baseKeyspace = function() {
    return this.getTypedRuleContext(BaseKeyspaceContext,0);
};

BaseTableSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterBaseTableSpec(this);
	}
};

BaseTableSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitBaseTableSpec(this);
	}
};

BaseTableSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitBaseTableSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.BaseTableSpecContext = BaseTableSpecContext;

CqlParser.prototype.baseTableSpec = function() {

    var localctx = new BaseTableSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CqlParser.RULE_baseTableSpec);
    try {
        this.state = 2373;
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2335;
            this.baseTable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2336;
            this.syntaxDquote();
            this.state = 2337;
            this.baseTable();
            this.state = 2338;
            this.syntaxDquote();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2345;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2340;
                this.syntaxDquote();
                this.state = 2341;
                this.baseKeyspace();
                this.state = 2342;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2344;
                this.baseKeyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2347;
            this.specialDot();
            this.state = 2348;
            this.baseTable();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2355;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2350;
                this.syntaxDquote();
                this.state = 2351;
                this.baseKeyspace();
                this.state = 2352;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2354;
                this.baseKeyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2357;
            this.specialDot();
            this.state = 2358;
            this.syntaxDquote();
            this.state = 2359;
            this.baseTable();
            this.state = 2360;
            this.syntaxDquote();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2367;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2362;
                this.syntaxDquote();
                this.state = 2363;
                this.baseKeyspace();
                this.state = 2364;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2366;
                this.baseKeyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2369;
            this.specialDot();
             this.notifyErrorListeners("rule.baseTable"); 
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
             this.notifyErrorListeners("rule.baseTableSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_indexSpec;
    return this;
}

IndexSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexSpecContext.prototype.constructor = IndexSpecContext;

IndexSpecContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

IndexSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

IndexSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

IndexSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterIndexSpec(this);
	}
};

IndexSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitIndexSpec(this);
	}
};

IndexSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitIndexSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.IndexSpecContext = IndexSpecContext;

CqlParser.prototype.indexSpec = function() {

    var localctx = new IndexSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CqlParser.RULE_indexSpec);
    try {
        this.state = 2385;
        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2375;
            this.index();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2376;
            this.keyspace();
            this.state = 2377;
            this.specialDot();
            this.state = 2378;
            this.index();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2380;
            this.keyspace();
            this.state = 2381;
            this.specialDot();
             this.notifyErrorListeners("rule.index"); 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.indexSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaterializedViewSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_materializedViewSpec;
    return this;
}

MaterializedViewSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterializedViewSpecContext.prototype.constructor = MaterializedViewSpecContext;

MaterializedViewSpecContext.prototype.materializedView = function() {
    return this.getTypedRuleContext(MaterializedViewContext,0);
};

MaterializedViewSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

MaterializedViewSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

MaterializedViewSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterMaterializedViewSpec(this);
	}
};

MaterializedViewSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitMaterializedViewSpec(this);
	}
};

MaterializedViewSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitMaterializedViewSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.MaterializedViewSpecContext = MaterializedViewSpecContext;

CqlParser.prototype.materializedViewSpec = function() {

    var localctx = new MaterializedViewSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CqlParser.RULE_materializedViewSpec);
    try {
        this.state = 2397;
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2387;
            this.materializedView();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2388;
            this.keyspace();
            this.state = 2389;
            this.specialDot();
            this.state = 2390;
            this.materializedView();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2392;
            this.keyspace();
            this.state = 2393;
            this.specialDot();
             this.notifyErrorListeners("rule.materializedView"); 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
             this.notifyErrorListeners("rule.materializedViewSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableOrMaterializedViewSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_tableOrMaterializedViewSpec;
    return this;
}

TableOrMaterializedViewSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOrMaterializedViewSpecContext.prototype.constructor = TableOrMaterializedViewSpecContext;

TableOrMaterializedViewSpecContext.prototype.tableSpec = function() {
    return this.getTypedRuleContext(TableSpecContext,0);
};

TableOrMaterializedViewSpecContext.prototype.materializedViewSpec = function() {
    return this.getTypedRuleContext(MaterializedViewSpecContext,0);
};

TableOrMaterializedViewSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTableOrMaterializedViewSpec(this);
	}
};

TableOrMaterializedViewSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTableOrMaterializedViewSpec(this);
	}
};

TableOrMaterializedViewSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTableOrMaterializedViewSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TableOrMaterializedViewSpecContext = TableOrMaterializedViewSpecContext;

CqlParser.prototype.tableOrMaterializedViewSpec = function() {

    var localctx = new TableOrMaterializedViewSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CqlParser.RULE_tableOrMaterializedViewSpec);
    try {
        this.state = 2402;
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2399;
            this.tableSpec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2400;
            this.materializedViewSpec();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
             this.notifyErrorListeners("rule.tableOrMaterializedViewSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectUnknownSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_objectUnknownSpec;
    return this;
}

ObjectUnknownSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectUnknownSpecContext.prototype.constructor = ObjectUnknownSpecContext;

ObjectUnknownSpecContext.prototype.objectUnknown = function() {
    return this.getTypedRuleContext(ObjectUnknownContext,0);
};

ObjectUnknownSpecContext.prototype.syntaxDquote = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxDquoteContext);
    } else {
        return this.getTypedRuleContext(SyntaxDquoteContext,i);
    }
};

ObjectUnknownSpecContext.prototype.specialDot = function() {
    return this.getTypedRuleContext(SpecialDotContext,0);
};

ObjectUnknownSpecContext.prototype.keyspace = function() {
    return this.getTypedRuleContext(KeyspaceContext,0);
};

ObjectUnknownSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterObjectUnknownSpec(this);
	}
};

ObjectUnknownSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitObjectUnknownSpec(this);
	}
};

ObjectUnknownSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitObjectUnknownSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ObjectUnknownSpecContext = ObjectUnknownSpecContext;

CqlParser.prototype.objectUnknownSpec = function() {

    var localctx = new ObjectUnknownSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CqlParser.RULE_objectUnknownSpec);
    try {
        this.state = 2442;
        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2404;
            this.objectUnknown();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2405;
            this.syntaxDquote();
            this.state = 2406;
            this.objectUnknown();
            this.state = 2407;
            this.syntaxDquote();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2414;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2409;
                this.syntaxDquote();
                this.state = 2410;
                this.keyspace();
                this.state = 2411;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2413;
                this.keyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2416;
            this.specialDot();
            this.state = 2417;
            this.objectUnknown();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2424;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2419;
                this.syntaxDquote();
                this.state = 2420;
                this.keyspace();
                this.state = 2421;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2423;
                this.keyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2426;
            this.specialDot();
            this.state = 2427;
            this.syntaxDquote();
            this.state = 2428;
            this.objectUnknown();
            this.state = 2429;
            this.syntaxDquote();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2436;
            switch(this._input.LA(1)) {
            case CqlParser.DQUOTE:
                this.state = 2431;
                this.syntaxDquote();
                this.state = 2432;
                this.keyspace();
                this.state = 2433;
                this.syntaxDquote();
                break;
            case CqlParser.K_DURABLE_WRITES:
            case CqlParser.K_INITCOND:
            case CqlParser.K_KEY:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_LEVEL:
            case CqlParser.K_OPTIONS:
            case CqlParser.K_PARTITION:
            case CqlParser.K_PERMISSIONS:
            case CqlParser.K_REPLICATION:
            case CqlParser.K_TTL:
            case CqlParser.K_TYPE:
            case CqlParser.K_ROLES:
            case CqlParser.K_ROLE:
            case CqlParser.K_USERS:
            case CqlParser.K_USER:
            case CqlParser.OBJECT_NAME:
                this.state = 2435;
                this.keyspace();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2438;
            this.specialDot();
             this.notifyErrorListeners("rule.objectUnknownSpec"); 
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
             this.notifyErrorListeners("rule.objectUnknownSpec"); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnSpec;
    return this;
}

ColumnSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnSpecContext.prototype.constructor = ColumnSpecContext;

ColumnSpecContext.prototype.column = function() {
    return this.getTypedRuleContext(ColumnContext,0);
};

ColumnSpecContext.prototype.syntaxDquote = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxDquoteContext);
    } else {
        return this.getTypedRuleContext(SyntaxDquoteContext,i);
    }
};

ColumnSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnSpec(this);
	}
};

ColumnSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnSpec(this);
	}
};

ColumnSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnSpecContext = ColumnSpecContext;

CqlParser.prototype.columnSpec = function() {

    var localctx = new ColumnSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CqlParser.RULE_columnSpec);
    try {
        this.state = 2449;
        switch(this._input.LA(1)) {
        case CqlParser.K_DURABLE_WRITES:
        case CqlParser.K_INITCOND:
        case CqlParser.K_INPUT:
        case CqlParser.K_KEY:
        case CqlParser.K_LANGUAGE:
        case CqlParser.K_LEVEL:
        case CqlParser.K_OPTIONS:
        case CqlParser.K_PARTITION:
        case CqlParser.K_PERMISSIONS:
        case CqlParser.K_REPLICATION:
        case CqlParser.K_TTL:
        case CqlParser.K_TYPE:
        case CqlParser.K_ROLES:
        case CqlParser.K_ROLE:
        case CqlParser.K_USERS:
        case CqlParser.K_USER:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 2444;
            this.column();
            break;
        case CqlParser.DQUOTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2445;
            this.syntaxDquote();
            this.state = 2446;
            this.column();
            this.state = 2447;
            this.syntaxDquote();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_column;
    return this;
}

ColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnContext.prototype.constructor = ColumnContext;

ColumnContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

ColumnContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


ColumnContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

ColumnContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

ColumnContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

ColumnContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

ColumnContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

ColumnContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

ColumnContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

ColumnContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

ColumnContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

ColumnContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

ColumnContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

ColumnContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

ColumnContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

ColumnContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

ColumnContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

ColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumn(this);
	}
};

ColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumn(this);
	}
};

ColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnContext = ColumnContext;

CqlParser.prototype.column = function() {

    var localctx = new ColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CqlParser.RULE_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2451;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_INPUT - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnUnknownSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnUnknownSpec;
    return this;
}

ColumnUnknownSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnUnknownSpecContext.prototype.constructor = ColumnUnknownSpecContext;

ColumnUnknownSpecContext.prototype.columnUnknown = function() {
    return this.getTypedRuleContext(ColumnUnknownContext,0);
};

ColumnUnknownSpecContext.prototype.syntaxDquote = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxDquoteContext);
    } else {
        return this.getTypedRuleContext(SyntaxDquoteContext,i);
    }
};

ColumnUnknownSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnUnknownSpec(this);
	}
};

ColumnUnknownSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnUnknownSpec(this);
	}
};

ColumnUnknownSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnUnknownSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnUnknownSpecContext = ColumnUnknownSpecContext;

CqlParser.prototype.columnUnknownSpec = function() {

    var localctx = new ColumnUnknownSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CqlParser.RULE_columnUnknownSpec);
    try {
        this.state = 2458;
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2453;
            this.columnUnknown();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2454;
            this.syntaxDquote();
            this.state = 2455;
            this.columnUnknown();
            this.state = 2456;
            this.syntaxDquote();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnUnknownContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_columnUnknown;
    return this;
}

ColumnUnknownContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnUnknownContext.prototype.constructor = ColumnUnknownContext;

ColumnUnknownContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

ColumnUnknownContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


ColumnUnknownContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

ColumnUnknownContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

ColumnUnknownContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

ColumnUnknownContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

ColumnUnknownContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

ColumnUnknownContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

ColumnUnknownContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

ColumnUnknownContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

ColumnUnknownContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

ColumnUnknownContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

ColumnUnknownContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

ColumnUnknownContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

ColumnUnknownContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

ColumnUnknownContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

ColumnUnknownContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

ColumnUnknownContext.prototype.syntaxDquote = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxDquoteContext);
    } else {
        return this.getTypedRuleContext(SyntaxDquoteContext,i);
    }
};

ColumnUnknownContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterColumnUnknown(this);
	}
};

ColumnUnknownContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitColumnUnknown(this);
	}
};

ColumnUnknownContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitColumnUnknown(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ColumnUnknownContext = ColumnUnknownContext;

CqlParser.prototype.columnUnknown = function() {

    var localctx = new ColumnUnknownContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CqlParser.RULE_columnUnknown);
    var _la = 0; // Token type
    try {
        this.state = 2482;
        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2460;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2461;
            this.match(CqlParser.K_ROLE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2462;
            this.match(CqlParser.K_PERMISSIONS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2463;
            this.match(CqlParser.K_OPTIONS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2464;
            this.match(CqlParser.K_DURABLE_WRITES);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2465;
            this.match(CqlParser.K_LANGUAGE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2466;
            this.match(CqlParser.K_TYPE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2467;
            this.match(CqlParser.K_INITCOND);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2468;
            this.match(CqlParser.K_REPLICATION);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2469;
            this.match(CqlParser.K_TTL);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2470;
            this.match(CqlParser.K_PARTITION);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2471;
            this.match(CqlParser.K_KEY);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2472;
            this.match(CqlParser.K_LEVEL);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2473;
            this.match(CqlParser.K_USERS);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2474;
            this.match(CqlParser.K_USER);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2475;
            this.match(CqlParser.K_ROLE);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2476;
            this.match(CqlParser.K_ROLES);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2477;
            this.match(CqlParser.K_INPUT);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2478;
            this.syntaxDquote();
            this.state = 2479;
            _la = this._input.LA(1);
            if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_INPUT - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 2480;
            this.syntaxDquote();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;

DataTypeContext.prototype.dataTypeFundamental = function() {
    return this.getTypedRuleContext(DataTypeFundamentalContext,0);
};

DataTypeContext.prototype.dataTypeCollection = function() {
    return this.getTypedRuleContext(DataTypeCollectionContext,0);
};

DataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataType(this);
	}
};

DataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataType(this);
	}
};

DataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeContext = DataTypeContext;

CqlParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CqlParser.RULE_dataType);
    try {
        this.state = 2486;
        switch(this._input.LA(1)) {
        case CqlParser.K_TIMESTAMP:
        case CqlParser.K_ASCII:
        case CqlParser.K_BIGINT:
        case CqlParser.K_BLOB:
        case CqlParser.K_BOOLEAN:
        case CqlParser.K_COUNTER:
        case CqlParser.K_DATE:
        case CqlParser.K_DECIMAL:
        case CqlParser.K_DOUBLE:
        case CqlParser.K_FLOAT:
        case CqlParser.K_INET:
        case CqlParser.K_INT:
        case CqlParser.K_SMALLINT:
        case CqlParser.K_TEXT:
        case CqlParser.K_TIMEUUID:
        case CqlParser.K_TIME:
        case CqlParser.K_TINYINT:
        case CqlParser.K_UUID:
        case CqlParser.K_VARCHAR:
        case CqlParser.K_VARINT:
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 2484;
            this.dataTypeFundamental();
            break;
        case CqlParser.K_SET:
        case CqlParser.K_FROZEN:
        case CqlParser.K_LIST:
        case CqlParser.K_MAP:
        case CqlParser.K_TUPLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2485;
            this.dataTypeCollection();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeCollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeCollection;
    return this;
}

DataTypeCollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeCollectionContext.prototype.constructor = DataTypeCollectionContext;

DataTypeCollectionContext.prototype.dataTypeFrozen = function() {
    return this.getTypedRuleContext(DataTypeFrozenContext,0);
};

DataTypeCollectionContext.prototype.dataTypeStructure = function() {
    return this.getTypedRuleContext(DataTypeStructureContext,0);
};

DataTypeCollectionContext.prototype.dataTypeSet = function() {
    return this.getTypedRuleContext(DataTypeSetContext,0);
};

DataTypeCollectionContext.prototype.dataTypeList = function() {
    return this.getTypedRuleContext(DataTypeListContext,0);
};

DataTypeCollectionContext.prototype.dataTypeMap = function() {
    return this.getTypedRuleContext(DataTypeMapContext,0);
};

DataTypeCollectionContext.prototype.dataTypeTuple = function() {
    return this.getTypedRuleContext(DataTypeTupleContext,0);
};

DataTypeCollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeCollection(this);
	}
};

DataTypeCollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeCollection(this);
	}
};

DataTypeCollectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeCollection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeCollectionContext = DataTypeCollectionContext;

CqlParser.prototype.dataTypeCollection = function() {

    var localctx = new DataTypeCollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CqlParser.RULE_dataTypeCollection);
    try {
        this.state = 2513;
        switch(this._input.LA(1)) {
        case CqlParser.K_FROZEN:
            this.enterOuterAlt(localctx, 1);
            this.state = 2488;
            this.dataTypeFrozen();
            this.state = 2491;
            switch(this._input.LA(1)) {
            case CqlParser.OPERATOR_LT:
                this.state = 2489;
                this.dataTypeStructure();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.COMMA:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ADD:
            case CqlParser.K_FINALFUNC:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_RENAME:
            case CqlParser.K_STATIC:
            case CqlParser.OPERATOR_GT:
                 this.notifyErrorListeners("rule.dataTypeStructure"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.K_SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 2493;
            this.dataTypeSet();
            this.state = 2496;
            switch(this._input.LA(1)) {
            case CqlParser.OPERATOR_LT:
                this.state = 2494;
                this.dataTypeStructure();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.COMMA:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ADD:
            case CqlParser.K_FINALFUNC:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_RENAME:
            case CqlParser.K_STATIC:
            case CqlParser.OPERATOR_GT:
                 this.notifyErrorListeners("rule.dataTypeStructure"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.K_LIST:
            this.enterOuterAlt(localctx, 3);
            this.state = 2498;
            this.dataTypeList();
            this.state = 2501;
            switch(this._input.LA(1)) {
            case CqlParser.OPERATOR_LT:
                this.state = 2499;
                this.dataTypeStructure();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.COMMA:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ADD:
            case CqlParser.K_FINALFUNC:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_RENAME:
            case CqlParser.K_STATIC:
            case CqlParser.OPERATOR_GT:
                 this.notifyErrorListeners("rule.dataTypeStructure"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.K_MAP:
            this.enterOuterAlt(localctx, 4);
            this.state = 2503;
            this.dataTypeMap();
            this.state = 2506;
            switch(this._input.LA(1)) {
            case CqlParser.OPERATOR_LT:
                this.state = 2504;
                this.dataTypeStructure();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.COMMA:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ADD:
            case CqlParser.K_FINALFUNC:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_RENAME:
            case CqlParser.K_STATIC:
            case CqlParser.OPERATOR_GT:
                 this.notifyErrorListeners("rule.dataTypeStructure"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case CqlParser.K_TUPLE:
            this.enterOuterAlt(localctx, 5);
            this.state = 2508;
            this.dataTypeTuple();
            this.state = 2511;
            switch(this._input.LA(1)) {
            case CqlParser.OPERATOR_LT:
                this.state = 2509;
                this.dataTypeStructure();
                break;
            case CqlParser.EOF:
            case CqlParser.RR_BRACKET:
            case CqlParser.COMMA:
            case CqlParser.SEMI:
            case CqlParser.MINUSMINUS:
            case CqlParser.K_ADD:
            case CqlParser.K_FINALFUNC:
            case CqlParser.K_LANGUAGE:
            case CqlParser.K_PRIMARY:
            case CqlParser.K_RENAME:
            case CqlParser.K_STATIC:
            case CqlParser.OPERATOR_GT:
                 this.notifyErrorListeners("rule.dataTypeStructure"); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeFundamentalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeFundamental;
    return this;
}

DataTypeFundamentalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeFundamentalContext.prototype.constructor = DataTypeFundamentalContext;

DataTypeFundamentalContext.prototype.dataTypeAscii = function() {
    return this.getTypedRuleContext(DataTypeAsciiContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeBigint = function() {
    return this.getTypedRuleContext(DataTypeBigintContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeBlob = function() {
    return this.getTypedRuleContext(DataTypeBlobContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeBoolean = function() {
    return this.getTypedRuleContext(DataTypeBooleanContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeCounter = function() {
    return this.getTypedRuleContext(DataTypeCounterContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeDate = function() {
    return this.getTypedRuleContext(DataTypeDateContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeDecimal = function() {
    return this.getTypedRuleContext(DataTypeDecimalContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeDouble = function() {
    return this.getTypedRuleContext(DataTypeDoubleContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeFloat = function() {
    return this.getTypedRuleContext(DataTypeFloatContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeInet = function() {
    return this.getTypedRuleContext(DataTypeInetContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeInt = function() {
    return this.getTypedRuleContext(DataTypeIntContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeSmallInt = function() {
    return this.getTypedRuleContext(DataTypeSmallIntContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeText = function() {
    return this.getTypedRuleContext(DataTypeTextContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeTime = function() {
    return this.getTypedRuleContext(DataTypeTimeContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeTimeUuid = function() {
    return this.getTypedRuleContext(DataTypeTimeUuidContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeTimestamp = function() {
    return this.getTypedRuleContext(DataTypeTimestampContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeTinyInt = function() {
    return this.getTypedRuleContext(DataTypeTinyIntContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeUuid = function() {
    return this.getTypedRuleContext(DataTypeUuidContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeVarChar = function() {
    return this.getTypedRuleContext(DataTypeVarCharContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeVarInt = function() {
    return this.getTypedRuleContext(DataTypeVarIntContext,0);
};

DataTypeFundamentalContext.prototype.dataTypeUserDefined = function() {
    return this.getTypedRuleContext(DataTypeUserDefinedContext,0);
};

DataTypeFundamentalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeFundamental(this);
	}
};

DataTypeFundamentalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeFundamental(this);
	}
};

DataTypeFundamentalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeFundamental(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeFundamentalContext = DataTypeFundamentalContext;

CqlParser.prototype.dataTypeFundamental = function() {

    var localctx = new DataTypeFundamentalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CqlParser.RULE_dataTypeFundamental);
    try {
        this.state = 2536;
        switch(this._input.LA(1)) {
        case CqlParser.K_ASCII:
            this.enterOuterAlt(localctx, 1);
            this.state = 2515;
            this.dataTypeAscii();
            break;
        case CqlParser.K_BIGINT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2516;
            this.dataTypeBigint();
            break;
        case CqlParser.K_BLOB:
            this.enterOuterAlt(localctx, 3);
            this.state = 2517;
            this.dataTypeBlob();
            break;
        case CqlParser.K_BOOLEAN:
            this.enterOuterAlt(localctx, 4);
            this.state = 2518;
            this.dataTypeBoolean();
            break;
        case CqlParser.K_COUNTER:
            this.enterOuterAlt(localctx, 5);
            this.state = 2519;
            this.dataTypeCounter();
            break;
        case CqlParser.K_DATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 2520;
            this.dataTypeDate();
            break;
        case CqlParser.K_DECIMAL:
            this.enterOuterAlt(localctx, 7);
            this.state = 2521;
            this.dataTypeDecimal();
            break;
        case CqlParser.K_DOUBLE:
            this.enterOuterAlt(localctx, 8);
            this.state = 2522;
            this.dataTypeDouble();
            break;
        case CqlParser.K_FLOAT:
            this.enterOuterAlt(localctx, 9);
            this.state = 2523;
            this.dataTypeFloat();
            break;
        case CqlParser.K_INET:
            this.enterOuterAlt(localctx, 10);
            this.state = 2524;
            this.dataTypeInet();
            break;
        case CqlParser.K_INT:
            this.enterOuterAlt(localctx, 11);
            this.state = 2525;
            this.dataTypeInt();
            break;
        case CqlParser.K_SMALLINT:
            this.enterOuterAlt(localctx, 12);
            this.state = 2526;
            this.dataTypeSmallInt();
            break;
        case CqlParser.K_TEXT:
            this.enterOuterAlt(localctx, 13);
            this.state = 2527;
            this.dataTypeText();
            break;
        case CqlParser.K_TIME:
            this.enterOuterAlt(localctx, 14);
            this.state = 2528;
            this.dataTypeTime();
            break;
        case CqlParser.K_TIMEUUID:
            this.enterOuterAlt(localctx, 15);
            this.state = 2529;
            this.dataTypeTimeUuid();
            break;
        case CqlParser.K_TIMESTAMP:
            this.enterOuterAlt(localctx, 16);
            this.state = 2530;
            this.dataTypeTimestamp();
            break;
        case CqlParser.K_TINYINT:
            this.enterOuterAlt(localctx, 17);
            this.state = 2531;
            this.dataTypeTinyInt();
            break;
        case CqlParser.K_UUID:
            this.enterOuterAlt(localctx, 18);
            this.state = 2532;
            this.dataTypeUuid();
            break;
        case CqlParser.K_VARCHAR:
            this.enterOuterAlt(localctx, 19);
            this.state = 2533;
            this.dataTypeVarChar();
            break;
        case CqlParser.K_VARINT:
            this.enterOuterAlt(localctx, 20);
            this.state = 2534;
            this.dataTypeVarInt();
            break;
        case CqlParser.OBJECT_NAME:
            this.enterOuterAlt(localctx, 21);
            this.state = 2535;
            this.dataTypeUserDefined();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderDirectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_orderDirection;
    return this;
}

OrderDirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderDirectionContext.prototype.constructor = OrderDirectionContext;

OrderDirectionContext.prototype.kwAsc = function() {
    return this.getTypedRuleContext(KwAscContext,0);
};

OrderDirectionContext.prototype.kwDesc = function() {
    return this.getTypedRuleContext(KwDescContext,0);
};

OrderDirectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterOrderDirection(this);
	}
};

OrderDirectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitOrderDirection(this);
	}
};

OrderDirectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitOrderDirection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.OrderDirectionContext = OrderDirectionContext;

CqlParser.prototype.orderDirection = function() {

    var localctx = new OrderDirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CqlParser.RULE_orderDirection);
    try {
        this.state = 2540;
        switch(this._input.LA(1)) {
        case CqlParser.K_ASC:
            this.enterOuterAlt(localctx, 1);
            this.state = 2538;
            this.kwAsc();
            break;
        case CqlParser.K_DESC:
            this.enterOuterAlt(localctx, 2);
            this.state = 2539;
            this.kwDesc();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_role;
    return this;
}

RoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleContext.prototype.constructor = RoleContext;

RoleContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

RoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterRole(this);
	}
};

RoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitRole(this);
	}
};

RoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.RoleContext = RoleContext;

CqlParser.prototype.role = function() {

    var localctx = new RoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CqlParser.RULE_role);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2542;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_trigger;
    return this;
}

TriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerContext.prototype.constructor = TriggerContext;

TriggerContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

TriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTrigger(this);
	}
};

TriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTrigger(this);
	}
};

TriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TriggerContext = TriggerContext;

CqlParser.prototype.trigger = function() {

    var localctx = new TriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CqlParser.RULE_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2544;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_triggerClass;
    return this;
}

TriggerClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerClassContext.prototype.constructor = TriggerClassContext;

TriggerClassContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

TriggerClassContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterTriggerClass(this);
	}
};

TriggerClassContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitTriggerClass(this);
	}
};

TriggerClassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitTriggerClass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TriggerClassContext = TriggerClassContext;

CqlParser.prototype.triggerClass = function() {

    var localctx = new TriggerClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CqlParser.RULE_triggerClass);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2546;
        this.constantString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.TypeContext = TypeContext;

CqlParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CqlParser.RULE_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2548;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_aggregate;
    return this;
}

AggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateContext.prototype.constructor = AggregateContext;

AggregateContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

AggregateContext.prototype.DQUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.DQUOTE);
    } else {
        return this.getToken(CqlParser.DQUOTE, i);
    }
};


AggregateContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

AggregateContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

AggregateContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

AggregateContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

AggregateContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

AggregateContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

AggregateContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

AggregateContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

AggregateContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

AggregateContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

AggregateContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

AggregateContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

AggregateContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

AggregateContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

AggregateContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

AggregateContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

AggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterAggregate(this);
	}
};

AggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitAggregate(this);
	}
};

AggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.AggregateContext = AggregateContext;

CqlParser.prototype.aggregate = function() {

    var localctx = new AggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CqlParser.RULE_aggregate);
    try {
        this.state = 2571;
        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2550;
            this.match(CqlParser.OBJECT_NAME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2551;
            this.match(CqlParser.DQUOTE);
            this.state = 2552;
            this.match(CqlParser.OBJECT_NAME);
            this.state = 2553;
            this.match(CqlParser.DQUOTE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2554;
            this.match(CqlParser.K_ROLE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2555;
            this.match(CqlParser.K_PERMISSIONS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2556;
            this.match(CqlParser.K_OPTIONS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2557;
            this.match(CqlParser.K_DURABLE_WRITES);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2558;
            this.match(CqlParser.K_LANGUAGE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2559;
            this.match(CqlParser.K_TYPE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2560;
            this.match(CqlParser.K_INITCOND);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2561;
            this.match(CqlParser.K_REPLICATION);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2562;
            this.match(CqlParser.K_TTL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2563;
            this.match(CqlParser.K_PARTITION);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2564;
            this.match(CqlParser.K_KEY);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2565;
            this.match(CqlParser.K_LEVEL);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2566;
            this.match(CqlParser.K_USERS);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2567;
            this.match(CqlParser.K_USER);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2568;
            this.match(CqlParser.K_ROLE);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2569;
            this.match(CqlParser.K_ROLES);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2570;
            this.match(CqlParser.K_INPUT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_function;
    return this;
}

FunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionContext.prototype.constructor = FunctionContext;

FunctionContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

FunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterFunction(this);
	}
};

FunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitFunction(this);
	}
};

FunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.FunctionContext = FunctionContext;

CqlParser.prototype.function = function() {

    var localctx = new FunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CqlParser.RULE_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2573;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LanguageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_language;
    return this;
}

LanguageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LanguageContext.prototype.constructor = LanguageContext;

LanguageContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

LanguageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterLanguage(this);
	}
};

LanguageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitLanguage(this);
	}
};

LanguageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitLanguage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.LanguageContext = LanguageContext;

CqlParser.prototype.language = function() {

    var localctx = new LanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CqlParser.RULE_language);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2575;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_user;
    return this;
}

UserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserContext.prototype.constructor = UserContext;

UserContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

UserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterUser(this);
	}
};

UserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitUser(this);
	}
};

UserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.UserContext = UserContext;

CqlParser.prototype.user = function() {

    var localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CqlParser.RULE_user);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2577;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_password;
    return this;
}

PasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PasswordContext.prototype.constructor = PasswordContext;

PasswordContext.prototype.constantString = function() {
    return this.getTypedRuleContext(ConstantStringContext,0);
};

PasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterPassword(this);
	}
};

PasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitPassword(this);
	}
};

PasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.PasswordContext = PasswordContext;

CqlParser.prototype.password = function() {

    var localctx = new PasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CqlParser.RULE_password);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2579;
        this.constantString();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HashKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_hashKey;
    return this;
}

HashKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HashKeyContext.prototype.constructor = HashKeyContext;

HashKeyContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

HashKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterHashKey(this);
	}
};

HashKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitHashKey(this);
	}
};

HashKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitHashKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.HashKeyContext = HashKeyContext;

CqlParser.prototype.hashKey = function() {

    var localctx = new HashKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CqlParser.RULE_hashKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2581;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_param;
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.paramName = function() {
    return this.getTypedRuleContext(ParamNameContext,0);
};

ParamContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ParamContext = ParamContext;

CqlParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CqlParser.RULE_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2583;
        this.paramName();
        this.state = 2584;
        this.dataType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_paramName;
    return this;
}

ParamNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamNameContext.prototype.constructor = ParamNameContext;

ParamNameContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

ParamNameContext.prototype.K_ROLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CqlParser.K_ROLE);
    } else {
        return this.getToken(CqlParser.K_ROLE, i);
    }
};


ParamNameContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

ParamNameContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

ParamNameContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

ParamNameContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

ParamNameContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

ParamNameContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

ParamNameContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

ParamNameContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

ParamNameContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

ParamNameContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

ParamNameContext.prototype.K_LEVEL = function() {
    return this.getToken(CqlParser.K_LEVEL, 0);
};

ParamNameContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

ParamNameContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

ParamNameContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

ParamNameContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

ParamNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterParamName(this);
	}
};

ParamNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitParamName(this);
	}
};

ParamNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitParamName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.ParamNameContext = ParamNameContext;

CqlParser.prototype.paramName = function() {

    var localctx = new ParamNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CqlParser.RULE_paramName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2586;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CqlParser.K_DURABLE_WRITES - 53)) | (1 << (CqlParser.K_INITCOND - 53)) | (1 << (CqlParser.K_INPUT - 53)) | (1 << (CqlParser.K_KEY - 53)) | (1 << (CqlParser.K_LANGUAGE - 53)) | (1 << (CqlParser.K_LEVEL - 53)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CqlParser.K_OPTIONS - 94)) | (1 << (CqlParser.K_PARTITION - 94)) | (1 << (CqlParser.K_PERMISSIONS - 94)) | (1 << (CqlParser.K_REPLICATION - 94)) | (1 << (CqlParser.K_TTL - 94)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CqlParser.K_TYPE - 127)) | (1 << (CqlParser.K_ROLES - 127)) | (1 << (CqlParser.K_ROLE - 127)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CqlParser.K_USERS - 162)) | (1 << (CqlParser.K_USER - 162)) | (1 << (CqlParser.OBJECT_NAME - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAdd;
    return this;
}

KwAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAddContext.prototype.constructor = KwAddContext;

KwAddContext.prototype.K_ADD = function() {
    return this.getToken(CqlParser.K_ADD, 0);
};

KwAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAdd(this);
	}
};

KwAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAdd(this);
	}
};

KwAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAddContext = KwAddContext;

CqlParser.prototype.kwAdd = function() {

    var localctx = new KwAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CqlParser.RULE_kwAdd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2588;
        this.match(CqlParser.K_ADD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAggregate;
    return this;
}

KwAggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAggregateContext.prototype.constructor = KwAggregateContext;

KwAggregateContext.prototype.K_AGGREGATE = function() {
    return this.getToken(CqlParser.K_AGGREGATE, 0);
};

KwAggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAggregate(this);
	}
};

KwAggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAggregate(this);
	}
};

KwAggregateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAggregate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAggregateContext = KwAggregateContext;

CqlParser.prototype.kwAggregate = function() {

    var localctx = new KwAggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CqlParser.RULE_kwAggregate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2590;
        this.match(CqlParser.K_AGGREGATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAll;
    return this;
}

KwAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllContext.prototype.constructor = KwAllContext;

KwAllContext.prototype.K_ALL = function() {
    return this.getToken(CqlParser.K_ALL, 0);
};

KwAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAll(this);
	}
};

KwAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAll(this);
	}
};

KwAllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAll(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllContext = KwAllContext;

CqlParser.prototype.kwAll = function() {

    var localctx = new KwAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CqlParser.RULE_kwAll);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2592;
        this.match(CqlParser.K_ALL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllFunctions;
    return this;
}

KwAllFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllFunctionsContext.prototype.constructor = KwAllFunctionsContext;

KwAllFunctionsContext.prototype.K_ALL_FUNCTIONS = function() {
    return this.getToken(CqlParser.K_ALL_FUNCTIONS, 0);
};

KwAllFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllFunctions(this);
	}
};

KwAllFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllFunctions(this);
	}
};

KwAllFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllFunctionsContext = KwAllFunctionsContext;

CqlParser.prototype.kwAllFunctions = function() {

    var localctx = new KwAllFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CqlParser.RULE_kwAllFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2594;
        this.match(CqlParser.K_ALL_FUNCTIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllKeyspacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllKeyspaces;
    return this;
}

KwAllKeyspacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllKeyspacesContext.prototype.constructor = KwAllKeyspacesContext;

KwAllKeyspacesContext.prototype.K_ALL_KEYSPACES = function() {
    return this.getToken(CqlParser.K_ALL_KEYSPACES, 0);
};

KwAllKeyspacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllKeyspaces(this);
	}
};

KwAllKeyspacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllKeyspaces(this);
	}
};

KwAllKeyspacesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllKeyspaces(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllKeyspacesContext = KwAllKeyspacesContext;

CqlParser.prototype.kwAllKeyspaces = function() {

    var localctx = new KwAllKeyspacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CqlParser.RULE_kwAllKeyspaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2596;
        this.match(CqlParser.K_ALL_KEYSPACES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllRoles;
    return this;
}

KwAllRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllRolesContext.prototype.constructor = KwAllRolesContext;

KwAllRolesContext.prototype.K_ALL_ROLES = function() {
    return this.getToken(CqlParser.K_ALL_ROLES, 0);
};

KwAllRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllRoles(this);
	}
};

KwAllRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllRoles(this);
	}
};

KwAllRolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllRoles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllRolesContext = KwAllRolesContext;

CqlParser.prototype.kwAllRoles = function() {

    var localctx = new KwAllRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CqlParser.RULE_kwAllRoles);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2598;
        this.match(CqlParser.K_ALL_ROLES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllPermissionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllPermissions;
    return this;
}

KwAllPermissionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllPermissionsContext.prototype.constructor = KwAllPermissionsContext;

KwAllPermissionsContext.prototype.K_ALL = function() {
    return this.getToken(CqlParser.K_ALL, 0);
};

KwAllPermissionsContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

KwAllPermissionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllPermissions(this);
	}
};

KwAllPermissionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllPermissions(this);
	}
};

KwAllPermissionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllPermissions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllPermissionsContext = KwAllPermissionsContext;

CqlParser.prototype.kwAllPermissions = function() {

    var localctx = new KwAllPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CqlParser.RULE_kwAllPermissions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2600;
        this.match(CqlParser.K_ALL);
        this.state = 2601;
        this.match(CqlParser.K_PERMISSIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllow;
    return this;
}

KwAllowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllowContext.prototype.constructor = KwAllowContext;

KwAllowContext.prototype.K_ALLOW = function() {
    return this.getToken(CqlParser.K_ALLOW, 0);
};

KwAllowContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllow(this);
	}
};

KwAllowContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllow(this);
	}
};

KwAllowContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllow(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllowContext = KwAllowContext;

CqlParser.prototype.kwAllow = function() {

    var localctx = new KwAllowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CqlParser.RULE_kwAllow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2603;
        this.match(CqlParser.K_ALLOW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAllowFilteringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAllowFiltering;
    return this;
}

KwAllowFilteringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAllowFilteringContext.prototype.constructor = KwAllowFilteringContext;

KwAllowFilteringContext.prototype.K_ALLOW = function() {
    return this.getToken(CqlParser.K_ALLOW, 0);
};

KwAllowFilteringContext.prototype.K_FILTERING = function() {
    return this.getToken(CqlParser.K_FILTERING, 0);
};

KwAllowFilteringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAllowFiltering(this);
	}
};

KwAllowFilteringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAllowFiltering(this);
	}
};

KwAllowFilteringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAllowFiltering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAllowFilteringContext = KwAllowFilteringContext;

CqlParser.prototype.kwAllowFiltering = function() {

    var localctx = new KwAllowFilteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CqlParser.RULE_kwAllowFiltering);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2605;
        this.match(CqlParser.K_ALLOW);
        this.state = 2606;
        this.match(CqlParser.K_FILTERING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAlterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAlter;
    return this;
}

KwAlterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAlterContext.prototype.constructor = KwAlterContext;

KwAlterContext.prototype.K_ALTER = function() {
    return this.getToken(CqlParser.K_ALTER, 0);
};

KwAlterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAlter(this);
	}
};

KwAlterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAlter(this);
	}
};

KwAlterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAlter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAlterContext = KwAlterContext;

CqlParser.prototype.kwAlter = function() {

    var localctx = new KwAlterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CqlParser.RULE_kwAlter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2608;
        this.match(CqlParser.K_ALTER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAnd;
    return this;
}

KwAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAndContext.prototype.constructor = KwAndContext;

KwAndContext.prototype.K_AND = function() {
    return this.getToken(CqlParser.K_AND, 0);
};

KwAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAnd(this);
	}
};

KwAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAnd(this);
	}
};

KwAndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAndContext = KwAndContext;

CqlParser.prototype.kwAnd = function() {

    var localctx = new KwAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CqlParser.RULE_kwAnd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2610;
        this.match(CqlParser.K_AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwApplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwApply;
    return this;
}

KwApplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwApplyContext.prototype.constructor = KwApplyContext;

KwApplyContext.prototype.K_APPLY = function() {
    return this.getToken(CqlParser.K_APPLY, 0);
};

KwApplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwApply(this);
	}
};

KwApplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwApply(this);
	}
};

KwApplyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwApply(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwApplyContext = KwApplyContext;

CqlParser.prototype.kwApply = function() {

    var localctx = new KwApplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CqlParser.RULE_kwApply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2612;
        this.match(CqlParser.K_APPLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAs;
    return this;
}

KwAsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAsContext.prototype.constructor = KwAsContext;

KwAsContext.prototype.K_AS = function() {
    return this.getToken(CqlParser.K_AS, 0);
};

KwAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAs(this);
	}
};

KwAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAs(this);
	}
};

KwAsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAsContext = KwAsContext;

CqlParser.prototype.kwAs = function() {

    var localctx = new KwAsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CqlParser.RULE_kwAs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2614;
        this.match(CqlParser.K_AS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAscContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAsc;
    return this;
}

KwAscContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAscContext.prototype.constructor = KwAscContext;

KwAscContext.prototype.K_ASC = function() {
    return this.getToken(CqlParser.K_ASC, 0);
};

KwAscContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAsc(this);
	}
};

KwAscContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAsc(this);
	}
};

KwAscContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAsc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAscContext = KwAscContext;

CqlParser.prototype.kwAsc = function() {

    var localctx = new KwAscContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CqlParser.RULE_kwAsc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2616;
        this.match(CqlParser.K_ASC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwAuthorizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwAuthorize;
    return this;
}

KwAuthorizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwAuthorizeContext.prototype.constructor = KwAuthorizeContext;

KwAuthorizeContext.prototype.K_AUTHORIZE = function() {
    return this.getToken(CqlParser.K_AUTHORIZE, 0);
};

KwAuthorizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwAuthorize(this);
	}
};

KwAuthorizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwAuthorize(this);
	}
};

KwAuthorizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwAuthorize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwAuthorizeContext = KwAuthorizeContext;

CqlParser.prototype.kwAuthorize = function() {

    var localctx = new KwAuthorizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CqlParser.RULE_kwAuthorize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2618;
        this.match(CqlParser.K_AUTHORIZE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwBatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBatch;
    return this;
}

KwBatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwBatchContext.prototype.constructor = KwBatchContext;

KwBatchContext.prototype.K_BATCH = function() {
    return this.getToken(CqlParser.K_BATCH, 0);
};

KwBatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwBatch(this);
	}
};

KwBatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwBatch(this);
	}
};

KwBatchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwBatch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwBatchContext = KwBatchContext;

CqlParser.prototype.kwBatch = function() {

    var localctx = new KwBatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CqlParser.RULE_kwBatch);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2620;
        this.match(CqlParser.K_BATCH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwBeginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBegin;
    return this;
}

KwBeginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwBeginContext.prototype.constructor = KwBeginContext;

KwBeginContext.prototype.K_BEGIN = function() {
    return this.getToken(CqlParser.K_BEGIN, 0);
};

KwBeginContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwBegin(this);
	}
};

KwBeginContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwBegin(this);
	}
};

KwBeginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwBegin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwBeginContext = KwBeginContext;

CqlParser.prototype.kwBegin = function() {

    var localctx = new KwBeginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CqlParser.RULE_kwBegin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2622;
        this.match(CqlParser.K_BEGIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwBy;
    return this;
}

KwByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwByContext.prototype.constructor = KwByContext;

KwByContext.prototype.K_BY = function() {
    return this.getToken(CqlParser.K_BY, 0);
};

KwByContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwBy(this);
	}
};

KwByContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwBy(this);
	}
};

KwByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwBy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwByContext = KwByContext;

CqlParser.prototype.kwBy = function() {

    var localctx = new KwByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CqlParser.RULE_kwBy);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2624;
        this.match(CqlParser.K_BY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwCalledContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCalled;
    return this;
}

KwCalledContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwCalledContext.prototype.constructor = KwCalledContext;

KwCalledContext.prototype.K_CALLED = function() {
    return this.getToken(CqlParser.K_CALLED, 0);
};

KwCalledContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwCalled(this);
	}
};

KwCalledContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwCalled(this);
	}
};

KwCalledContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwCalled(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwCalledContext = KwCalledContext;

CqlParser.prototype.kwCalled = function() {

    var localctx = new KwCalledContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CqlParser.RULE_kwCalled);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2626;
        this.match(CqlParser.K_CALLED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwClusteringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwClustering;
    return this;
}

KwClusteringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwClusteringContext.prototype.constructor = KwClusteringContext;

KwClusteringContext.prototype.K_CLUSTERING = function() {
    return this.getToken(CqlParser.K_CLUSTERING, 0);
};

KwClusteringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwClustering(this);
	}
};

KwClusteringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwClustering(this);
	}
};

KwClusteringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwClustering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwClusteringContext = KwClusteringContext;

CqlParser.prototype.kwClustering = function() {

    var localctx = new KwClusteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CqlParser.RULE_kwClustering);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2628;
        this.match(CqlParser.K_CLUSTERING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwCompactContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCompact;
    return this;
}

KwCompactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwCompactContext.prototype.constructor = KwCompactContext;

KwCompactContext.prototype.K_COMPACT = function() {
    return this.getToken(CqlParser.K_COMPACT, 0);
};

KwCompactContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwCompact(this);
	}
};

KwCompactContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwCompact(this);
	}
};

KwCompactContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwCompact(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwCompactContext = KwCompactContext;

CqlParser.prototype.kwCompact = function() {

    var localctx = new KwCompactContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CqlParser.RULE_kwCompact);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2630;
        this.match(CqlParser.K_COMPACT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwContainsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwContains;
    return this;
}

KwContainsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwContainsContext.prototype.constructor = KwContainsContext;

KwContainsContext.prototype.K_CONTAINS = function() {
    return this.getToken(CqlParser.K_CONTAINS, 0);
};

KwContainsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwContains(this);
	}
};

KwContainsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwContains(this);
	}
};

KwContainsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwContains(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwContainsContext = KwContainsContext;

CqlParser.prototype.kwContains = function() {

    var localctx = new KwContainsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CqlParser.RULE_kwContains);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2632;
        this.match(CqlParser.K_CONTAINS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwContainsKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwContainsKey;
    return this;
}

KwContainsKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwContainsKeyContext.prototype.constructor = KwContainsKeyContext;

KwContainsKeyContext.prototype.K_CONTAINS = function() {
    return this.getToken(CqlParser.K_CONTAINS, 0);
};

KwContainsKeyContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

KwContainsKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwContainsKey(this);
	}
};

KwContainsKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwContainsKey(this);
	}
};

KwContainsKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwContainsKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwContainsKeyContext = KwContainsKeyContext;

CqlParser.prototype.kwContainsKey = function() {

    var localctx = new KwContainsKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CqlParser.RULE_kwContainsKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2634;
        this.match(CqlParser.K_CONTAINS);
        this.state = 2635;
        this.match(CqlParser.K_KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwCreateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwCreate;
    return this;
}

KwCreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwCreateContext.prototype.constructor = KwCreateContext;

KwCreateContext.prototype.K_CREATE = function() {
    return this.getToken(CqlParser.K_CREATE, 0);
};

KwCreateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwCreate(this);
	}
};

KwCreateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwCreate(this);
	}
};

KwCreateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwCreate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwCreateContext = KwCreateContext;

CqlParser.prototype.kwCreate = function() {

    var localctx = new KwCreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CqlParser.RULE_kwCreate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2637;
        this.match(CqlParser.K_CREATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwDeleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDelete;
    return this;
}

KwDeleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDeleteContext.prototype.constructor = KwDeleteContext;

KwDeleteContext.prototype.K_DELETE = function() {
    return this.getToken(CqlParser.K_DELETE, 0);
};

KwDeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDelete(this);
	}
};

KwDeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDelete(this);
	}
};

KwDeleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDelete(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDeleteContext = KwDeleteContext;

CqlParser.prototype.kwDelete = function() {

    var localctx = new KwDeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CqlParser.RULE_kwDelete);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2639;
        this.match(CqlParser.K_DELETE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwDescContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDesc;
    return this;
}

KwDescContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDescContext.prototype.constructor = KwDescContext;

KwDescContext.prototype.K_DESC = function() {
    return this.getToken(CqlParser.K_DESC, 0);
};

KwDescContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDesc(this);
	}
};

KwDescContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDesc(this);
	}
};

KwDescContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDesc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDescContext = KwDescContext;

CqlParser.prototype.kwDesc = function() {

    var localctx = new KwDescContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CqlParser.RULE_kwDesc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2641;
        this.match(CqlParser.K_DESC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwDescibeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDescibe;
    return this;
}

KwDescibeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDescibeContext.prototype.constructor = KwDescibeContext;

KwDescibeContext.prototype.K_DESCRIBE = function() {
    return this.getToken(CqlParser.K_DESCRIBE, 0);
};

KwDescibeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDescibe(this);
	}
};

KwDescibeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDescibe(this);
	}
};

KwDescibeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDescibe(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDescibeContext = KwDescibeContext;

CqlParser.prototype.kwDescibe = function() {

    var localctx = new KwDescibeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CqlParser.RULE_kwDescibe);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2643;
        this.match(CqlParser.K_DESCRIBE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwDistinctContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDistinct;
    return this;
}

KwDistinctContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDistinctContext.prototype.constructor = KwDistinctContext;

KwDistinctContext.prototype.K_DISTINCT = function() {
    return this.getToken(CqlParser.K_DISTINCT, 0);
};

KwDistinctContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDistinct(this);
	}
};

KwDistinctContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDistinct(this);
	}
};

KwDistinctContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDistinct(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDistinctContext = KwDistinctContext;

CqlParser.prototype.kwDistinct = function() {

    var localctx = new KwDistinctContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CqlParser.RULE_kwDistinct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2645;
        this.match(CqlParser.K_DISTINCT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwDropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDrop;
    return this;
}

KwDropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDropContext.prototype.constructor = KwDropContext;

KwDropContext.prototype.K_DROP = function() {
    return this.getToken(CqlParser.K_DROP, 0);
};

KwDropContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDrop(this);
	}
};

KwDropContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDrop(this);
	}
};

KwDropContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDrop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDropContext = KwDropContext;

CqlParser.prototype.kwDrop = function() {

    var localctx = new KwDropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CqlParser.RULE_kwDrop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2647;
        this.match(CqlParser.K_DROP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwDurableWritesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwDurableWrites;
    return this;
}

KwDurableWritesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwDurableWritesContext.prototype.constructor = KwDurableWritesContext;

KwDurableWritesContext.prototype.K_DURABLE_WRITES = function() {
    return this.getToken(CqlParser.K_DURABLE_WRITES, 0);
};

KwDurableWritesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwDurableWrites(this);
	}
};

KwDurableWritesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwDurableWrites(this);
	}
};

KwDurableWritesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwDurableWrites(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwDurableWritesContext = KwDurableWritesContext;

CqlParser.prototype.kwDurableWrites = function() {

    var localctx = new KwDurableWritesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CqlParser.RULE_kwDurableWrites);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2649;
        this.match(CqlParser.K_DURABLE_WRITES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwEntriesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwEntries;
    return this;
}

KwEntriesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwEntriesContext.prototype.constructor = KwEntriesContext;

KwEntriesContext.prototype.K_ENTRIES = function() {
    return this.getToken(CqlParser.K_ENTRIES, 0);
};

KwEntriesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwEntries(this);
	}
};

KwEntriesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwEntries(this);
	}
};

KwEntriesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwEntries(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwEntriesContext = KwEntriesContext;

CqlParser.prototype.kwEntries = function() {

    var localctx = new KwEntriesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, CqlParser.RULE_kwEntries);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2651;
        this.match(CqlParser.K_ENTRIES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwExecuteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExecute;
    return this;
}

KwExecuteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwExecuteContext.prototype.constructor = KwExecuteContext;

KwExecuteContext.prototype.K_EXECUTE = function() {
    return this.getToken(CqlParser.K_EXECUTE, 0);
};

KwExecuteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwExecute(this);
	}
};

KwExecuteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwExecute(this);
	}
};

KwExecuteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwExecute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwExecuteContext = KwExecuteContext;

CqlParser.prototype.kwExecute = function() {

    var localctx = new KwExecuteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, CqlParser.RULE_kwExecute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2653;
        this.match(CqlParser.K_EXECUTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwExists;
    return this;
}

KwExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwExistsContext.prototype.constructor = KwExistsContext;

KwExistsContext.prototype.K_EXISTS = function() {
    return this.getToken(CqlParser.K_EXISTS, 0);
};

KwExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwExists(this);
	}
};

KwExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwExists(this);
	}
};

KwExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwExistsContext = KwExistsContext;

CqlParser.prototype.kwExists = function() {

    var localctx = new KwExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, CqlParser.RULE_kwExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2655;
        this.match(CqlParser.K_EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwFilteringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFiltering;
    return this;
}

KwFilteringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFilteringContext.prototype.constructor = KwFilteringContext;

KwFilteringContext.prototype.K_FILTERING = function() {
    return this.getToken(CqlParser.K_FILTERING, 0);
};

KwFilteringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFiltering(this);
	}
};

KwFilteringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFiltering(this);
	}
};

KwFilteringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFiltering(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFilteringContext = KwFilteringContext;

CqlParser.prototype.kwFiltering = function() {

    var localctx = new KwFilteringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, CqlParser.RULE_kwFiltering);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2657;
        this.match(CqlParser.K_FILTERING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwFinalfuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFinalfunc;
    return this;
}

KwFinalfuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFinalfuncContext.prototype.constructor = KwFinalfuncContext;

KwFinalfuncContext.prototype.K_FINALFUNC = function() {
    return this.getToken(CqlParser.K_FINALFUNC, 0);
};

KwFinalfuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFinalfunc(this);
	}
};

KwFinalfuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFinalfunc(this);
	}
};

KwFinalfuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFinalfunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFinalfuncContext = KwFinalfuncContext;

CqlParser.prototype.kwFinalfunc = function() {

    var localctx = new KwFinalfuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, CqlParser.RULE_kwFinalfunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2659;
        this.match(CqlParser.K_FINALFUNC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwFromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFrom;
    return this;
}

KwFromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFromContext.prototype.constructor = KwFromContext;

KwFromContext.prototype.K_FROM = function() {
    return this.getToken(CqlParser.K_FROM, 0);
};

KwFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFrom(this);
	}
};

KwFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFrom(this);
	}
};

KwFromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFrom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFromContext = KwFromContext;

CqlParser.prototype.kwFrom = function() {

    var localctx = new KwFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, CqlParser.RULE_kwFrom);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2661;
        this.match(CqlParser.K_FROM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwFullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFull;
    return this;
}

KwFullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFullContext.prototype.constructor = KwFullContext;

KwFullContext.prototype.K_FULL = function() {
    return this.getToken(CqlParser.K_FULL, 0);
};

KwFullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFull(this);
	}
};

KwFullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFull(this);
	}
};

KwFullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFullContext = KwFullContext;

CqlParser.prototype.kwFull = function() {

    var localctx = new KwFullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, CqlParser.RULE_kwFull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2663;
        this.match(CqlParser.K_FULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwFunction;
    return this;
}

KwFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwFunctionContext.prototype.constructor = KwFunctionContext;

KwFunctionContext.prototype.K_FUNCTION = function() {
    return this.getToken(CqlParser.K_FUNCTION, 0);
};

KwFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwFunction(this);
	}
};

KwFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwFunction(this);
	}
};

KwFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwFunctionContext = KwFunctionContext;

CqlParser.prototype.kwFunction = function() {

    var localctx = new KwFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, CqlParser.RULE_kwFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2665;
        this.match(CqlParser.K_FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwGrantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwGrant;
    return this;
}

KwGrantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwGrantContext.prototype.constructor = KwGrantContext;

KwGrantContext.prototype.K_GRANT = function() {
    return this.getToken(CqlParser.K_GRANT, 0);
};

KwGrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwGrant(this);
	}
};

KwGrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwGrant(this);
	}
};

KwGrantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwGrant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwGrantContext = KwGrantContext;

CqlParser.prototype.kwGrant = function() {

    var localctx = new KwGrantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, CqlParser.RULE_kwGrant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667;
        this.match(CqlParser.K_GRANT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIf;
    return this;
}

KwIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIfContext.prototype.constructor = KwIfContext;

KwIfContext.prototype.K_IF = function() {
    return this.getToken(CqlParser.K_IF, 0);
};

KwIfContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIf(this);
	}
};

KwIfContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIf(this);
	}
};

KwIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIfContext = KwIfContext;

CqlParser.prototype.kwIf = function() {

    var localctx = new KwIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, CqlParser.RULE_kwIf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2669;
        this.match(CqlParser.K_IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwInContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIn;
    return this;
}

KwInContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInContext.prototype.constructor = KwInContext;

KwInContext.prototype.K_IN = function() {
    return this.getToken(CqlParser.K_IN, 0);
};

KwInContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIn(this);
	}
};

KwInContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIn(this);
	}
};

KwInContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInContext = KwInContext;

CqlParser.prototype.kwIn = function() {

    var localctx = new KwInContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, CqlParser.RULE_kwIn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2671;
        this.match(CqlParser.K_IN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIndex;
    return this;
}

KwIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIndexContext.prototype.constructor = KwIndexContext;

KwIndexContext.prototype.K_INDEX = function() {
    return this.getToken(CqlParser.K_INDEX, 0);
};

KwIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIndex(this);
	}
};

KwIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIndex(this);
	}
};

KwIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIndexContext = KwIndexContext;

CqlParser.prototype.kwIndex = function() {

    var localctx = new KwIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, CqlParser.RULE_kwIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2673;
        this.match(CqlParser.K_INDEX);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwInitcondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInitcond;
    return this;
}

KwInitcondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInitcondContext.prototype.constructor = KwInitcondContext;

KwInitcondContext.prototype.K_INITCOND = function() {
    return this.getToken(CqlParser.K_INITCOND, 0);
};

KwInitcondContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInitcond(this);
	}
};

KwInitcondContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInitcond(this);
	}
};

KwInitcondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInitcond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInitcondContext = KwInitcondContext;

CqlParser.prototype.kwInitcond = function() {

    var localctx = new KwInitcondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, CqlParser.RULE_kwInitcond);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2675;
        this.match(CqlParser.K_INITCOND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwInputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInput;
    return this;
}

KwInputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInputContext.prototype.constructor = KwInputContext;

KwInputContext.prototype.K_INPUT = function() {
    return this.getToken(CqlParser.K_INPUT, 0);
};

KwInputContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInput(this);
	}
};

KwInputContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInput(this);
	}
};

KwInputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInput(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInputContext = KwInputContext;

CqlParser.prototype.kwInput = function() {

    var localctx = new KwInputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, CqlParser.RULE_kwInput);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2677;
        this.match(CqlParser.K_INPUT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwInsertIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwInsertInto;
    return this;
}

KwInsertIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwInsertIntoContext.prototype.constructor = KwInsertIntoContext;

KwInsertIntoContext.prototype.K_INSERT = function() {
    return this.getToken(CqlParser.K_INSERT, 0);
};

KwInsertIntoContext.prototype.K_INTO = function() {
    return this.getToken(CqlParser.K_INTO, 0);
};

KwInsertIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwInsertInto(this);
	}
};

KwInsertIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwInsertInto(this);
	}
};

KwInsertIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwInsertInto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwInsertIntoContext = KwInsertIntoContext;

CqlParser.prototype.kwInsertInto = function() {

    var localctx = new KwInsertIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, CqlParser.RULE_kwInsertInto);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2679;
        this.match(CqlParser.K_INSERT);
        this.state = 2680;
        this.match(CqlParser.K_INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwIsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwIs;
    return this;
}

KwIsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwIsContext.prototype.constructor = KwIsContext;

KwIsContext.prototype.K_IS = function() {
    return this.getToken(CqlParser.K_IS, 0);
};

KwIsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwIs(this);
	}
};

KwIsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwIs(this);
	}
};

KwIsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwIs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwIsContext = KwIsContext;

CqlParser.prototype.kwIs = function() {

    var localctx = new KwIsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, CqlParser.RULE_kwIs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2682;
        this.match(CqlParser.K_IS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKey;
    return this;
}

KwKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeyContext.prototype.constructor = KwKeyContext;

KwKeyContext.prototype.K_KEY = function() {
    return this.getToken(CqlParser.K_KEY, 0);
};

KwKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKey(this);
	}
};

KwKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKey(this);
	}
};

KwKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeyContext = KwKeyContext;

CqlParser.prototype.kwKey = function() {

    var localctx = new KwKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, CqlParser.RULE_kwKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2684;
        this.match(CqlParser.K_KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwKeysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeys;
    return this;
}

KwKeysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeysContext.prototype.constructor = KwKeysContext;

KwKeysContext.prototype.K_KEYS = function() {
    return this.getToken(CqlParser.K_KEYS, 0);
};

KwKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKeys(this);
	}
};

KwKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKeys(this);
	}
};

KwKeysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKeys(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeysContext = KwKeysContext;

CqlParser.prototype.kwKeys = function() {

    var localctx = new KwKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, CqlParser.RULE_kwKeys);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2686;
        this.match(CqlParser.K_KEYS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwKeyspaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwKeyspace;
    return this;
}

KwKeyspaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwKeyspaceContext.prototype.constructor = KwKeyspaceContext;

KwKeyspaceContext.prototype.K_KEYSPACE = function() {
    return this.getToken(CqlParser.K_KEYSPACE, 0);
};

KwKeyspaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwKeyspace(this);
	}
};

KwKeyspaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwKeyspace(this);
	}
};

KwKeyspaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwKeyspace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwKeyspaceContext = KwKeyspaceContext;

CqlParser.prototype.kwKeyspace = function() {

    var localctx = new KwKeyspaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, CqlParser.RULE_kwKeyspace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2688;
        this.match(CqlParser.K_KEYSPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwLanguageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLanguage;
    return this;
}

KwLanguageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLanguageContext.prototype.constructor = KwLanguageContext;

KwLanguageContext.prototype.K_LANGUAGE = function() {
    return this.getToken(CqlParser.K_LANGUAGE, 0);
};

KwLanguageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLanguage(this);
	}
};

KwLanguageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLanguage(this);
	}
};

KwLanguageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLanguage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLanguageContext = KwLanguageContext;

CqlParser.prototype.kwLanguage = function() {

    var localctx = new KwLanguageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, CqlParser.RULE_kwLanguage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2690;
        this.match(CqlParser.K_LANGUAGE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwLimitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLimit;
    return this;
}

KwLimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLimitContext.prototype.constructor = KwLimitContext;

KwLimitContext.prototype.K_LIMIT = function() {
    return this.getToken(CqlParser.K_LIMIT, 0);
};

KwLimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLimit(this);
	}
};

KwLimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLimit(this);
	}
};

KwLimitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLimit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLimitContext = KwLimitContext;

CqlParser.prototype.kwLimit = function() {

    var localctx = new KwLimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, CqlParser.RULE_kwLimit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2692;
        this.match(CqlParser.K_LIMIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwList;
    return this;
}

KwListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwListContext.prototype.constructor = KwListContext;

KwListContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

KwListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwList(this);
	}
};

KwListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwList(this);
	}
};

KwListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwListContext = KwListContext;

CqlParser.prototype.kwList = function() {

    var localctx = new KwListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, CqlParser.RULE_kwList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2694;
        this.match(CqlParser.K_LIST);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwListRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwListRoles;
    return this;
}

KwListRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwListRolesContext.prototype.constructor = KwListRolesContext;

KwListRolesContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

KwListRolesContext.prototype.K_ROLES = function() {
    return this.getToken(CqlParser.K_ROLES, 0);
};

KwListRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwListRoles(this);
	}
};

KwListRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwListRoles(this);
	}
};

KwListRolesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwListRoles(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwListRolesContext = KwListRolesContext;

CqlParser.prototype.kwListRoles = function() {

    var localctx = new KwListRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, CqlParser.RULE_kwListRoles);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2696;
        this.match(CqlParser.K_LIST);
        this.state = 2697;
        this.match(CqlParser.K_ROLES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwListUsersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwListUsers;
    return this;
}

KwListUsersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwListUsersContext.prototype.constructor = KwListUsersContext;

KwListUsersContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

KwListUsersContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

KwListUsersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwListUsers(this);
	}
};

KwListUsersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwListUsers(this);
	}
};

KwListUsersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwListUsers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwListUsersContext = KwListUsersContext;

CqlParser.prototype.kwListUsers = function() {

    var localctx = new KwListUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, CqlParser.RULE_kwListUsers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2699;
        this.match(CqlParser.K_LIST);
        this.state = 2700;
        this.match(CqlParser.K_USERS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwLoggedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLogged;
    return this;
}

KwLoggedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLoggedContext.prototype.constructor = KwLoggedContext;

KwLoggedContext.prototype.K_LOGGED = function() {
    return this.getToken(CqlParser.K_LOGGED, 0);
};

KwLoggedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLogged(this);
	}
};

KwLoggedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLogged(this);
	}
};

KwLoggedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLogged(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLoggedContext = KwLoggedContext;

CqlParser.prototype.kwLogged = function() {

    var localctx = new KwLoggedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, CqlParser.RULE_kwLogged);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2702;
        this.match(CqlParser.K_LOGGED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwLoginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwLogin;
    return this;
}

KwLoginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwLoginContext.prototype.constructor = KwLoginContext;

KwLoginContext.prototype.K_LOGIN = function() {
    return this.getToken(CqlParser.K_LOGIN, 0);
};

KwLoginContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwLogin(this);
	}
};

KwLoginContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwLogin(this);
	}
};

KwLoginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwLogin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwLoginContext = KwLoginContext;

CqlParser.prototype.kwLogin = function() {

    var localctx = new KwLoginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, CqlParser.RULE_kwLogin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2704;
        this.match(CqlParser.K_LOGIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwMaterializedViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwMaterializedView;
    return this;
}

KwMaterializedViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwMaterializedViewContext.prototype.constructor = KwMaterializedViewContext;

KwMaterializedViewContext.prototype.K_MATERIALIZED = function() {
    return this.getToken(CqlParser.K_MATERIALIZED, 0);
};

KwMaterializedViewContext.prototype.K_VIEW = function() {
    return this.getToken(CqlParser.K_VIEW, 0);
};

KwMaterializedViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwMaterializedView(this);
	}
};

KwMaterializedViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwMaterializedView(this);
	}
};

KwMaterializedViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwMaterializedView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwMaterializedViewContext = KwMaterializedViewContext;

CqlParser.prototype.kwMaterializedView = function() {

    var localctx = new KwMaterializedViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, CqlParser.RULE_kwMaterializedView);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2706;
        this.match(CqlParser.K_MATERIALIZED);
        this.state = 2707;
        this.match(CqlParser.K_VIEW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwModifyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwModify;
    return this;
}

KwModifyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwModifyContext.prototype.constructor = KwModifyContext;

KwModifyContext.prototype.K_MODIFY = function() {
    return this.getToken(CqlParser.K_MODIFY, 0);
};

KwModifyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwModify(this);
	}
};

KwModifyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwModify(this);
	}
};

KwModifyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwModify(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwModifyContext = KwModifyContext;

CqlParser.prototype.kwModify = function() {

    var localctx = new KwModifyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, CqlParser.RULE_kwModify);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2709;
        this.match(CqlParser.K_MODIFY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwNosuperuserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNosuperuser;
    return this;
}

KwNosuperuserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNosuperuserContext.prototype.constructor = KwNosuperuserContext;

KwNosuperuserContext.prototype.K_NOSUPERUSER = function() {
    return this.getToken(CqlParser.K_NOSUPERUSER, 0);
};

KwNosuperuserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNosuperuser(this);
	}
};

KwNosuperuserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNosuperuser(this);
	}
};

KwNosuperuserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNosuperuser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNosuperuserContext = KwNosuperuserContext;

CqlParser.prototype.kwNosuperuser = function() {

    var localctx = new KwNosuperuserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, CqlParser.RULE_kwNosuperuser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2711;
        this.match(CqlParser.K_NOSUPERUSER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwNorecursiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNorecursive;
    return this;
}

KwNorecursiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNorecursiveContext.prototype.constructor = KwNorecursiveContext;

KwNorecursiveContext.prototype.K_NORECURSIVE = function() {
    return this.getToken(CqlParser.K_NORECURSIVE, 0);
};

KwNorecursiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNorecursive(this);
	}
};

KwNorecursiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNorecursive(this);
	}
};

KwNorecursiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNorecursive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNorecursiveContext = KwNorecursiveContext;

CqlParser.prototype.kwNorecursive = function() {

    var localctx = new KwNorecursiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, CqlParser.RULE_kwNorecursive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2713;
        this.match(CqlParser.K_NORECURSIVE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwNotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNot;
    return this;
}

KwNotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNotContext.prototype.constructor = KwNotContext;

KwNotContext.prototype.K_NOT = function() {
    return this.getToken(CqlParser.K_NOT, 0);
};

KwNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNot(this);
	}
};

KwNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNot(this);
	}
};

KwNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNotContext = KwNotContext;

CqlParser.prototype.kwNot = function() {

    var localctx = new KwNotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, CqlParser.RULE_kwNot);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2715;
        this.match(CqlParser.K_NOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwNull;
    return this;
}

KwNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwNullContext.prototype.constructor = KwNullContext;

KwNullContext.prototype.K_NULL = function() {
    return this.getToken(CqlParser.K_NULL, 0);
};

KwNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwNull(this);
	}
};

KwNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwNull(this);
	}
};

KwNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwNullContext = KwNullContext;

CqlParser.prototype.kwNull = function() {

    var localctx = new KwNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, CqlParser.RULE_kwNull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2717;
        this.match(CqlParser.K_NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOf;
    return this;
}

KwOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOfContext.prototype.constructor = KwOfContext;

KwOfContext.prototype.K_OF = function() {
    return this.getToken(CqlParser.K_OF, 0);
};

KwOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOf(this);
	}
};

KwOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOf(this);
	}
};

KwOfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOfContext = KwOfContext;

CqlParser.prototype.kwOf = function() {

    var localctx = new KwOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, CqlParser.RULE_kwOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2719;
        this.match(CqlParser.K_OF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwOnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOn;
    return this;
}

KwOnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOnContext.prototype.constructor = KwOnContext;

KwOnContext.prototype.K_ON = function() {
    return this.getToken(CqlParser.K_ON, 0);
};

KwOnContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOn(this);
	}
};

KwOnContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOn(this);
	}
};

KwOnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOnContext = KwOnContext;

CqlParser.prototype.kwOn = function() {

    var localctx = new KwOnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, CqlParser.RULE_kwOn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2721;
        this.match(CqlParser.K_ON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOptions;
    return this;
}

KwOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOptionsContext.prototype.constructor = KwOptionsContext;

KwOptionsContext.prototype.K_OPTIONS = function() {
    return this.getToken(CqlParser.K_OPTIONS, 0);
};

KwOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOptions(this);
	}
};

KwOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOptions(this);
	}
};

KwOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOptionsContext = KwOptionsContext;

CqlParser.prototype.kwOptions = function() {

    var localctx = new KwOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, CqlParser.RULE_kwOptions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2723;
        this.match(CqlParser.K_OPTIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwOrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOr;
    return this;
}

KwOrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOrContext.prototype.constructor = KwOrContext;

KwOrContext.prototype.K_OR = function() {
    return this.getToken(CqlParser.K_OR, 0);
};

KwOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOr(this);
	}
};

KwOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOr(this);
	}
};

KwOrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOrContext = KwOrContext;

CqlParser.prototype.kwOr = function() {

    var localctx = new KwOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, CqlParser.RULE_kwOr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2725;
        this.match(CqlParser.K_OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwOrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOrder;
    return this;
}

KwOrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOrderContext.prototype.constructor = KwOrderContext;

KwOrderContext.prototype.K_ORDER = function() {
    return this.getToken(CqlParser.K_ORDER, 0);
};

KwOrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOrder(this);
	}
};

KwOrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOrder(this);
	}
};

KwOrderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOrder(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOrderContext = KwOrderContext;

CqlParser.prototype.kwOrder = function() {

    var localctx = new KwOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, CqlParser.RULE_kwOrder);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2727;
        this.match(CqlParser.K_ORDER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwOrderByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwOrderBy;
    return this;
}

KwOrderByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwOrderByContext.prototype.constructor = KwOrderByContext;

KwOrderByContext.prototype.K_ORDER = function() {
    return this.getToken(CqlParser.K_ORDER, 0);
};

KwOrderByContext.prototype.K_BY = function() {
    return this.getToken(CqlParser.K_BY, 0);
};

KwOrderByContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwOrderBy(this);
	}
};

KwOrderByContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwOrderBy(this);
	}
};

KwOrderByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwOrderBy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwOrderByContext = KwOrderByContext;

CqlParser.prototype.kwOrderBy = function() {

    var localctx = new KwOrderByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, CqlParser.RULE_kwOrderBy);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2729;
        this.match(CqlParser.K_ORDER);
        this.state = 2730;
        this.match(CqlParser.K_BY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwPartitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPartition;
    return this;
}

KwPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwPartitionContext.prototype.constructor = KwPartitionContext;

KwPartitionContext.prototype.K_PARTITION = function() {
    return this.getToken(CqlParser.K_PARTITION, 0);
};

KwPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwPartition(this);
	}
};

KwPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwPartition(this);
	}
};

KwPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwPartitionContext = KwPartitionContext;

CqlParser.prototype.kwPartition = function() {

    var localctx = new KwPartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, CqlParser.RULE_kwPartition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2732;
        this.match(CqlParser.K_PARTITION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPassword;
    return this;
}

KwPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwPasswordContext.prototype.constructor = KwPasswordContext;

KwPasswordContext.prototype.K_PASSWORD = function() {
    return this.getToken(CqlParser.K_PASSWORD, 0);
};

KwPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwPassword(this);
	}
};

KwPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwPassword(this);
	}
};

KwPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwPasswordContext = KwPasswordContext;

CqlParser.prototype.kwPassword = function() {

    var localctx = new KwPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, CqlParser.RULE_kwPassword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2734;
        this.match(CqlParser.K_PASSWORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwPermissionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPermissions;
    return this;
}

KwPermissionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwPermissionsContext.prototype.constructor = KwPermissionsContext;

KwPermissionsContext.prototype.K_PERMISSIONS = function() {
    return this.getToken(CqlParser.K_PERMISSIONS, 0);
};

KwPermissionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwPermissions(this);
	}
};

KwPermissionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwPermissions(this);
	}
};

KwPermissionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwPermissions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwPermissionsContext = KwPermissionsContext;

CqlParser.prototype.kwPermissions = function() {

    var localctx = new KwPermissionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, CqlParser.RULE_kwPermissions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2736;
        this.match(CqlParser.K_PERMISSIONS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwPrimary;
    return this;
}

KwPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwPrimaryContext.prototype.constructor = KwPrimaryContext;

KwPrimaryContext.prototype.K_PRIMARY = function() {
    return this.getToken(CqlParser.K_PRIMARY, 0);
};

KwPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwPrimary(this);
	}
};

KwPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwPrimary(this);
	}
};

KwPrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwPrimaryContext = KwPrimaryContext;

CqlParser.prototype.kwPrimary = function() {

    var localctx = new KwPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, CqlParser.RULE_kwPrimary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2738;
        this.match(CqlParser.K_PRIMARY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRename;
    return this;
}

KwRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRenameContext.prototype.constructor = KwRenameContext;

KwRenameContext.prototype.K_RENAME = function() {
    return this.getToken(CqlParser.K_RENAME, 0);
};

KwRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRename(this);
	}
};

KwRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRename(this);
	}
};

KwRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRenameContext = KwRenameContext;

CqlParser.prototype.kwRename = function() {

    var localctx = new KwRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, CqlParser.RULE_kwRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2740;
        this.match(CqlParser.K_RENAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwReplaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReplace;
    return this;
}

KwReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwReplaceContext.prototype.constructor = KwReplaceContext;

KwReplaceContext.prototype.K_REPLACE = function() {
    return this.getToken(CqlParser.K_REPLACE, 0);
};

KwReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwReplace(this);
	}
};

KwReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwReplace(this);
	}
};

KwReplaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwReplace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwReplaceContext = KwReplaceContext;

CqlParser.prototype.kwReplace = function() {

    var localctx = new KwReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, CqlParser.RULE_kwReplace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2742;
        this.match(CqlParser.K_REPLACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwReplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReplication;
    return this;
}

KwReplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwReplicationContext.prototype.constructor = KwReplicationContext;

KwReplicationContext.prototype.K_REPLICATION = function() {
    return this.getToken(CqlParser.K_REPLICATION, 0);
};

KwReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwReplication(this);
	}
};

KwReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwReplication(this);
	}
};

KwReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwReplicationContext = KwReplicationContext;

CqlParser.prototype.kwReplication = function() {

    var localctx = new KwReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, CqlParser.RULE_kwReplication);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2744;
        this.match(CqlParser.K_REPLICATION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwReturnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwReturns;
    return this;
}

KwReturnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwReturnsContext.prototype.constructor = KwReturnsContext;

KwReturnsContext.prototype.K_RETURNS = function() {
    return this.getToken(CqlParser.K_RETURNS, 0);
};

KwReturnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwReturns(this);
	}
};

KwReturnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwReturns(this);
	}
};

KwReturnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwReturns(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwReturnsContext = KwReturnsContext;

CqlParser.prototype.kwReturns = function() {

    var localctx = new KwReturnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, CqlParser.RULE_kwReturns);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2746;
        this.match(CqlParser.K_RETURNS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRole;
    return this;
}

KwRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRoleContext.prototype.constructor = KwRoleContext;

KwRoleContext.prototype.K_ROLE = function() {
    return this.getToken(CqlParser.K_ROLE, 0);
};

KwRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRole(this);
	}
};

KwRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRole(this);
	}
};

KwRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRoleContext = KwRoleContext;

CqlParser.prototype.kwRole = function() {

    var localctx = new KwRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, CqlParser.RULE_kwRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2748;
        this.match(CqlParser.K_ROLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSelect;
    return this;
}

KwSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSelectContext.prototype.constructor = KwSelectContext;

KwSelectContext.prototype.K_SELECT = function() {
    return this.getToken(CqlParser.K_SELECT, 0);
};

KwSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSelect(this);
	}
};

KwSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSelect(this);
	}
};

KwSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSelectContext = KwSelectContext;

CqlParser.prototype.kwSelect = function() {

    var localctx = new KwSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, CqlParser.RULE_kwSelect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2750;
        this.match(CqlParser.K_SELECT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSet;
    return this;
}

KwSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSetContext.prototype.constructor = KwSetContext;

KwSetContext.prototype.K_SET = function() {
    return this.getToken(CqlParser.K_SET, 0);
};

KwSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSet(this);
	}
};

KwSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSet(this);
	}
};

KwSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSetContext = KwSetContext;

CqlParser.prototype.kwSet = function() {

    var localctx = new KwSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, CqlParser.RULE_kwSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2752;
        this.match(CqlParser.K_SET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwSfuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSfunc;
    return this;
}

KwSfuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSfuncContext.prototype.constructor = KwSfuncContext;

KwSfuncContext.prototype.K_SFUNC = function() {
    return this.getToken(CqlParser.K_SFUNC, 0);
};

KwSfuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSfunc(this);
	}
};

KwSfuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSfunc(this);
	}
};

KwSfuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSfunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSfuncContext = KwSfuncContext;

CqlParser.prototype.kwSfunc = function() {

    var localctx = new KwSfuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, CqlParser.RULE_kwSfunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2754;
        this.match(CqlParser.K_SFUNC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwStaticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStatic;
    return this;
}

KwStaticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwStaticContext.prototype.constructor = KwStaticContext;

KwStaticContext.prototype.K_STATIC = function() {
    return this.getToken(CqlParser.K_STATIC, 0);
};

KwStaticContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwStatic(this);
	}
};

KwStaticContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwStatic(this);
	}
};

KwStaticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwStatic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwStaticContext = KwStaticContext;

CqlParser.prototype.kwStatic = function() {

    var localctx = new KwStaticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, CqlParser.RULE_kwStatic);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2756;
        this.match(CqlParser.K_STATIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwStorageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStorage;
    return this;
}

KwStorageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwStorageContext.prototype.constructor = KwStorageContext;

KwStorageContext.prototype.K_STORAGE = function() {
    return this.getToken(CqlParser.K_STORAGE, 0);
};

KwStorageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwStorage(this);
	}
};

KwStorageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwStorage(this);
	}
};

KwStorageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwStorage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwStorageContext = KwStorageContext;

CqlParser.prototype.kwStorage = function() {

    var localctx = new KwStorageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, CqlParser.RULE_kwStorage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2758;
        this.match(CqlParser.K_STORAGE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwStypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwStype;
    return this;
}

KwStypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwStypeContext.prototype.constructor = KwStypeContext;

KwStypeContext.prototype.K_STYPE = function() {
    return this.getToken(CqlParser.K_STYPE, 0);
};

KwStypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwStype(this);
	}
};

KwStypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwStype(this);
	}
};

KwStypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwStype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwStypeContext = KwStypeContext;

CqlParser.prototype.kwStype = function() {

    var localctx = new KwStypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, CqlParser.RULE_kwStype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2760;
        this.match(CqlParser.K_STYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwSuperuserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwSuperuser;
    return this;
}

KwSuperuserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwSuperuserContext.prototype.constructor = KwSuperuserContext;

KwSuperuserContext.prototype.K_SUPERUSER = function() {
    return this.getToken(CqlParser.K_SUPERUSER, 0);
};

KwSuperuserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwSuperuser(this);
	}
};

KwSuperuserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwSuperuser(this);
	}
};

KwSuperuserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwSuperuser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwSuperuserContext = KwSuperuserContext;

CqlParser.prototype.kwSuperuser = function() {

    var localctx = new KwSuperuserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, CqlParser.RULE_kwSuperuser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2762;
        this.match(CqlParser.K_SUPERUSER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTable;
    return this;
}

KwTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTableContext.prototype.constructor = KwTableContext;

KwTableContext.prototype.K_TABLE = function() {
    return this.getToken(CqlParser.K_TABLE, 0);
};

KwTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTable(this);
	}
};

KwTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTable(this);
	}
};

KwTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTableContext = KwTableContext;

CqlParser.prototype.kwTable = function() {

    var localctx = new KwTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, CqlParser.RULE_kwTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2764;
        this.match(CqlParser.K_TABLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTimestamp;
    return this;
}

KwTimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTimestampContext.prototype.constructor = KwTimestampContext;

KwTimestampContext.prototype.K_TIMESTAMP = function() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
};

KwTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTimestamp(this);
	}
};

KwTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTimestamp(this);
	}
};

KwTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTimestampContext = KwTimestampContext;

CqlParser.prototype.kwTimestamp = function() {

    var localctx = new KwTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, CqlParser.RULE_kwTimestamp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2766;
        this.match(CqlParser.K_TIMESTAMP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTo;
    return this;
}

KwToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwToContext.prototype.constructor = KwToContext;

KwToContext.prototype.K_TO = function() {
    return this.getToken(CqlParser.K_TO, 0);
};

KwToContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTo(this);
	}
};

KwToContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTo(this);
	}
};

KwToContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwToContext = KwToContext;

CqlParser.prototype.kwTo = function() {

    var localctx = new KwToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, CqlParser.RULE_kwTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2768;
        this.match(CqlParser.K_TO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwToken;
    return this;
}

KwTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTokenContext.prototype.constructor = KwTokenContext;

KwTokenContext.prototype.K_TOKEN = function() {
    return this.getToken(CqlParser.K_TOKEN, 0);
};

KwTokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwToken(this);
	}
};

KwTokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwToken(this);
	}
};

KwTokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwToken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTokenContext = KwTokenContext;

CqlParser.prototype.kwToken = function() {

    var localctx = new KwTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, CqlParser.RULE_kwToken);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2770;
        this.match(CqlParser.K_TOKEN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTrigger;
    return this;
}

KwTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTriggerContext.prototype.constructor = KwTriggerContext;

KwTriggerContext.prototype.K_TRIGGER = function() {
    return this.getToken(CqlParser.K_TRIGGER, 0);
};

KwTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTrigger(this);
	}
};

KwTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTrigger(this);
	}
};

KwTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTriggerContext = KwTriggerContext;

CqlParser.prototype.kwTrigger = function() {

    var localctx = new KwTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, CqlParser.RULE_kwTrigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2772;
        this.match(CqlParser.K_TRIGGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTruncateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTruncate;
    return this;
}

KwTruncateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTruncateContext.prototype.constructor = KwTruncateContext;

KwTruncateContext.prototype.K_TRUNCATE = function() {
    return this.getToken(CqlParser.K_TRUNCATE, 0);
};

KwTruncateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTruncate(this);
	}
};

KwTruncateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTruncate(this);
	}
};

KwTruncateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTruncate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTruncateContext = KwTruncateContext;

CqlParser.prototype.kwTruncate = function() {

    var localctx = new KwTruncateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, CqlParser.RULE_kwTruncate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2774;
        this.match(CqlParser.K_TRUNCATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTtlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwTtl;
    return this;
}

KwTtlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTtlContext.prototype.constructor = KwTtlContext;

KwTtlContext.prototype.K_TTL = function() {
    return this.getToken(CqlParser.K_TTL, 0);
};

KwTtlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwTtl(this);
	}
};

KwTtlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwTtl(this);
	}
};

KwTtlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwTtl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTtlContext = KwTtlContext;

CqlParser.prototype.kwTtl = function() {

    var localctx = new KwTtlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, CqlParser.RULE_kwTtl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2776;
        this.match(CqlParser.K_TTL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwType;
    return this;
}

KwTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwTypeContext.prototype.constructor = KwTypeContext;

KwTypeContext.prototype.K_TYPE = function() {
    return this.getToken(CqlParser.K_TYPE, 0);
};

KwTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwType(this);
	}
};

KwTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwType(this);
	}
};

KwTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwTypeContext = KwTypeContext;

CqlParser.prototype.kwType = function() {

    var localctx = new KwTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, CqlParser.RULE_kwType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2778;
        this.match(CqlParser.K_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwUnloggedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUnlogged;
    return this;
}

KwUnloggedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUnloggedContext.prototype.constructor = KwUnloggedContext;

KwUnloggedContext.prototype.K_UNLOGGED = function() {
    return this.getToken(CqlParser.K_UNLOGGED, 0);
};

KwUnloggedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUnlogged(this);
	}
};

KwUnloggedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUnlogged(this);
	}
};

KwUnloggedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUnlogged(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUnloggedContext = KwUnloggedContext;

CqlParser.prototype.kwUnlogged = function() {

    var localctx = new KwUnloggedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, CqlParser.RULE_kwUnlogged);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2780;
        this.match(CqlParser.K_UNLOGGED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUpdate;
    return this;
}

KwUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUpdateContext.prototype.constructor = KwUpdateContext;

KwUpdateContext.prototype.K_UPDATE = function() {
    return this.getToken(CqlParser.K_UPDATE, 0);
};

KwUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUpdate(this);
	}
};

KwUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUpdate(this);
	}
};

KwUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUpdateContext = KwUpdateContext;

CqlParser.prototype.kwUpdate = function() {

    var localctx = new KwUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, CqlParser.RULE_kwUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2782;
        this.match(CqlParser.K_UPDATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwUseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUse;
    return this;
}

KwUseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUseContext.prototype.constructor = KwUseContext;

KwUseContext.prototype.K_USE = function() {
    return this.getToken(CqlParser.K_USE, 0);
};

KwUseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUse(this);
	}
};

KwUseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUse(this);
	}
};

KwUseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUseContext = KwUseContext;

CqlParser.prototype.kwUse = function() {

    var localctx = new KwUseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, CqlParser.RULE_kwUse);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2784;
        this.match(CqlParser.K_USE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUser;
    return this;
}

KwUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUserContext.prototype.constructor = KwUserContext;

KwUserContext.prototype.K_USER = function() {
    return this.getToken(CqlParser.K_USER, 0);
};

KwUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUser(this);
	}
};

KwUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUser(this);
	}
};

KwUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUserContext = KwUserContext;

CqlParser.prototype.kwUser = function() {

    var localctx = new KwUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, CqlParser.RULE_kwUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2786;
        this.match(CqlParser.K_USER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwUsersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUsers;
    return this;
}

KwUsersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUsersContext.prototype.constructor = KwUsersContext;

KwUsersContext.prototype.K_USERS = function() {
    return this.getToken(CqlParser.K_USERS, 0);
};

KwUsersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUsers(this);
	}
};

KwUsersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUsers(this);
	}
};

KwUsersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUsers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUsersContext = KwUsersContext;

CqlParser.prototype.kwUsers = function() {

    var localctx = new KwUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, CqlParser.RULE_kwUsers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2788;
        this.match(CqlParser.K_USERS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwUsingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwUsing;
    return this;
}

KwUsingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwUsingContext.prototype.constructor = KwUsingContext;

KwUsingContext.prototype.K_USING = function() {
    return this.getToken(CqlParser.K_USING, 0);
};

KwUsingContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwUsing(this);
	}
};

KwUsingContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwUsing(this);
	}
};

KwUsingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwUsing(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwUsingContext = KwUsingContext;

CqlParser.prototype.kwUsing = function() {

    var localctx = new KwUsingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, CqlParser.RULE_kwUsing);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2790;
        this.match(CqlParser.K_USING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwValues;
    return this;
}

KwValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwValuesContext.prototype.constructor = KwValuesContext;

KwValuesContext.prototype.K_VALUES = function() {
    return this.getToken(CqlParser.K_VALUES, 0);
};

KwValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwValues(this);
	}
};

KwValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwValues(this);
	}
};

KwValuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwValues(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwValuesContext = KwValuesContext;

CqlParser.prototype.kwValues = function() {

    var localctx = new KwValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, CqlParser.RULE_kwValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2792;
        this.match(CqlParser.K_VALUES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwWhere;
    return this;
}

KwWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwWhereContext.prototype.constructor = KwWhereContext;

KwWhereContext.prototype.K_WHERE = function() {
    return this.getToken(CqlParser.K_WHERE, 0);
};

KwWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwWhere(this);
	}
};

KwWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwWhere(this);
	}
};

KwWhereContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwWhere(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwWhereContext = KwWhereContext;

CqlParser.prototype.kwWhere = function() {

    var localctx = new KwWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, CqlParser.RULE_kwWhere);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2794;
        this.match(CqlParser.K_WHERE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwWith;
    return this;
}

KwWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwWithContext.prototype.constructor = KwWithContext;

KwWithContext.prototype.K_WITH = function() {
    return this.getToken(CqlParser.K_WITH, 0);
};

KwWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwWith(this);
	}
};

KwWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwWith(this);
	}
};

KwWithContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwWith(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwWithContext = KwWithContext;

CqlParser.prototype.kwWith = function() {

    var localctx = new KwWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, CqlParser.RULE_kwWith);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2796;
        this.match(CqlParser.K_WITH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KwRevokeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_kwRevoke;
    return this;
}

KwRevokeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwRevokeContext.prototype.constructor = KwRevokeContext;

KwRevokeContext.prototype.K_REVOKE = function() {
    return this.getToken(CqlParser.K_REVOKE, 0);
};

KwRevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterKwRevoke(this);
	}
};

KwRevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitKwRevoke(this);
	}
};

KwRevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitKwRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.KwRevokeContext = KwRevokeContext;

CqlParser.prototype.kwRevoke = function() {

    var localctx = new KwRevokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, CqlParser.RULE_kwRevoke);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2798;
        this.match(CqlParser.K_REVOKE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeAsciiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeAscii;
    return this;
}

DataTypeAsciiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeAsciiContext.prototype.constructor = DataTypeAsciiContext;

DataTypeAsciiContext.prototype.K_ASCII = function() {
    return this.getToken(CqlParser.K_ASCII, 0);
};

DataTypeAsciiContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeAscii(this);
	}
};

DataTypeAsciiContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeAscii(this);
	}
};

DataTypeAsciiContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeAscii(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeAsciiContext = DataTypeAsciiContext;

CqlParser.prototype.dataTypeAscii = function() {

    var localctx = new DataTypeAsciiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, CqlParser.RULE_dataTypeAscii);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2800;
        this.match(CqlParser.K_ASCII);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeBigintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeBigint;
    return this;
}

DataTypeBigintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeBigintContext.prototype.constructor = DataTypeBigintContext;

DataTypeBigintContext.prototype.K_BIGINT = function() {
    return this.getToken(CqlParser.K_BIGINT, 0);
};

DataTypeBigintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeBigint(this);
	}
};

DataTypeBigintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeBigint(this);
	}
};

DataTypeBigintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeBigint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeBigintContext = DataTypeBigintContext;

CqlParser.prototype.dataTypeBigint = function() {

    var localctx = new DataTypeBigintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, CqlParser.RULE_dataTypeBigint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2802;
        this.match(CqlParser.K_BIGINT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeBlobContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeBlob;
    return this;
}

DataTypeBlobContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeBlobContext.prototype.constructor = DataTypeBlobContext;

DataTypeBlobContext.prototype.K_BLOB = function() {
    return this.getToken(CqlParser.K_BLOB, 0);
};

DataTypeBlobContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeBlob(this);
	}
};

DataTypeBlobContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeBlob(this);
	}
};

DataTypeBlobContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeBlob(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeBlobContext = DataTypeBlobContext;

CqlParser.prototype.dataTypeBlob = function() {

    var localctx = new DataTypeBlobContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, CqlParser.RULE_dataTypeBlob);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2804;
        this.match(CqlParser.K_BLOB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeBooleanContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeBoolean;
    return this;
}

DataTypeBooleanContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeBooleanContext.prototype.constructor = DataTypeBooleanContext;

DataTypeBooleanContext.prototype.K_BOOLEAN = function() {
    return this.getToken(CqlParser.K_BOOLEAN, 0);
};

DataTypeBooleanContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeBoolean(this);
	}
};

DataTypeBooleanContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeBoolean(this);
	}
};

DataTypeBooleanContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeBoolean(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeBooleanContext = DataTypeBooleanContext;

CqlParser.prototype.dataTypeBoolean = function() {

    var localctx = new DataTypeBooleanContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, CqlParser.RULE_dataTypeBoolean);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2806;
        this.match(CqlParser.K_BOOLEAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeCounterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeCounter;
    return this;
}

DataTypeCounterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeCounterContext.prototype.constructor = DataTypeCounterContext;

DataTypeCounterContext.prototype.K_COUNTER = function() {
    return this.getToken(CqlParser.K_COUNTER, 0);
};

DataTypeCounterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeCounter(this);
	}
};

DataTypeCounterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeCounter(this);
	}
};

DataTypeCounterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeCounter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeCounterContext = DataTypeCounterContext;

CqlParser.prototype.dataTypeCounter = function() {

    var localctx = new DataTypeCounterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, CqlParser.RULE_dataTypeCounter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2808;
        this.match(CqlParser.K_COUNTER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeDateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeDate;
    return this;
}

DataTypeDateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeDateContext.prototype.constructor = DataTypeDateContext;

DataTypeDateContext.prototype.K_DATE = function() {
    return this.getToken(CqlParser.K_DATE, 0);
};

DataTypeDateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeDate(this);
	}
};

DataTypeDateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeDate(this);
	}
};

DataTypeDateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeDate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeDateContext = DataTypeDateContext;

CqlParser.prototype.dataTypeDate = function() {

    var localctx = new DataTypeDateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, CqlParser.RULE_dataTypeDate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2810;
        this.match(CqlParser.K_DATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeDecimalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeDecimal;
    return this;
}

DataTypeDecimalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeDecimalContext.prototype.constructor = DataTypeDecimalContext;

DataTypeDecimalContext.prototype.K_DECIMAL = function() {
    return this.getToken(CqlParser.K_DECIMAL, 0);
};

DataTypeDecimalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeDecimal(this);
	}
};

DataTypeDecimalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeDecimal(this);
	}
};

DataTypeDecimalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeDecimal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeDecimalContext = DataTypeDecimalContext;

CqlParser.prototype.dataTypeDecimal = function() {

    var localctx = new DataTypeDecimalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, CqlParser.RULE_dataTypeDecimal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2812;
        this.match(CqlParser.K_DECIMAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeDoubleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeDouble;
    return this;
}

DataTypeDoubleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeDoubleContext.prototype.constructor = DataTypeDoubleContext;

DataTypeDoubleContext.prototype.K_DOUBLE = function() {
    return this.getToken(CqlParser.K_DOUBLE, 0);
};

DataTypeDoubleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeDouble(this);
	}
};

DataTypeDoubleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeDouble(this);
	}
};

DataTypeDoubleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeDouble(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeDoubleContext = DataTypeDoubleContext;

CqlParser.prototype.dataTypeDouble = function() {

    var localctx = new DataTypeDoubleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, CqlParser.RULE_dataTypeDouble);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2814;
        this.match(CqlParser.K_DOUBLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeFloatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeFloat;
    return this;
}

DataTypeFloatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeFloatContext.prototype.constructor = DataTypeFloatContext;

DataTypeFloatContext.prototype.K_FLOAT = function() {
    return this.getToken(CqlParser.K_FLOAT, 0);
};

DataTypeFloatContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeFloat(this);
	}
};

DataTypeFloatContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeFloat(this);
	}
};

DataTypeFloatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeFloat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeFloatContext = DataTypeFloatContext;

CqlParser.prototype.dataTypeFloat = function() {

    var localctx = new DataTypeFloatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, CqlParser.RULE_dataTypeFloat);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2816;
        this.match(CqlParser.K_FLOAT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeFrozenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeFrozen;
    return this;
}

DataTypeFrozenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeFrozenContext.prototype.constructor = DataTypeFrozenContext;

DataTypeFrozenContext.prototype.K_FROZEN = function() {
    return this.getToken(CqlParser.K_FROZEN, 0);
};

DataTypeFrozenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeFrozen(this);
	}
};

DataTypeFrozenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeFrozen(this);
	}
};

DataTypeFrozenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeFrozen(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeFrozenContext = DataTypeFrozenContext;

CqlParser.prototype.dataTypeFrozen = function() {

    var localctx = new DataTypeFrozenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, CqlParser.RULE_dataTypeFrozen);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2818;
        this.match(CqlParser.K_FROZEN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeInetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeInet;
    return this;
}

DataTypeInetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeInetContext.prototype.constructor = DataTypeInetContext;

DataTypeInetContext.prototype.K_INET = function() {
    return this.getToken(CqlParser.K_INET, 0);
};

DataTypeInetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeInet(this);
	}
};

DataTypeInetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeInet(this);
	}
};

DataTypeInetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeInet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeInetContext = DataTypeInetContext;

CqlParser.prototype.dataTypeInet = function() {

    var localctx = new DataTypeInetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, CqlParser.RULE_dataTypeInet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2820;
        this.match(CqlParser.K_INET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeIntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeInt;
    return this;
}

DataTypeIntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeIntContext.prototype.constructor = DataTypeIntContext;

DataTypeIntContext.prototype.K_INT = function() {
    return this.getToken(CqlParser.K_INT, 0);
};

DataTypeIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeInt(this);
	}
};

DataTypeIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeInt(this);
	}
};

DataTypeIntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeInt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeIntContext = DataTypeIntContext;

CqlParser.prototype.dataTypeInt = function() {

    var localctx = new DataTypeIntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, CqlParser.RULE_dataTypeInt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2822;
        this.match(CqlParser.K_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeList;
    return this;
}

DataTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeListContext.prototype.constructor = DataTypeListContext;

DataTypeListContext.prototype.K_LIST = function() {
    return this.getToken(CqlParser.K_LIST, 0);
};

DataTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeList(this);
	}
};

DataTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeList(this);
	}
};

DataTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeListContext = DataTypeListContext;

CqlParser.prototype.dataTypeList = function() {

    var localctx = new DataTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, CqlParser.RULE_dataTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2824;
        this.match(CqlParser.K_LIST);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeMapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeMap;
    return this;
}

DataTypeMapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeMapContext.prototype.constructor = DataTypeMapContext;

DataTypeMapContext.prototype.K_MAP = function() {
    return this.getToken(CqlParser.K_MAP, 0);
};

DataTypeMapContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeMap(this);
	}
};

DataTypeMapContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeMap(this);
	}
};

DataTypeMapContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeMap(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeMapContext = DataTypeMapContext;

CqlParser.prototype.dataTypeMap = function() {

    var localctx = new DataTypeMapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, CqlParser.RULE_dataTypeMap);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2826;
        this.match(CqlParser.K_MAP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeSmallIntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeSmallInt;
    return this;
}

DataTypeSmallIntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeSmallIntContext.prototype.constructor = DataTypeSmallIntContext;

DataTypeSmallIntContext.prototype.K_SMALLINT = function() {
    return this.getToken(CqlParser.K_SMALLINT, 0);
};

DataTypeSmallIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeSmallInt(this);
	}
};

DataTypeSmallIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeSmallInt(this);
	}
};

DataTypeSmallIntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeSmallInt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeSmallIntContext = DataTypeSmallIntContext;

CqlParser.prototype.dataTypeSmallInt = function() {

    var localctx = new DataTypeSmallIntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, CqlParser.RULE_dataTypeSmallInt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2828;
        this.match(CqlParser.K_SMALLINT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeSet;
    return this;
}

DataTypeSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeSetContext.prototype.constructor = DataTypeSetContext;

DataTypeSetContext.prototype.K_SET = function() {
    return this.getToken(CqlParser.K_SET, 0);
};

DataTypeSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeSet(this);
	}
};

DataTypeSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeSet(this);
	}
};

DataTypeSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeSetContext = DataTypeSetContext;

CqlParser.prototype.dataTypeSet = function() {

    var localctx = new DataTypeSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, CqlParser.RULE_dataTypeSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2830;
        this.match(CqlParser.K_SET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeTextContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeText;
    return this;
}

DataTypeTextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeTextContext.prototype.constructor = DataTypeTextContext;

DataTypeTextContext.prototype.K_TEXT = function() {
    return this.getToken(CqlParser.K_TEXT, 0);
};

DataTypeTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeText(this);
	}
};

DataTypeTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeText(this);
	}
};

DataTypeTextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeText(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeTextContext = DataTypeTextContext;

CqlParser.prototype.dataTypeText = function() {

    var localctx = new DataTypeTextContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, CqlParser.RULE_dataTypeText);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2832;
        this.match(CqlParser.K_TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeTimeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeTime;
    return this;
}

DataTypeTimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeTimeContext.prototype.constructor = DataTypeTimeContext;

DataTypeTimeContext.prototype.K_TIME = function() {
    return this.getToken(CqlParser.K_TIME, 0);
};

DataTypeTimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeTime(this);
	}
};

DataTypeTimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeTime(this);
	}
};

DataTypeTimeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeTime(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeTimeContext = DataTypeTimeContext;

CqlParser.prototype.dataTypeTime = function() {

    var localctx = new DataTypeTimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, CqlParser.RULE_dataTypeTime);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2834;
        this.match(CqlParser.K_TIME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeTimeUuidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeTimeUuid;
    return this;
}

DataTypeTimeUuidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeTimeUuidContext.prototype.constructor = DataTypeTimeUuidContext;

DataTypeTimeUuidContext.prototype.K_TIMEUUID = function() {
    return this.getToken(CqlParser.K_TIMEUUID, 0);
};

DataTypeTimeUuidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeTimeUuid(this);
	}
};

DataTypeTimeUuidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeTimeUuid(this);
	}
};

DataTypeTimeUuidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeTimeUuid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeTimeUuidContext = DataTypeTimeUuidContext;

CqlParser.prototype.dataTypeTimeUuid = function() {

    var localctx = new DataTypeTimeUuidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, CqlParser.RULE_dataTypeTimeUuid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2836;
        this.match(CqlParser.K_TIMEUUID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeTimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeTimestamp;
    return this;
}

DataTypeTimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeTimestampContext.prototype.constructor = DataTypeTimestampContext;

DataTypeTimestampContext.prototype.K_TIMESTAMP = function() {
    return this.getToken(CqlParser.K_TIMESTAMP, 0);
};

DataTypeTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeTimestamp(this);
	}
};

DataTypeTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeTimestamp(this);
	}
};

DataTypeTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeTimestampContext = DataTypeTimestampContext;

CqlParser.prototype.dataTypeTimestamp = function() {

    var localctx = new DataTypeTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, CqlParser.RULE_dataTypeTimestamp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2838;
        this.match(CqlParser.K_TIMESTAMP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeTinyIntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeTinyInt;
    return this;
}

DataTypeTinyIntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeTinyIntContext.prototype.constructor = DataTypeTinyIntContext;

DataTypeTinyIntContext.prototype.K_TINYINT = function() {
    return this.getToken(CqlParser.K_TINYINT, 0);
};

DataTypeTinyIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeTinyInt(this);
	}
};

DataTypeTinyIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeTinyInt(this);
	}
};

DataTypeTinyIntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeTinyInt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeTinyIntContext = DataTypeTinyIntContext;

CqlParser.prototype.dataTypeTinyInt = function() {

    var localctx = new DataTypeTinyIntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, CqlParser.RULE_dataTypeTinyInt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2840;
        this.match(CqlParser.K_TINYINT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeTupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeTuple;
    return this;
}

DataTypeTupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeTupleContext.prototype.constructor = DataTypeTupleContext;

DataTypeTupleContext.prototype.K_TUPLE = function() {
    return this.getToken(CqlParser.K_TUPLE, 0);
};

DataTypeTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeTuple(this);
	}
};

DataTypeTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeTuple(this);
	}
};

DataTypeTupleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeTuple(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeTupleContext = DataTypeTupleContext;

CqlParser.prototype.dataTypeTuple = function() {

    var localctx = new DataTypeTupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, CqlParser.RULE_dataTypeTuple);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2842;
        this.match(CqlParser.K_TUPLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeUserDefinedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeUserDefined;
    return this;
}

DataTypeUserDefinedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeUserDefinedContext.prototype.constructor = DataTypeUserDefinedContext;

DataTypeUserDefinedContext.prototype.OBJECT_NAME = function() {
    return this.getToken(CqlParser.OBJECT_NAME, 0);
};

DataTypeUserDefinedContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeUserDefined(this);
	}
};

DataTypeUserDefinedContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeUserDefined(this);
	}
};

DataTypeUserDefinedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeUserDefined(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeUserDefinedContext = DataTypeUserDefinedContext;

CqlParser.prototype.dataTypeUserDefined = function() {

    var localctx = new DataTypeUserDefinedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, CqlParser.RULE_dataTypeUserDefined);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2844;
        this.match(CqlParser.OBJECT_NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeUuidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeUuid;
    return this;
}

DataTypeUuidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeUuidContext.prototype.constructor = DataTypeUuidContext;

DataTypeUuidContext.prototype.K_UUID = function() {
    return this.getToken(CqlParser.K_UUID, 0);
};

DataTypeUuidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeUuid(this);
	}
};

DataTypeUuidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeUuid(this);
	}
};

DataTypeUuidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeUuid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeUuidContext = DataTypeUuidContext;

CqlParser.prototype.dataTypeUuid = function() {

    var localctx = new DataTypeUuidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, CqlParser.RULE_dataTypeUuid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2846;
        this.match(CqlParser.K_UUID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeVarCharContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeVarChar;
    return this;
}

DataTypeVarCharContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeVarCharContext.prototype.constructor = DataTypeVarCharContext;

DataTypeVarCharContext.prototype.K_VARCHAR = function() {
    return this.getToken(CqlParser.K_VARCHAR, 0);
};

DataTypeVarCharContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeVarChar(this);
	}
};

DataTypeVarCharContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeVarChar(this);
	}
};

DataTypeVarCharContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeVarChar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeVarCharContext = DataTypeVarCharContext;

CqlParser.prototype.dataTypeVarChar = function() {

    var localctx = new DataTypeVarCharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, CqlParser.RULE_dataTypeVarChar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2848;
        this.match(CqlParser.K_VARCHAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeVarIntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeVarInt;
    return this;
}

DataTypeVarIntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeVarIntContext.prototype.constructor = DataTypeVarIntContext;

DataTypeVarIntContext.prototype.K_VARINT = function() {
    return this.getToken(CqlParser.K_VARINT, 0);
};

DataTypeVarIntContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeVarInt(this);
	}
};

DataTypeVarIntContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeVarInt(this);
	}
};

DataTypeVarIntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeVarInt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeVarIntContext = DataTypeVarIntContext;

CqlParser.prototype.dataTypeVarInt = function() {

    var localctx = new DataTypeVarIntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, CqlParser.RULE_dataTypeVarInt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2850;
        this.match(CqlParser.K_VARINT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataTypeStructureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_dataTypeStructure;
    return this;
}

DataTypeStructureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeStructureContext.prototype.constructor = DataTypeStructureContext;

DataTypeStructureContext.prototype.syntaxBracketLa = function() {
    return this.getTypedRuleContext(SyntaxBracketLaContext,0);
};

DataTypeStructureContext.prototype.dataType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeContext);
    } else {
        return this.getTypedRuleContext(DataTypeContext,i);
    }
};

DataTypeStructureContext.prototype.syntaxBracketRa = function() {
    return this.getTypedRuleContext(SyntaxBracketRaContext,0);
};

DataTypeStructureContext.prototype.syntaxComma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SyntaxCommaContext);
    } else {
        return this.getTypedRuleContext(SyntaxCommaContext,i);
    }
};

DataTypeStructureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterDataTypeStructure(this);
	}
};

DataTypeStructureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitDataTypeStructure(this);
	}
};

DataTypeStructureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitDataTypeStructure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.DataTypeStructureContext = DataTypeStructureContext;

CqlParser.prototype.dataTypeStructure = function() {

    var localctx = new DataTypeStructureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, CqlParser.RULE_dataTypeStructure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2852;
        this.syntaxBracketLa();
        this.state = 2853;
        this.dataType();
        this.state = 2859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CqlParser.COMMA) {
            this.state = 2854;
            this.syntaxComma();
            this.state = 2855;
            this.dataType();
            this.state = 2861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2862;
        this.syntaxBracketRa();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecialStarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_specialStar;
    return this;
}

SpecialStarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialStarContext.prototype.constructor = SpecialStarContext;

SpecialStarContext.prototype.STAR = function() {
    return this.getToken(CqlParser.STAR, 0);
};

SpecialStarContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSpecialStar(this);
	}
};

SpecialStarContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSpecialStar(this);
	}
};

SpecialStarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSpecialStar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SpecialStarContext = SpecialStarContext;

CqlParser.prototype.specialStar = function() {

    var localctx = new SpecialStarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, CqlParser.RULE_specialStar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2864;
        this.match(CqlParser.STAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecialDotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_specialDot;
    return this;
}

SpecialDotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialDotContext.prototype.constructor = SpecialDotContext;

SpecialDotContext.prototype.DOT = function() {
    return this.getToken(CqlParser.DOT, 0);
};

SpecialDotContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSpecialDot(this);
	}
};

SpecialDotContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSpecialDot(this);
	}
};

SpecialDotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSpecialDot(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SpecialDotContext = SpecialDotContext;

CqlParser.prototype.specialDot = function() {

    var localctx = new SpecialDotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, CqlParser.RULE_specialDot);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2866;
        this.match(CqlParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EofContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_eof;
    return this;
}

EofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EofContext.prototype.constructor = EofContext;

EofContext.prototype.EOF = function() {
    return this.getToken(CqlParser.EOF, 0);
};

EofContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterEof(this);
	}
};

EofContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitEof(this);
	}
};

EofContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitEof(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.EofContext = EofContext;

CqlParser.prototype.eof = function() {

    var localctx = new EofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, CqlParser.RULE_eof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2868;
        this.match(CqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketLrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLr;
    return this;
}

SyntaxBracketLrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLrContext.prototype.constructor = SyntaxBracketLrContext;

SyntaxBracketLrContext.prototype.LR_BRACKET = function() {
    return this.getToken(CqlParser.LR_BRACKET, 0);
};

SyntaxBracketLrContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLr(this);
	}
};

SyntaxBracketLrContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLr(this);
	}
};

SyntaxBracketLrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLrContext = SyntaxBracketLrContext;

CqlParser.prototype.syntaxBracketLr = function() {

    var localctx = new SyntaxBracketLrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, CqlParser.RULE_syntaxBracketLr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2870;
        this.match(CqlParser.LR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketRrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRr;
    return this;
}

SyntaxBracketRrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRrContext.prototype.constructor = SyntaxBracketRrContext;

SyntaxBracketRrContext.prototype.RR_BRACKET = function() {
    return this.getToken(CqlParser.RR_BRACKET, 0);
};

SyntaxBracketRrContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRr(this);
	}
};

SyntaxBracketRrContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRr(this);
	}
};

SyntaxBracketRrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRrContext = SyntaxBracketRrContext;

CqlParser.prototype.syntaxBracketRr = function() {

    var localctx = new SyntaxBracketRrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, CqlParser.RULE_syntaxBracketRr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2872;
        this.match(CqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketLcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLc;
    return this;
}

SyntaxBracketLcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLcContext.prototype.constructor = SyntaxBracketLcContext;

SyntaxBracketLcContext.prototype.LC_BRACKET = function() {
    return this.getToken(CqlParser.LC_BRACKET, 0);
};

SyntaxBracketLcContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLc(this);
	}
};

SyntaxBracketLcContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLc(this);
	}
};

SyntaxBracketLcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLcContext = SyntaxBracketLcContext;

CqlParser.prototype.syntaxBracketLc = function() {

    var localctx = new SyntaxBracketLcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, CqlParser.RULE_syntaxBracketLc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2874;
        this.match(CqlParser.LC_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketRcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRc;
    return this;
}

SyntaxBracketRcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRcContext.prototype.constructor = SyntaxBracketRcContext;

SyntaxBracketRcContext.prototype.RC_BRACKET = function() {
    return this.getToken(CqlParser.RC_BRACKET, 0);
};

SyntaxBracketRcContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRc(this);
	}
};

SyntaxBracketRcContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRc(this);
	}
};

SyntaxBracketRcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRcContext = SyntaxBracketRcContext;

CqlParser.prototype.syntaxBracketRc = function() {

    var localctx = new SyntaxBracketRcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, CqlParser.RULE_syntaxBracketRc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2876;
        this.match(CqlParser.RC_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketLaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLa;
    return this;
}

SyntaxBracketLaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLaContext.prototype.constructor = SyntaxBracketLaContext;

SyntaxBracketLaContext.prototype.OPERATOR_LT = function() {
    return this.getToken(CqlParser.OPERATOR_LT, 0);
};

SyntaxBracketLaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLa(this);
	}
};

SyntaxBracketLaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLa(this);
	}
};

SyntaxBracketLaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLa(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLaContext = SyntaxBracketLaContext;

CqlParser.prototype.syntaxBracketLa = function() {

    var localctx = new SyntaxBracketLaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, CqlParser.RULE_syntaxBracketLa);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2878;
        this.match(CqlParser.OPERATOR_LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketRaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRa;
    return this;
}

SyntaxBracketRaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRaContext.prototype.constructor = SyntaxBracketRaContext;

SyntaxBracketRaContext.prototype.OPERATOR_GT = function() {
    return this.getToken(CqlParser.OPERATOR_GT, 0);
};

SyntaxBracketRaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRa(this);
	}
};

SyntaxBracketRaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRa(this);
	}
};

SyntaxBracketRaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRa(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRaContext = SyntaxBracketRaContext;

CqlParser.prototype.syntaxBracketRa = function() {

    var localctx = new SyntaxBracketRaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, CqlParser.RULE_syntaxBracketRa);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2880;
        this.match(CqlParser.OPERATOR_GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketLsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketLs;
    return this;
}

SyntaxBracketLsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketLsContext.prototype.constructor = SyntaxBracketLsContext;

SyntaxBracketLsContext.prototype.LS_BRACKET = function() {
    return this.getToken(CqlParser.LS_BRACKET, 0);
};

SyntaxBracketLsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketLs(this);
	}
};

SyntaxBracketLsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketLs(this);
	}
};

SyntaxBracketLsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketLs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketLsContext = SyntaxBracketLsContext;

CqlParser.prototype.syntaxBracketLs = function() {

    var localctx = new SyntaxBracketLsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, CqlParser.RULE_syntaxBracketLs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2882;
        this.match(CqlParser.LS_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxBracketRsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxBracketRs;
    return this;
}

SyntaxBracketRsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxBracketRsContext.prototype.constructor = SyntaxBracketRsContext;

SyntaxBracketRsContext.prototype.RS_BRACKET = function() {
    return this.getToken(CqlParser.RS_BRACKET, 0);
};

SyntaxBracketRsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxBracketRs(this);
	}
};

SyntaxBracketRsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxBracketRs(this);
	}
};

SyntaxBracketRsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxBracketRs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxBracketRsContext = SyntaxBracketRsContext;

CqlParser.prototype.syntaxBracketRs = function() {

    var localctx = new SyntaxBracketRsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, CqlParser.RULE_syntaxBracketRs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2884;
        this.match(CqlParser.RS_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxCommaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxComma;
    return this;
}

SyntaxCommaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxCommaContext.prototype.constructor = SyntaxCommaContext;

SyntaxCommaContext.prototype.COMMA = function() {
    return this.getToken(CqlParser.COMMA, 0);
};

SyntaxCommaContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxComma(this);
	}
};

SyntaxCommaContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxComma(this);
	}
};

SyntaxCommaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxComma(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxCommaContext = SyntaxCommaContext;

CqlParser.prototype.syntaxComma = function() {

    var localctx = new SyntaxCommaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, CqlParser.RULE_syntaxComma);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2886;
        this.match(CqlParser.COMMA);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxColonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxColon;
    return this;
}

SyntaxColonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxColonContext.prototype.constructor = SyntaxColonContext;

SyntaxColonContext.prototype.COLON = function() {
    return this.getToken(CqlParser.COLON, 0);
};

SyntaxColonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxColon(this);
	}
};

SyntaxColonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxColon(this);
	}
};

SyntaxColonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxColon(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxColonContext = SyntaxColonContext;

CqlParser.prototype.syntaxColon = function() {

    var localctx = new SyntaxColonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, CqlParser.RULE_syntaxColon);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2888;
        this.match(CqlParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxPlusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxPlus;
    return this;
}

SyntaxPlusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxPlusContext.prototype.constructor = SyntaxPlusContext;

SyntaxPlusContext.prototype.PLUS = function() {
    return this.getToken(CqlParser.PLUS, 0);
};

SyntaxPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxPlus(this);
	}
};

SyntaxPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxPlus(this);
	}
};

SyntaxPlusContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxPlus(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxPlusContext = SyntaxPlusContext;

CqlParser.prototype.syntaxPlus = function() {

    var localctx = new SyntaxPlusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, CqlParser.RULE_syntaxPlus);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2890;
        this.match(CqlParser.PLUS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxMinusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxMinus;
    return this;
}

SyntaxMinusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxMinusContext.prototype.constructor = SyntaxMinusContext;

SyntaxMinusContext.prototype.MINUS = function() {
    return this.getToken(CqlParser.MINUS, 0);
};

SyntaxMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxMinus(this);
	}
};

SyntaxMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxMinus(this);
	}
};

SyntaxMinusContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxMinus(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxMinusContext = SyntaxMinusContext;

CqlParser.prototype.syntaxMinus = function() {

    var localctx = new SyntaxMinusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, CqlParser.RULE_syntaxMinus);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2892;
        this.match(CqlParser.MINUS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxSquoteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxSquote;
    return this;
}

SyntaxSquoteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxSquoteContext.prototype.constructor = SyntaxSquoteContext;

SyntaxSquoteContext.prototype.SQUOTE = function() {
    return this.getToken(CqlParser.SQUOTE, 0);
};

SyntaxSquoteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxSquote(this);
	}
};

SyntaxSquoteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxSquote(this);
	}
};

SyntaxSquoteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxSquote(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxSquoteContext = SyntaxSquoteContext;

CqlParser.prototype.syntaxSquote = function() {

    var localctx = new SyntaxSquoteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, CqlParser.RULE_syntaxSquote);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2894;
        this.match(CqlParser.SQUOTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxDquoteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxDquote;
    return this;
}

SyntaxDquoteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxDquoteContext.prototype.constructor = SyntaxDquoteContext;

SyntaxDquoteContext.prototype.DQUOTE = function() {
    return this.getToken(CqlParser.DQUOTE, 0);
};

SyntaxDquoteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxDquote(this);
	}
};

SyntaxDquoteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxDquote(this);
	}
};

SyntaxDquoteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxDquote(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxDquoteContext = SyntaxDquoteContext;

CqlParser.prototype.syntaxDquote = function() {

    var localctx = new SyntaxDquoteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, CqlParser.RULE_syntaxDquote);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2896;
        this.match(CqlParser.DQUOTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxOperatorEqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxOperatorEq;
    return this;
}

SyntaxOperatorEqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxOperatorEqContext.prototype.constructor = SyntaxOperatorEqContext;

SyntaxOperatorEqContext.prototype.OPERATOR_EQ = function() {
    return this.getToken(CqlParser.OPERATOR_EQ, 0);
};

SyntaxOperatorEqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxOperatorEq(this);
	}
};

SyntaxOperatorEqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxOperatorEq(this);
	}
};

SyntaxOperatorEqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxOperatorEq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxOperatorEqContext = SyntaxOperatorEqContext;

CqlParser.prototype.syntaxOperatorEq = function() {

    var localctx = new SyntaxOperatorEqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, CqlParser.RULE_syntaxOperatorEq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2898;
        this.match(CqlParser.OPERATOR_EQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxOperatorLtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxOperatorLt;
    return this;
}

SyntaxOperatorLtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxOperatorLtContext.prototype.constructor = SyntaxOperatorLtContext;

SyntaxOperatorLtContext.prototype.OPERATOR_LT = function() {
    return this.getToken(CqlParser.OPERATOR_LT, 0);
};

SyntaxOperatorLtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxOperatorLt(this);
	}
};

SyntaxOperatorLtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxOperatorLt(this);
	}
};

SyntaxOperatorLtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxOperatorLt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxOperatorLtContext = SyntaxOperatorLtContext;

CqlParser.prototype.syntaxOperatorLt = function() {

    var localctx = new SyntaxOperatorLtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, CqlParser.RULE_syntaxOperatorLt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2900;
        this.match(CqlParser.OPERATOR_LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxOperatorGtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxOperatorGt;
    return this;
}

SyntaxOperatorGtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxOperatorGtContext.prototype.constructor = SyntaxOperatorGtContext;

SyntaxOperatorGtContext.prototype.OPERATOR_GT = function() {
    return this.getToken(CqlParser.OPERATOR_GT, 0);
};

SyntaxOperatorGtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxOperatorGt(this);
	}
};

SyntaxOperatorGtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxOperatorGt(this);
	}
};

SyntaxOperatorGtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxOperatorGt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxOperatorGtContext = SyntaxOperatorGtContext;

CqlParser.prototype.syntaxOperatorGt = function() {

    var localctx = new SyntaxOperatorGtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, CqlParser.RULE_syntaxOperatorGt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2902;
        this.match(CqlParser.OPERATOR_GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxOperatorLteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxOperatorLte;
    return this;
}

SyntaxOperatorLteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxOperatorLteContext.prototype.constructor = SyntaxOperatorLteContext;

SyntaxOperatorLteContext.prototype.OPERATOR_LTE = function() {
    return this.getToken(CqlParser.OPERATOR_LTE, 0);
};

SyntaxOperatorLteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxOperatorLte(this);
	}
};

SyntaxOperatorLteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxOperatorLte(this);
	}
};

SyntaxOperatorLteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxOperatorLte(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxOperatorLteContext = SyntaxOperatorLteContext;

CqlParser.prototype.syntaxOperatorLte = function() {

    var localctx = new SyntaxOperatorLteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, CqlParser.RULE_syntaxOperatorLte);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2904;
        this.match(CqlParser.OPERATOR_LTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SyntaxOperatorGteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CqlParser.RULE_syntaxOperatorGte;
    return this;
}

SyntaxOperatorGteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxOperatorGteContext.prototype.constructor = SyntaxOperatorGteContext;

SyntaxOperatorGteContext.prototype.OPERATOR_GTE = function() {
    return this.getToken(CqlParser.OPERATOR_GTE, 0);
};

SyntaxOperatorGteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.enterSyntaxOperatorGte(this);
	}
};

SyntaxOperatorGteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CqlParserListener ) {
        listener.exitSyntaxOperatorGte(this);
	}
};

SyntaxOperatorGteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CqlParserVisitor ) {
        return visitor.visitSyntaxOperatorGte(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CqlParser.SyntaxOperatorGteContext = SyntaxOperatorGteContext;

CqlParser.prototype.syntaxOperatorGte = function() {

    var localctx = new SyntaxOperatorGteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, CqlParser.RULE_syntaxOperatorGte);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2906;
        this.match(CqlParser.OPERATOR_GTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.CqlParser = CqlParser;
