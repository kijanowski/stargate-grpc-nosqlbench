# nb -v http-graphql-cql-tabularrampup-cycles=1E6 main-cycles=1E9 stargate_host=my_stargate_host host=my_stargate_host auth_token=$AUTH_TOKEN
description: |
  This workload emulates a time-series data model and access patterns.
  This should be identical to the cql variant except for:
  - We need to URLEncode the `data` and `data_write` bindings because newlines can't be sent in REST calls.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  Note that stargate_port should reflect the port where GraphQL API is exposed (defaults to 8080).

scenarios:
  default:
    - run driver=cql tags==phase:schema threads==1 cycles==UNDEF
    - run driver=http tags==phase:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    - run driver=http tags==phase:main cycles===TEMPLATE(main-cycles,10000000) threads=auto
bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: stargate_host=host1
  #   multiple hosts: stargate_host=host1,host2,host3
  #   multiple weighted hosts: stargate_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<stargate_host:stargate>>')
  # http request id
  request_id: ToHashedUUID(); ToString();
  # for ramp-up and verify
  part_layout: Div(<<partsize:1000000>>); ToString() -> String
  clust_layout: Mod(<<partsize:1000000>>); ToString() -> String
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();
  # for read
  limit: Uniform(1,10) -> int
  part_read: Uniform(0,<<partcount:100>>)->int; ToString() -> String
  clust_read: Add(1); Uniform(0,<<partsize:1000000>>)->int; ToString() -> String
  # for write
  part_write: Hash(); Uniform(0,<<partcount:100>>)->int; ToString() -> String
  clust_write: Hash(); Add(1); Uniform(0,<<partsize:1000000>>)->int; ToString() -> String
  data_write: Hash(); HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();

blocks:
  - name: schema
    tags:
      phase: schema
    params:
      prepared: false
    statements:
      - create-keyspace: |
          create keyspace if not exists <<keyspace:gqlcf_tabular>>
          WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '<<rf:1>>'}
          AND durable_writes = true;
        tags:
          name: create-keyspace
      - create-table: |
          create table if not exists <<keyspace:gqlcf_tabular>>.<<table:tabular>> (
           part text,
           clust text,
           data text,
           PRIMARY KEY (part,clust)
          );
        tags:
          name: create-table
  - name: rampup
    tags:
      phase: rampup
    statements:
      - rampup-insert: POST <<protocol:http>>://{weighted_hosts}:<<stargate_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlcf_tabular>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
          {"query":"mutation {\n  insert<<table:tabular>>( value: {part: \"{part_layout}\", clust: \"{clust_layout}\", data: \"{data}\"}) {value {part, clust, data}}}"}
        tags:
          name: rampup-insert
  - name: main-read
    tags:
      phase: main
      type: read
    params:
      ratio: 5
    statements:
      - main-select: POST <<protocol:http>>://{weighted_hosts}:<<stargate_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlcf_tabular>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
          {"query":"{<<table:tabular>>(value: {part: \"{part_read}\"}, options: { pageSize: <<limit:10>> }) {values {part, clust, data}}}"}
        tags:
          name: main-select
  - name: main-write
    tags:
      phase: main
      type: write
    params:
      ratio: 5
    statements:
      - main-write: POST <<protocol:http>>://{weighted_hosts}:<<stargate_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlcf_tabular>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
          {"query":"mutation {\n  insert<<table:tabular>>( value: {part: \"{part_write}\", clust: \"{clust_write}\", data: \"{data_write}\"}) {value {part, clust, data}}}"}
        tags:
          name: main-write
