### NB Pulsar driver related configuration - driver.xxx
driver.client-type = consumer
driver.num-workers = 1
# TODO: functionalities to be completed
driver.sync-mode = sync
driver.msg-recv-ouput = console


### Schema related configurations - schema.xxx
# valid types:
# - primitive type (https://pulsar.apache.org/docs/en/schema-understand/#primitive-type)
# - keyvalue (https://pulsar.apache.org/docs/en/schema-understand/#keyvalue)
# - strut (complex type) (https://pulsar.apache.org/docs/en/schema-understand/#struct)
#   avro, json, protobuf
#
# TODO: as a starting point, only supports the following types
#       1) primitive types, including bytearray (byte[]) which is default, for messages without schema
#       2) Avro for messages with schema
schema.type =
schema.definition = file:///Users/yabinmeng/DataStax/nosqlbench/driver-pulsar/src/main/resources/activities/iot-example.avsc


### Pulsar client related configurations - client.xxx
# http://pulsar.apache.org/docs/en/client-libraries-java/#client
client.serviceUrl: pulsar://localhost:6650
client.connectionTimeoutMs = 5000


### Producer related configurations (global) - producer.xxx
# http://pulsar.apache.org/docs/en/client-libraries-java/#configure-producer
producer.producerName =
producer.topicName = persistent://public/default/mynbtest
producer.sendTimeoutMs =

### Consumer related configurations (global) - consumer.xxx
# http://pulsar.apache.org/docs/en/client-libraries-java/#configure-consumer
consumer.topicNames =
consumer.topicsPattern =
consumer.subscriptionName =
consumer.subscriptionType =
consumer.consumerName =
consumer.receiverQueueSize =

### Reader related configurations (global) - reader.xxx
# https://pulsar.apache.org/docs/en/client-libraries-java/#reader
reader.topicName =
reader.receiverQueueSize =
reader.readerName =
